<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HNDR.ME - 2014</title><link href="https://hndr.me/" rel="alternate"></link><link href="https://hndr.me/feeds/2014.atom.xml" rel="self"></link><id>https://hndr.me/</id><updated>2014-07-12T18:55:00+08:00</updated><entry><title>Laravel Mass Assignment Protection - Blacklist V.S. Whitelist</title><link href="https://hndr.me/blog/laravel-mass-assignment-protection-blacklist-vs-whitelist" rel="alternate"></link><published>2014-07-12T18:55:00+08:00</published><updated>2014-07-12T18:55:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2014-07-12:/blog/laravel-mass-assignment-protection-blacklist-vs-whitelist</id><summary type="html">&lt;p&gt;Difference between using whitelist and blacklist to prevent mass-assignment vulnerability in&amp;nbsp;Laravel.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;&lt;span class="caps"&gt;TLDR&lt;/span&gt;&lt;/em&gt;: Use whitelist instead of blacklist. Laravel will attempt to mass-assign all attributes that aren’t in the blacklist, including properties/columns that aren’t on the table, causing &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;In Laravel (At least on version 4.2.6), there is a convenient method to insert data into the&amp;nbsp;database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the line of code above will take all of the form data and assign them to the &lt;code&gt;User&lt;/code&gt; model’s attributes. This means that if we don’t put in any safe guard, anyone could modify the request parameters and set any value for any of the property. This could includes things like user’s roles and permissions, ids, or any other sensitive data. Of course, we could just assign the attributes one-by-one, but that would make our code a lot more&amp;nbsp;verbose.&lt;/p&gt;
&lt;p&gt;Fortunately, Laravel provide two easy ways to safeguard against this kind of mass assignment vulnerability. Either specify a list of fields that can be mass assigned (whitelist), or specify a list of fields that can’t be mass assigned (blacklist). While it seems like the two do the same thing, there are some subtle differences that could cause a bit of&amp;nbsp;confusion.&lt;/p&gt;
&lt;p&gt;For example, we got this table of&amp;nbsp;User:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;User&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;increments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;unsignedInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Say we want to protect the &lt;code&gt;role&lt;/code&gt; field from being mass-assignment, so, there are two ways to do this in the &lt;code&gt;User&lt;/code&gt; model. We can either specify a &lt;code&gt;guarded&lt;/code&gt; property to specify a list of fields that we want to exclude from&amp;nbsp;mass-assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Eloquent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$timestamps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$guarded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or we can specify a &lt;code&gt;fillable&lt;/code&gt; property to specify a list of fields that we want to allow for&amp;nbsp;mass-assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Eloquent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$timestamps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$fillable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While you would most probably wouldn’t notice any difference, but let&amp;#8217;s take a look at the Laravel’s &lt;code&gt;Model.php&lt;/code&gt; source code. First, the code that perform the mass assignment&amp;nbsp;operation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$totallyGuarded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;totallyGuarded&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillableFromArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;removeTableFromKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isFillable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$totallyGuarded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MassAssignmentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see that the code loop through the list fillable attributes via the &lt;code&gt;fillableFromArray&lt;/code&gt; method, so let’s take a look at&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;fillableFromArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$unguarded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;array_intersect_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_flip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The method check if we have any value in the &lt;code&gt;fillable&lt;/code&gt; property, and if so, return a list of properties inside the &lt;code&gt;attributes&lt;/code&gt; variable that intersect with the &lt;code&gt;fillable&lt;/code&gt; array, else simply return the &lt;code&gt;attributes&lt;/code&gt; itself. This means if we have a &lt;code&gt;fillable&lt;/code&gt; property defined for our model, the mass assignment will not process that attributes that aren’t specified in the &lt;code&gt;fillable&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;So, let’s move on to how Laravel guards the attributes in the &lt;code&gt;guarded&lt;/code&gt; property. Let’s go back to the &lt;code&gt;fill&lt;/code&gt; method. We can see that for every attributes, the method will check if the key is fillable by calling the &lt;code&gt;isFillable&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;isFillable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$unguarded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isGuarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;isGuarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;guarded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;guarded&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if the key is not listed in the &lt;code&gt;fillable&lt;/code&gt; property,  it will call another method &lt;code&gt;isGuarded&lt;/code&gt;, that checks if the key is specified in the &lt;code&gt;guarded&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;This means, if &lt;code&gt;fillable&lt;/code&gt; is not specified, and the key is not listed in the &lt;code&gt;guarded&lt;/code&gt; property, the framework will assume that the key can be safely mass-assigned. Sound perfectly fine and should be expected, but when we include a property that is not a field of the table, it will cause an error, because the framework will try to insert a data into a column that doesn’t exists. The same problem will not occur if you use a while list since the framework will only process the keys that are in the&amp;nbsp;array.&lt;/p&gt;
&lt;p&gt;In conclusion, the best way to protect against mass-assignment vulnerability is to use the whitelist instead of the blacklist. From a security standpoint, it is better to explicitly specify the things that you want to allow anyway, and it also wouldn’t make Laravel try and insert the a non-existing field into the&amp;nbsp;database.&lt;/p&gt;</content><category term="laravel"></category><category term="programming"></category></entry><entry><title>On Adding New Features</title><link href="https://hndr.me/blog/on-adding-new-features" rel="alternate"></link><published>2014-06-24T19:42:00+08:00</published><updated>2014-06-24T19:42:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2014-06-24:/blog/on-adding-new-features</id><summary type="html">&lt;p&gt;On my job, I have been working on a product that we have been trying …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On my job, I have been working on a product that we have been trying to get to market within this month. There are more-or-less 2 programmers working on this project, an iOS programmer working on an iPad app and an iPhone app, and myself working on the server backend and the data analysis front-end. I said &amp;#8216;more-or-less&amp;#8217; because there was another guy working on an Android app, but he currently is working on another project, also, while I do spend the majority of my time working on the project, I am also involved in several other clients&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;The project is supposed to be launched by the end of this month, but I personally don&amp;#8217;t think the project is anywhere close to production-ready. Despite this, we keep adding features. The main target market of the product is small business owners, and I do understand why these features might be necessary, but I can&amp;#8217;t help but feel that we should stop adding features and focus on making the existing features to be ready for&amp;nbsp;production.&lt;/p&gt;
&lt;p&gt;I am currently reading a book by &lt;a href="https://gettingreal.37signals.com/"&gt;37 Signals, Getting Real&lt;/a&gt;. I highly recommend it to anyone who writes software for a living to read it. Its not a technical book, so no need to open up your text editor to try out a code snippet from the book.I haven&amp;#8217;t finished reading it yet, but the content has been really great so far. It is full of valuable insights on running a software business and designing product. But, the whole fifth chapter on Feature Selection really resonates with me because I have been thinking about what adding features to a software product really&amp;nbsp;means.&lt;/p&gt;
&lt;p&gt;One of the hidden cost of a new feature mentioned in the book is feature&amp;nbsp;loop:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, be on the lookout for feature loops (i.e. features that lead to more features). We&amp;#8217;ve had requests to add a meetings tab to Basecamp. Seems simple enough until you examine it closely. Think of all the different items a meetings tab might require: location, time, room, people, email invites, calendar integration, support documentation, etc. That&amp;#8217;s not to mention that we&amp;#8217;d have to change promotional screenshots, tour pages, faq/help pages, the terms of service, and more. Before you know it, a simple idea can snowball into a major&amp;nbsp;headache.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is exactly what I&amp;#8217;ve been experiencing working on the project. Adding a stock keeping feature leads to inventory features which leads to keeping track of invoices which leads to keeping track of suppliers and so on and so&amp;nbsp;forth.&lt;/p&gt;
&lt;p&gt;While that might not seems much, from the technical persepective, adding a feature often involve more than just coding up the feature. Coding up a new feature by itself is not much work, but one thing to keep in mind is that these features rarely work in isolation. That means, programming the feature doesn&amp;#8217;t only require us to write the code for the new feature, it also means that we need to test it. Not just the new features either, we need to be sure that the few lines of new code doesn&amp;#8217;t break any existing feature. Those are just code, if the change involve changing the database schema, pulling in new dependencies, or having to coordinate with an additional process that would make things even more&amp;nbsp;complicated.&lt;/p&gt;
&lt;p&gt;Especially changes in database schema. The ideal database schema that can accomodate the new feature often aren&amp;#8217;t backward compatible, it often breaks stuffs in the unexpected places. Also, keeping the backword compatibility while adding hacks on top of hacks to accomodate the new features are even worse, it is basically keeping an active time bomb&amp;nbsp;around.&lt;/p&gt;
&lt;p&gt;All these hidden costs adds up, too. Almost like compound interest, you need to make sure not to break existing features when implementing a new one, and when you have added the new feature, that would be one more thing that you need to make sure not to break when adding another feature. All that makes maintaining the code harder. Maintainance doesn&amp;#8217;t just mean fixing bugs, it also means that while you are fixing a bug, you need to make sure that you don&amp;#8217;t end up breaking stuff in other place, and do a favor for your future self and make sure the code stays easily modifiable so that future you can do the same thing. Also, while doing all these make sure to keep the code clean and isolated so that you don&amp;#8217;t end up with a stack of jenga of a code in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;The recent experience makes me think how great would it be if I invested some time to build an automated test infrastructure early in the development process. Of course an automated test won&amp;#8217;t help you to prevent breaks if the code itself is built like a house of cards, but it does help so that you don&amp;#8217;t have to manually test all the features by yourself, not to mention that it is not unusual at all for us to miss several parts of the project while performing the&amp;nbsp;test.&lt;/p&gt;
&lt;p&gt;So, to summarize up, while working on a software project that doesn&amp;#8217;t have a clear specification and changes all the time, help your future-self and have an automated test infrastructure. Follow the &lt;span class="caps"&gt;SOLID&lt;/span&gt; principles while writing your code, and keep your classes isolated from each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;, all of that will not help if new features keep being added all the time. While working on project, with deadlines and features being added and removed all the time, having things break is almost inevitable. So, as the book says, the best thing is to say No. Keep only the features that are essentials, and make sure these features works really, really well. As mentioned in the book, Steve Jobs once&amp;nbsp;said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Innovation] comes from saying no to 1,000 things to make sure we don&amp;#8217;t get on the wrong track or try to do too much. We&amp;#8217;re always thinking about new markets we could enter, but it&amp;#8217;s only by saying no that you can concentrate on the things that are really&amp;nbsp;important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I believe that is something we should all keep in mind in developing not only a software, but also for any products that actually&amp;nbsp;works.&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Random Updates</title><link href="https://hndr.me/blog/random-updates" rel="alternate"></link><published>2014-06-01T20:44:00+08:00</published><updated>2014-06-01T20:44:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2014-06-01:/blog/random-updates</id><summary type="html">&lt;p&gt;Starting from this month, I have been officially in my current job for 6 months …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Starting from this month, I have been officially in my current job for 6 months, which also means I just got out of the probation period for the company. During the past 6 months, I have been doing a bunch of various things, and also learned a lot of stuffs that I have never really thought&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Anyway, the main reason I am writing this post right now is simple: I am procrastinating. I have several conference videos that I wanted to watch, and also several libraries and frameworks that I want to try out, but for some reason, my mind keeps drifting away. This week, three developers I work with left the company, one of which is the person who mentored me during my internship with them. I have known about the departure a few weeks prior, and I didn&amp;#8217;t actually thought about it much, but it turns out, the departure of these colleagues does affect me quite a bit. I thought I am used to changes, but it seems like I&amp;#8217;m not. It made me think about stuffs. Stuffs that are hard to put in writing, stuffs that are uncomfortable to think&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Anyway, most of my work now revolves around the back end, I had to learn a bunch of stuffs on server administration, distributed architecture, and I also ended up using the Laravel &lt;span class="caps"&gt;PHP&lt;/span&gt; framework a lot. Which is actually very fun and exciting, until something blows up and data are lost, that is. Anyway, all that stuffs that I learned during the period makes for a lot of materials that I wanted to write up, but for various reasons (mainly me being lazy), I never ended up getting to it. While using the static site generator is excellent in terms of simplicity, it also meant that I have to open up my text editor and generate a new site even just to post a short draft. I considered migrating my site to &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt;, but having to manage a server pushed me sticking with Pelican. What I do now is to write my drafts in Evernote, and then paste them here when it is ready, which isn&amp;#8217;t exactly a seamless process considering Evernote&amp;#8217;s lacking support for Markdown. That being said, I do hope it would help me to write&amp;nbsp;more.&lt;/p&gt;</content></entry><entry><title>2014 - Thoughts</title><link href="https://hndr.me/blog/2014-thoughts" rel="alternate"></link><published>2014-01-29T14:33:00+08:00</published><updated>2014-01-29T14:33:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2014-01-29:/blog/2014-thoughts</id><summary type="html">&lt;p&gt;It&amp;#8217;s rather late for a new year posting, considering we are almost entering the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s rather late for a new year posting, considering we are almost entering the second month 2014 by now, but well, what can I say, I haven&amp;#8217;t got much time to write the past few months, and now I am only writing because I&amp;#8217;m stuck waiting for the next ferry back to my hometown that isn&amp;#8217;t coming for 2&amp;nbsp;hours.&lt;/p&gt;
&lt;p&gt;2014 is pretty special for myself. New years are usually a chance to start something for most people, a fresh start, where any unpleasant things that has happened happened &amp;#8220;last year&amp;#8221;. That said, for most people, these words are simply figurative speech. While the calendar has indeed changed, most people&amp;#8217;s live didn&amp;#8217;t, and life still goes on as usual. I myself have never really celebrated new year as anything other than a chance to get together with friends and do some catching&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;2014 is different. Quite a lot has changed in my life in the past few months. I recently graduated from university, with that, I also started a new job as a software&amp;nbsp;engineer.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s pretty much it. And wow, it&amp;#8217;s sounds pretty trivial now that I think about it. But still, a new year usually calls us to reflect about past events. I have been thinking about what kind of person I&amp;#8217;ve been, what kind of person I want to be, what I want to do in my life, pretty much my life direction in&amp;nbsp;general.&lt;/p&gt;
&lt;p&gt;Thinking back about myself, there are many things that I wish I&amp;#8217;d done differently. Especially during my university years. I was too much of a coward to take more risk in pretty much everything. People who I didn&amp;#8217;t take the chance to know more about, trips to places I didn&amp;#8217;t travel to, skills I didn&amp;#8217;t spend more time learning, and many others. I wasted too much time doing things that I didn&amp;#8217;t really care about just because they are things I&amp;#8217;m comfortable&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;On the risk of sounding like a humblebrag, but I was one of those guys who didn&amp;#8217;t study much, yet still managed to get high scores in class. I honestly didn&amp;#8217;t find the works for my bachelor degree to be too difficult, and I find as long as I pay attention during classes, the only time I would need to study outside of classes would be a day or two before an exam. Because of this I ended up with a lot of free time. But I stupidly spent all these free time doing things like watching movies, surfing the web aimlessly, and other time wasting activities in general. I regretted not using those free times that I had to socialize more, join a student organization or two, learn how to play one or two instruments, and so on. I used to see my friends who seemed to barely have any free time and think what is it about this cozy university life that takes up so much of his time. Well, the answer is simply he made the most of his time in university. I used to think that university life is way too easy and boring. Well, how can it be not easy and boring, I did it&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;Now that I am no longer a student, I am consciously trying to be more active and socialize more. It&amp;#8217;s not easy though, I am your average geek and an through and though introvert, and meeting new people isn&amp;#8217;t my forte, but I am trying, and hopefully this will help me find what I want to do in&amp;nbsp;life.&lt;/p&gt;
&lt;p&gt;Another thing I would like to change is my health. I have been obese as far as I can remember, and now that I have a full time job as a programmer, I can&amp;#8217;t think of any reason that would somehow magically change. I need to start taking responsibility of my health, and not make excuses for me failing to lose weight. I am going to buy a bicycle when I get back from my leave (yes, typical. Always start someday in the future. Seriously though, I&amp;#8217;ll stick to this plan), and I&amp;#8217;ll start commuting to work with my bike. Hopefully this would push me to exercise&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;In work, while I do love what I do, and the work environment is awesome, it&amp;#8217;s not all rainbow and unicorns either. In my first project, I had to work with an existing system that well, let&amp;#8217;s just say it&amp;#8217;s difficult to work with. I myself also committed a big mistake in another project, I chosen a technology stack that no one else seemed to be interested in learning. I personally do love and believe in this stack (and I do think that the way we have been programming needs some serious improvement), which is why I chose it, but I came to learn that in a collaboration project I need to consider more than just the technical merit. I need to consider the people I&amp;#8217;ll be working with, and how comfortable they are in learning these things. The project ended up behind schedule, mostly because other in my team aren&amp;#8217;t comfortable with the new (not that new though) technology yet, and me being too much of an &lt;span class="caps"&gt;OCD&lt;/span&gt;, spent way too much time than I should have cleaning up codes that other people just wrote. Lesson learned. Shipping should comes first before technical aesthetic. Save the beautiful code (not that I am really capable of writing code that good anyway :P) for personal&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;To be honest, when I was applying for jobs several months ago, I had several offers that comes with higher salary than the one that I accepted (my current job). The reason I took on this job is because I felt that I can learn the most about tech with this environment, and since this is my first job anyway, I didn&amp;#8217;t really think of looking for a position with the highest salary so that I can stay for years earning more money. The opportunity to learn. That was what I thought I should be looking for in my first job. But now, I am worried that I maybe forming a bubble around myself to get comfortable and not challenging myself. So that&amp;#8217;s another thing that I should work&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;In life, well, I am still looking for what I want to do in life, but well, for starter, I would love to be able to travel more, get to know more people, hopefully I am able to find people dear to me. While I am an introvert, I do have several close friends that I value very much, but to be honest, the people that really matters to me are my family. For some reason I feel like it&amp;#8217;s not supposed to be this way, and I should have more people that I care about. I don&amp;#8217;t know, I guess this is just one of those things that I would know when the time&amp;nbsp;comes.&lt;/p&gt;
&lt;p&gt;On traveling, well, I have been wanting to travel for several years, but for the past few years, as a poor student living on a scholarship, it&amp;#8217;s not really financially feasible. Not to mention the traveling cost, event the some of visa application fee would&amp;#8217;ve cost me a month&amp;#8217;s living cost. Now that I am working and earning a salary, I hope to be able to save up some money and travel somewhere. Even though visiting the old European cities have been on my mind for quite a while now, I don&amp;#8217;t really have a place that I want to visit yet. It doesn&amp;#8217;t matter where, I am still looking for a place that would pull me&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;As for the life goal, well, I thought about it a lot, but I still can&amp;#8217;t find an answer that I am satisfied with. I guess this is just one those things that you can&amp;#8217;t rush. Well, there is no need to rush it anyway. Some people spend their whole life looking for a destination without finding one, maybe there isn&amp;#8217;t&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;Well, that&amp;#8217;s goes for my 2014 reflection. I don&amp;#8217;t really want to make another new year&amp;#8217;s resolution as my 2012 and 2013 resolution aren&amp;#8217;t completely crossed out yet, so here is my 2014 &amp;#8220;goal&amp;nbsp;guidelines&amp;#8221;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exercise more, start commuting to work with the bike, lose at least&amp;nbsp;15KGs.&lt;/li&gt;
&lt;li&gt;Be more active, socialize more, don&amp;#8217;t get trapped in the comfort&amp;nbsp;zone.&lt;/li&gt;
&lt;li&gt;Start a new project, stick to it, and make it something that&amp;nbsp;counts.&lt;/li&gt;
&lt;li&gt;Stop taking life so seriously. It&amp;#8217;s just&amp;nbsp;life.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s it, I guess. Ah, of course, I didn&amp;#8217;t really include any geek topic so far, so I guess I should mention some. Well, I plan to do another re-design for this site, make new Pelican theme. Let&amp;#8217;s see how that goes. I also plan to rewrite the &lt;a href="https://github.com/hdra/WP_Mog"&gt;Mog WordPress theme&lt;/a&gt;, clean up the codes, and maybe build it on top of one of the popular &lt;span class="caps"&gt;CSS&lt;/span&gt; framework so that it&amp;#8217;s more&amp;nbsp;maintainable.&lt;/p&gt;</content></entry></feed>