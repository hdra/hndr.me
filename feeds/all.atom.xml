<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HNDR.ME</title><link href="http://hndr.me/" rel="alternate"></link><link href="http://hndr.me/feeds/all.atom.xml" rel="self"></link><id>http://hndr.me/</id><updated>2018-01-02T18:33:00+08:00</updated><entry><title>Retrospective -¬†2017</title><link href="http://hndr.me/blog/retrospective-2017" rel="alternate"></link><published>2018-01-02T18:33:00+08:00</published><updated>2018-01-02T18:33:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2018-01-02:/blog/retrospective-2017</id><summary type="html">&lt;p&gt;Thoughts and reflections on the year&amp;nbsp;2017&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another has passed! A day in the new year is a good time as any to take a pause and look back to see how the year has been, and I think as far as a verdict goes, I can only say the year 2017 has been a mixed bag for&amp;nbsp;me.&lt;/p&gt;
&lt;h1&gt;Work&lt;/h1&gt;
&lt;p&gt;I accomplished many things that I&amp;#8217;m quite proud of at work this year, yet I would be hard pressed to say that it has been a great year. Just shows how much can happen in such a short time in the startup&amp;nbsp;world.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üëç I started my current job around May 2016, and with that, 2017 has been the first year in which I worked entirely as a full-time remote employee. Looking back, the year started off pretty&amp;nbsp;great.&lt;/li&gt;
&lt;li&gt;üòÄ More productivity! I have gotten much better at managing my time and focusing at the tasks at hand. I learned to not let Slack and email notifications to be that much of a disruption as they used to be in the beginning. My family members also finally got used to the idea of &amp;#8220;working from home&amp;#8221;, which also helps in this&amp;nbsp;aspect.&lt;/li&gt;
&lt;li&gt;üòÄ Been part of a great team. We were able work with some new technologies to ship a critical-piece of software and see it get used on the&amp;nbsp;ground.&lt;/li&gt;
&lt;li&gt;‚òπÔ∏è A restructuring in the company has resulted in my team getting cut. Plans to expand the team further had to be reversed, and projects had to be scrapped. Lost a number of key team members and the team pretty much ended up with a bus factor of 1&amp;nbsp;(me).&lt;/li&gt;
&lt;li&gt;üò∞ I ended up being stressed out most of the time. Too many pucks ending at me made me feel restless. The uncertainties around the company direction also made it difficult to prioritise the work to&amp;nbsp;do.&lt;/li&gt;
&lt;li&gt;üòê We still managed to ship a number of new features and keep improving the software, and we are somewhat still cruising along with some improvement in the metrics, but morale has low for quite a&amp;nbsp;while.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The year 2017 at work started out amazing, though halfway through the year the situation changed quite drastically. The uncertainty is still continuing to the new year, and its time I look back and see what steps to take&amp;nbsp;next.&lt;/p&gt;
&lt;h1&gt;Growth&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;üòÄ Learned functional programming with &lt;a href="https://elixir-lang.org/"&gt;Elixir&lt;/a&gt; and was able to ship a software to production with it! Too many things learned from this experience to list down here. I&amp;#8217;m hoping to finish a number of drafts on this topic this year. For now, suffice to say that learning the immutable functional programming paradigm of the language and the concurrency model of the Erlang &lt;span class="caps"&gt;VM&lt;/span&gt; has been one of the most valuable thing I learned as a programmer, which would keep paying dividends even when I&amp;#8217;m working with an imperative or &lt;span class="caps"&gt;OO&lt;/span&gt;&amp;nbsp;languages.&lt;/li&gt;
&lt;li&gt;üìñ Bought a Kindle Paperwhite in late 2016, and it has been the best investment in a gadget I made. I was able to finish 30+ books in 2017. I used to read mostly non-fiction books, as I felt like I needed to &amp;#8220;gain&amp;#8221; something from reading a book. I think the Kindle helped me learn to read just for the sake of the pleasure of reading, because it made it so effortless to start reading. Most of the books I read this year are fiction, mostly mysteries, my vice, but I also managed to read literatures like &lt;a href="https://www.goodreads.com/book/show/4929.Kafka_on_the_Shore"&gt;Kafka on The Shore&lt;/a&gt; which turned out to be much more interesting that I&amp;nbsp;expected.&lt;/li&gt;
&lt;li&gt;üí° Got into a new hobby of tinkering with electronics that started with a random Raspberry Pi purchase. Started out with a simple programmable lamp outlet, but soon started spending a lot more money on this new hobby than I expected, so need to dial it back a little. But it has been fun. I already got a number of projects in mind that I would like to play with, and I&amp;#8217;m looking forward to learn more about electronics in this new&amp;nbsp;year.&lt;/li&gt;
&lt;li&gt;Stopped using Facebook and Instagram, and learned to use the mute filter on Twitter. Pulled myself out of a number &amp;#8220;online communities&amp;#8221;. Much better for my mental&amp;nbsp;health.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Health&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;üëç Managed to exercise quite constantly. I was able to wake up early and go for a morning run 3 days a week most of the year. There were weeks that I skipped because of travel or weather or other reasons, but there were also a number of weeks where I managed to put in 4-5 runs in a week. So I&amp;#8217;ll mark this a&amp;nbsp;yay.&lt;/li&gt;
&lt;li&gt;üëé Didn&amp;#8217;t eat all that well. Many unhealty meals and snacks (Really though, Indonesian food are soo hard to resist!). Ended up not losing as much weight as I would like&amp;nbsp;to.&lt;/li&gt;
&lt;li&gt;üò∞ Started getting pain in my wrists. I&amp;#8217;m not sure if it is because of the mechanical keyboard that I got or if it is because of the long periods of reading on the Kindle (I tend to hold it by resting it on my thumb). I ended up switching back to my old low-profile bluetooth keyboard, and got a &lt;a href="http://www.iring.com/"&gt;holder&lt;/a&gt; to help me grab on the Kindle. Not sure which of the two helped, but the pain seems to have subsided for now. I hope it won&amp;#8217;t be back&amp;nbsp;again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;End&amp;nbsp;Notes&lt;/h1&gt;
&lt;p&gt;The situation at work has a way of affecting other aspects of one&amp;#8217;s life, and I&amp;#8217;m not any better in keeping them contained than most. Ended up with a number of side projects and blog posts drafts I didn&amp;#8217;t manage to finish. This kinda left a rather unsatisfying end to the year, but nevertheless,  I&amp;#8217;m aiming to finish soon in&amp;nbsp;2018.&lt;/p&gt;
&lt;p&gt;That said, its never too late to do anything worth doing. There are many things to look forward to in 2018. Been learning and reading on data science and machine learning, been considering joining a gym to improve my health, and who knows what else would come up or what they will lead&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;To chances in the new year!&amp;nbsp;üéâüéâüéâ&lt;/p&gt;</content><category term="learning"></category><category term="retrospective"></category></entry><entry><title>TIL: formmethod and¬†formaction</title><link href="http://hndr.me/blog/til-formmethod-and-formaction" rel="alternate"></link><published>2017-05-24T20:42:00+08:00</published><updated>2017-05-24T20:42:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2017-05-24:/blog/til-formmethod-and-formaction</id><summary type="html">&lt;p&gt;Little known attribute of &lt;span class="caps"&gt;HTML&lt;/span&gt; &lt;code&gt;input&lt;/code&gt; element&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;TIL&lt;/span&gt;: &lt;span class="caps"&gt;HTML&lt;/span&gt; &lt;code&gt;input&lt;/code&gt; elements allows you to specify &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formaction"&gt;&lt;code&gt;formaction&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formmethod"&gt;&lt;code&gt;formmethod&lt;/code&gt;&lt;/a&gt; attribute that let you override
&lt;code&gt;action&lt;/code&gt; and &lt;code&gt;method&lt;/code&gt; attribute of the element&amp;#8217;s parent&amp;nbsp;form.&lt;/p&gt;
&lt;p&gt;In a web application that I&amp;#8217;m working on, there&amp;#8217;s a product listing page that allows the user
to specify some search criteria and filter the products listing to only display the items that matches
the search criteria. This product listing is rendered as a &lt;span class="caps"&gt;HTML&lt;/span&gt; table, and users can also export the entire
product listing and download them as&amp;nbsp;&lt;span class="caps"&gt;CSV&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;There are several ways I can implement that page. I can implement the search form will render the filtered table,
and along with the filtered table, render the another form that submits the current search parameters in hidden fields
to the &lt;span class="caps"&gt;CSV&lt;/span&gt; export endpoint. This means the user must first preview the list in &lt;span class="caps"&gt;HTML&lt;/span&gt; before they can export&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Another option is to pull Javascript thats takes the input values of the first form and use that to generate the second form
and submit it upon button click. This would mean I had to put Javascript in an otherwise server-rendered page. Neither approach is really&amp;nbsp;satisfactory.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;formaction&lt;/code&gt;, I can simply add a second submit button to the form and specify the second endpoint there.
Not only I can avoid unnecessarily making the page depend on Javascript, I also had to write much less code.
It&amp;#8217;s a nifty little feature of &lt;span class="caps"&gt;HTML5&lt;/span&gt; that helped me delete many lines of&amp;nbsp;code.&lt;/p&gt;
&lt;h3&gt;Footnote&lt;/h3&gt;
&lt;p&gt;While titled &amp;#8220;&lt;span class="caps"&gt;TIL&lt;/span&gt;&amp;#8221;, I actually learnt about this a &lt;a href="https://twitter.com/_hdra/status/841481951764594688"&gt;while ago&lt;/a&gt; while listening
to my podcast &lt;a href="http://bikeshed.fm/100"&gt;backlog&lt;/a&gt;, and I&amp;#8217;m really glad the hosts talked about the feature since it was really applicable
in solving an issue I&amp;#8217;ve been having. And since I recently decided to start writing more again, but had been having trouble getting over
the block, I thought I would use this little topic to build up the momentum to write&amp;nbsp;more.&lt;/p&gt;</content><category term="web"></category><category term="html"></category></entry><entry><title>What You Should Learn as a¬†Programmer</title><link href="http://hndr.me/blog/what-you-should-learn-as-a-programmer" rel="alternate"></link><published>2016-07-02T18:23:00+08:00</published><updated>2016-07-02T18:23:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2016-07-02:/blog/what-you-should-learn-as-a-programmer</id><summary type="html">&lt;p&gt;On programming, the tech world, hype, and &amp;#8220;The Best&amp;nbsp;{X}&amp;#8221;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the past few years, there has been an explosion in the availability of various tools, database,
frameworks, libraries, and so on, all of which are supposed to help you write software better and faster.
For someone who is starting to learn programming, all these noise can be very confusing. Even for an experienced
programmer, all these stuff can be very distracting as well. The much discussed Javascript fatigue is a symptom
of the problem.  Unfortunately, I&amp;#8217;m not here to offer an anwer on how to deal with all that. I simply
would like to point out some of the things that you should be aware of while wading through all these&amp;nbsp;noise.&lt;/p&gt;
&lt;p&gt;The content of this post is inspired by this talk by Ross Tuck below, which you should definitely check out.
He talked about a lot of the things that I have been thinking, and he was able to present those ideas more
eloquently than I&amp;nbsp;could.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nTi8jw86-_s" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;So, here is the thing; no one really knows what is the &amp;#8220;best&amp;#8221; tools or framework out there is. Like most things
in software engineering, the answer to such question is, and has always been &amp;#8220;it depends&amp;#8221;. The best tools for the
job depends on what the problem you need to solve, the constraints you face, what you already know, and so on, and
any claims of &amp;#8220;The One True Way&amp;#8221; should be faced with a generous amount of&amp;nbsp;scepticism.&lt;/p&gt;
&lt;p&gt;For better or worse, the startup booms that has been going on in the past few years has made the field of software very lucrative,
and there are money to be made in selling the tools that supports the making of software. One side effect of that is,
like what Ross said in his talk, developers are becoming more of both the target and the &lt;strong&gt;source&lt;/strong&gt; of marketing.
The problem is, many developers (myself included) like to think of themselves as being immune to marketing, and that
all their decisions are made based on objective evaluations of strengths and weaknesses of the available options.
&amp;#8220;Meritocracy&amp;#8221; definitely ranks pretty high up there among programmers&amp;#8217; favorite&amp;nbsp;words.&lt;/p&gt;
&lt;p&gt;There are many factors that come into consideration when you&amp;#8217;re trying to make a decision on which tools/framework
to use for a project. What you already know, what are the requirements of the project, and of course, the popularity
of the tool. That last one is becoming more and more of a deciding factor nowadays, which may sounds a little weird.
Shouldn&amp;#8217;t a tool be picked for what it is able to provide? Why does it matter how popular it is? The fact is, the popularity of a tool does matter. More popular tools would have more libraries written around it,
and there will also be more resources that can help you learn&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;What makes a software popular though? And what does it mean for a software tool to be&amp;nbsp;popular?&lt;/p&gt;
&lt;p&gt;It is not necessarily by being the &amp;#8220;best&amp;#8221;. Not necessarily by being the choice of many software developers to build
their projects with. It is because there are people who want them to be popular, and they put the effort to make
them so. So, yes, marketing. Not that marketing is bad thing, just that this means that just because
something is popular, doesn&amp;#8217;t mean it is also&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;Once a software reach a certain level of popularity, much of the marketing for the tool comes from the users (the programmers)
themselves. Most are doing this because they have benefitted from the tool and would like to
promote the software because they truly believe these tools would help other people write better software faster
and easier. Some though, may simply jumped on the bandwagon because it can be profitable. Being positioned
as an expert on a popular software tool can be lucrative. From speaking engagement, workshops opportunity,
knowledge product sales, or job offers are some of the things that can come from such position. Which is one of the
driver of the hypes surrounding software&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;So, how does one wade through all these hype-driven software development resources? Unfortunately, I don&amp;#8217;t have
an answer. I am still trying to figure it out myself. But that is something that you need to keep in mind
while consuming all these abundance of learning resources. If someone often speaks of a software tool
in absolute term, being overly critical of any criticism of the tool, or dismissing the value of learning
and taking ideas from alternative tools, you should assume that person may have objectives other than
sharing knowldge and promote good software engineering&amp;nbsp;ideas.&lt;/p&gt;
&lt;p&gt;Learn the basics, and know your tools well. Try not to get distracted by all the hype-noise because that is
all there is; noise.  All that noise aren&amp;#8217;t necessarily the gospel of the software development that you must learn.
People often have their own incentives for driving up the hype, and you won&amp;#8217;t be missing out on anything
important by ignoring&amp;nbsp;them.&lt;/p&gt;</content><category term="programming"></category><category term="learning"></category><category term="rant"></category></entry><entry><title>Supervisord and Job¬†Retries</title><link href="http://hndr.me/blog/supervisord-and-job-retries" rel="alternate"></link><published>2016-03-09T22:59:00+08:00</published><updated>2016-03-09T22:59:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2016-03-09:/blog/supervisord-and-job-retries</id><summary type="html">&lt;p&gt;Important note to remember when using supervisord with&amp;nbsp;queues.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you are deploying an application to production that includes a background queue,
it is important to also setup a process monitor to make sure the worker stays&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;One of the most popular process monitor is &lt;a href="http://supervisord.org/"&gt;supervisord&lt;/a&gt;, which also happens
to be the one included in the &lt;a href="https://laravel.com/docs/master/queues#supervisor-configuration"&gt;Laravel guide on queues&lt;/a&gt; which
makes it pretty much the default process monitor on a Laravel&amp;nbsp;deployment.&lt;/p&gt;
&lt;p&gt;Many background queue libraries, including the one that came with Laravel
will automatically retry jobs that fails due to an exception. They usually also include
a way to control how many times the jobs should be retried before giving up and
moving it to the failed jobs&amp;nbsp;store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;php artisan queue:listen connection-name --tries=3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One thing to keep in mind is that supervisord also includes a way to control the 
&lt;a href="http://supervisord.org/configuration.html"&gt;maximum number of attempts to start a process after serial crashes&lt;/a&gt;.
When this limit is reached, it will stop trying to restart the process and the process will be put into 
the &lt;code&gt;FATAL&lt;/code&gt; state. This number is controlled via the configuration entry called &lt;code&gt;startretries&lt;/code&gt;, and it defaults to &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In most cases, one wouldn&amp;#8217;t need to change this setting. But, if you set the number of retries
on job queue to be larger than &lt;code&gt;3&lt;/code&gt;, you need to make sure that the &lt;code&gt;startretries&lt;/code&gt; is also
increased accordingly. If the &lt;code&gt;startretries&lt;/code&gt; is set to a number that is less than the &lt;code&gt;tries&lt;/code&gt; attempt,
it could cause an issue where &lt;em&gt;the supervisord retry limit is reached before the job retries
limit is reached&lt;/em&gt;. When this happens, the process is put into a &lt;code&gt;FATAL&lt;/code&gt; state, and the worker process
doesn&amp;#8217;t get started anymore, &lt;em&gt;halting the entire job queue&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:laravel-worker]&lt;/span&gt;
&lt;span class="na"&gt;process_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;%(program_name)s_%(process_num)02d&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=5&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;startretries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;forge&lt;/span&gt;
&lt;span class="na"&gt;numprocs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8&lt;/span&gt;
&lt;span class="na"&gt;redirect_stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/forge/app.com/worker.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, remember, make sure to keep the queue worker tries equal to or smaller than the supervisord&amp;#8217;s &lt;code&gt;startretries&lt;/code&gt;
to make sure the failing jobs get moved to the failed jobs queue before they halt the entire job queue.
Of course this won&amp;#8217;t help if the queue is full of jobs that keeps failing, but in that scenario, you 
should really take a look at your queue worker code&amp;nbsp;anyway.&lt;/p&gt;</content><category term="laravel"></category><category term="programming"></category><category term="devops"></category><category term="supervisord"></category></entry><entry><title>On Strict Domain Design or¬†Pragmatism</title><link href="http://hndr.me/blog/on-strict-domain-design-or-pragmatism" rel="alternate"></link><published>2015-04-10T19:22:00+08:00</published><updated>2015-04-10T19:22:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2015-04-10:/blog/on-strict-domain-design-or-pragmatism</id><summary type="html">&lt;p&gt;Lessons learned in modelling&amp;nbsp;software.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I first learned &lt;a href="http://laravel.com/"&gt;Laravel&lt;/a&gt;, I was exposed to &lt;a href="http://martinfowler.com/eaaCatalog/repository.html"&gt;various&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/Domain-driven_design"&gt;software design&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/Event-driven_programming"&gt;patterns&lt;/a&gt; &lt;a href="http://stackoverflow.com/questions/3058/what-is-inversion-of-control"&gt;and&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29"&gt;principles&lt;/a&gt; that was so widely used in the community.  Sure, I had known many of them before, but being involved in the community where such things were so strongly agreed to be the &amp;#8220;one true way&amp;#8221; affected how I think about writing software as well. I was sold to the idea of Domain Driven&amp;nbsp;Design.&lt;/p&gt;
&lt;p&gt;I read tons of &lt;a href="https://sites.google.com/site/unclebobconsultingllc/home/articles"&gt;uncle bob articles&lt;/a&gt; and watched  dozens of &lt;a href="https://www.youtube.com/watch?v=3uV3ngl1Z8g"&gt;youtube videos&lt;/a&gt; on the topic, and I always tried to model the business rules of the software perfectly in the code I write. I started using repositories for every business logic code, and having even a bit of business logic scattered around the controllers code bugs me to no end. I made sure the program can&amp;#8217;t go into a state that violates any of the business rules, and of course, I made sure to &lt;a href="https://www.youtube.com/watch?v=WpkDN78P884"&gt;separate the domain code from the implementation detail&lt;/a&gt; so that I can easily switch out the caching or authentication&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;It all went quite well, but I soon realized that sometimes, the frameworks that are meant to help you write code faster and be more productive are starting to get in the way of modelling the business domain. This shouldn&amp;#8217;t be too surprising as trying to model the general purpose framework code into your domain would require you to bend a number of features provided by the framework to your needs. Like most people, the active record &lt;span class="caps"&gt;ORM&lt;/span&gt; is the first that gets in the way of separating the business logic and the database storage detail, and soon enough I&amp;#8217;m wishing for a micro framework where I can pick and choose the components to be&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;The second thing I realized is that writing a product for a startup company, the business logic change very rapidly, and you need to deliver these changes very quickly to the customers. While it is a good idea to model the software very closely to the domain, you would have to tear down the model and build it over again very often, and soon enough the abstractions are going to leak here and there. Of course there is the side effect on your morale for having to tear down the model that you have designed so&amp;nbsp;toughtfully.&lt;/p&gt;
&lt;p&gt;Another unintended side effect is on the barrier of entry to the code. Sure, the code written this way can help managing a pretty high level of complexity, and there is a certain sense of elegance to code, but it is not going to be the easiest code to understand. A new team member would have to learn and understand how the code is structured to begin contributing, and he/she would also need to adhere to the practise or the code would be a mess of a chimera code in no&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;After a while, I started to question myself whats the point of adhering to these practise. It certainly doesn&amp;#8217;t make my job easier. Then I remembered one of the reasoning that convinced me to buy into the idea; It is the only way to manage the complexity of the program. And sure, I still agree with that sentiment, but is my program really that complex&amp;nbsp;though?&lt;/p&gt;
&lt;p&gt;I recently listened to the &lt;a href="http://fullstackradio.com/episodes/9/"&gt;an episode of the Full Stack Radio&lt;/a&gt;, where &lt;span class="caps"&gt;DHH&lt;/span&gt;, the creator of Ruby on Rails talked about how most web applications is not all that unique or complex, and when I take a second to think about it, I believe it is actually is&amp;nbsp;true.&lt;/p&gt;
&lt;p&gt;The conclusion that I came to is most applications, or at least the applications that I write, are not all that complex at all. Most of the time, there is no need to write your code in such a round about way just to keep the code within the model. It is perfectly fine to call your active record model from your controller method. The code you write exists to achieve a certain goal, which most of the time is to make things easier for its user. There is no point in blindly adhering to a practise if it gets in your way of achieving that&amp;nbsp;goal. &lt;/p&gt;
&lt;p&gt;Of course, it doesn&amp;#8217;t mean that there is no need to put any thought into the code you write, or that Domain Driven Design have no place in writing software. It is still important to keep your code &lt;span class="caps"&gt;DRY&lt;/span&gt;, and if the code to instansiate that new blog post with tags and categories is being repeated many times at different places, it is still a good idea to extract them to a post repository class. It is important not only to know all these software engineering principles, but also to understand why and when they should be applied. Strict adherence to the design discipline of the software have their place, for example when you are writing code for a well-understood domain with little chance for sudden changes, or if you&amp;#8217;re writing a library code that would be used in many different situations. The most important thing to keep in mind is not to let these things get in your way of accomplishing your goal. Writing software, like other engineering disciplines, is about trade offs. Just make sure you understand what you&amp;#8217;re giving up and what you will gain in&amp;nbsp;exchange.&lt;/p&gt;
&lt;p&gt;Earlier I mentioned about frameworks getting in your way of modelling your domain, which should&amp;#8217;ve been expected, since if you&amp;#8217;re going to write your code to strictly adhere to your domain logic, you would do better starting from scratch and pick up the libraries you need as you go along. Understanding this logic really made me appreciate the thoughts that went into frameworks such as Laravel and RoR even&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;Having learned my lessons, I came to appreciate beautiful clean, simple code even if the code is a 5-line active record model being saved from a controller&amp;nbsp;method.&lt;/p&gt;</content><category term="laravel"></category><category term="programming"></category><category term="design patterns"></category></entry><entry><title>Laravel Mass Assignment Protection - Blacklist V.S.¬†Whitelist</title><link href="http://hndr.me/blog/laravel-mass-assignment-protection-blacklist-vs-whitelist" rel="alternate"></link><published>2014-07-12T18:55:00+08:00</published><updated>2014-07-12T18:55:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2014-07-12:/blog/laravel-mass-assignment-protection-blacklist-vs-whitelist</id><summary type="html">&lt;p&gt;Difference between using whitelist and blacklist to prevent mass-assignment vulnerability in&amp;nbsp;Laravel.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;&lt;span class="caps"&gt;TLDR&lt;/span&gt;&lt;/em&gt;: Use whitelist instead of blacklist. Laravel will attempt to mass-assign all attributes that aren‚Äôt in the blacklist, including properties/columns that aren‚Äôt on the table, causing &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;In Laravel (At least on version 4.2.6), there is a convenient method to insert data into the&amp;nbsp;database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the line of code above will take all of the form data and assign them to the &lt;code&gt;User&lt;/code&gt; model‚Äôs attributes. This means that if we don‚Äôt put in any safe guard, anyone could modify the request parameters and set any value for any of the property. This could includes things like user‚Äôs roles and permissions, ids, or any other sensitive data. Of course, we could just assign the attributes one-by-one, but that would make our code a lot more&amp;nbsp;verbose.&lt;/p&gt;
&lt;p&gt;Fortunately, Laravel provide two easy ways to safeguard against this kind of mass assignment vulnerability. Either specify a list of fields that can be mass assigned (whitelist), or specify a list of fields that can‚Äôt be mass assigned (blacklist). While it seems like the two do the same thing, there are some subtle differences that could cause a bit of&amp;nbsp;confusion.&lt;/p&gt;
&lt;p&gt;For example, we got this table of&amp;nbsp;User:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;User&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;increments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;unsignedInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Say we want to protect the &lt;code&gt;role&lt;/code&gt; field from being mass-assignment, so, there are two ways to do this in the &lt;code&gt;User&lt;/code&gt; model. We can either specify a &lt;code&gt;guarded&lt;/code&gt; property to specify a list of fields that we want to exclude from&amp;nbsp;mass-assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Eloquent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$timestamps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$guarded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or we can specify a &lt;code&gt;fillable&lt;/code&gt; property to specify a list of fields that we want to allow for&amp;nbsp;mass-assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Eloquent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$timestamps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$fillable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While you would most probably wouldn‚Äôt notice any difference, but let&amp;#8217;s take a look at the Laravel‚Äôs &lt;code&gt;Model.php&lt;/code&gt; source code. First, the code that perform the mass assignment&amp;nbsp;operation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$totallyGuarded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;totallyGuarded&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillableFromArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;removeTableFromKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isFillable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$totallyGuarded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MassAssignmentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see that the code loop through the list fillable attributes via the &lt;code&gt;fillableFromArray&lt;/code&gt; method, so let‚Äôs take a look at&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;fillableFromArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$unguarded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;array_intersect_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_flip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The method check if we have any value in the &lt;code&gt;fillable&lt;/code&gt; property, and if so, return a list of properties inside the &lt;code&gt;attributes&lt;/code&gt; variable that intersect with the &lt;code&gt;fillable&lt;/code&gt; array, else simply return the &lt;code&gt;attributes&lt;/code&gt; itself. This means if we have a &lt;code&gt;fillable&lt;/code&gt; property defined for our model, the mass assignment will not process that attributes that aren‚Äôt specified in the &lt;code&gt;fillable&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;So, let‚Äôs move on to how Laravel guards the attributes in the &lt;code&gt;guarded&lt;/code&gt; property. Let‚Äôs go back to the &lt;code&gt;fill&lt;/code&gt; method. We can see that for every attributes, the method will check if the key is fillable by calling the &lt;code&gt;isFillable&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;isFillable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$unguarded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isGuarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;isGuarded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;guarded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;guarded&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if the key is not listed in the &lt;code&gt;fillable&lt;/code&gt; property,  it will call another method &lt;code&gt;isGuarded&lt;/code&gt;, that checks if the key is specified in the &lt;code&gt;guarded&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;This means, if &lt;code&gt;fillable&lt;/code&gt; is not specified, and the key is not listed in the &lt;code&gt;guarded&lt;/code&gt; property, the framework will assume that the key can be safely mass-assigned. Sound perfectly fine and should be expected, but when we include a property that is not a field of the table, it will cause an error, because the framework will try to insert a data into a column that doesn‚Äôt exists. The same problem will not occur if you use a while list since the framework will only process the keys that are in the&amp;nbsp;array.&lt;/p&gt;
&lt;p&gt;In conclusion, the best way to protect against mass-assignment vulnerability is to use the whitelist instead of the blacklist. From a security standpoint, it is better to explicitly specify the things that you want to allow anyway, and it also wouldn‚Äôt make Laravel try and insert the a non-existing field into the&amp;nbsp;database.&lt;/p&gt;</content><category term="laravel"></category><category term="programming"></category></entry><entry><title>On Adding New¬†Features</title><link href="http://hndr.me/blog/on-adding-new-features" rel="alternate"></link><published>2014-06-24T19:42:00+08:00</published><updated>2014-06-24T19:42:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2014-06-24:/blog/on-adding-new-features</id><summary type="html">&lt;p&gt;On my job, I have been working on a product that we have been trying ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;On my job, I have been working on a product that we have been trying to get to market within this month. There are more-or-less 2 programmers working on this project, an iOS programmer working on an iPad app and an iPhone app, and myself working on the server backend and the data analysis front-end. I said &amp;#8216;more-or-less&amp;#8217; because there was another guy working on an Android app, but he currently is working on another project, also, while I do spend the majority of my time working on the project, I am also involved in several other clients&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;The project is supposed to be launched by the end of this month, but I personally don&amp;#8217;t think the project is anywhere close to production-ready. Despite this, we keep adding features. The main target market of the product is small business owners, and I do understand why these features might be necessary, but I can&amp;#8217;t help but feel that we should stop adding features and focus on making the existing features to be ready for&amp;nbsp;production.&lt;/p&gt;
&lt;p&gt;I am currently reading a book by &lt;a href="https://gettingreal.37signals.com/"&gt;37 Signals, Getting Real&lt;/a&gt;. I highly recommend it to anyone who writes software for a living to read it. Its not a technical book, so no need to open up your text editor to try out a code snippet from the book.I haven&amp;#8217;t finished reading it yet, but the content has been really great so far. It is full of valuable insights on running a software business and designing product. But, the whole fifth chapter on Feature Selection really resonates with me because I have been thinking about what adding features to a software product really&amp;nbsp;means.&lt;/p&gt;
&lt;p&gt;One of the hidden cost of a new feature mentioned in the book is feature&amp;nbsp;loop:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, be on the lookout for feature loops (i.e. features that lead to more features). We&amp;#8217;ve had requests to add a meetings tab to Basecamp. Seems simple enough until you examine it closely. Think of all the different items a meetings tab might require: location, time, room, people, email invites, calendar integration, support documentation, etc. That&amp;#8217;s not to mention that we&amp;#8217;d have to change promotional screenshots, tour pages, faq/help pages, the terms of service, and more. Before you know it, a simple idea can snowball into a major&amp;nbsp;headache.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is exactly what I&amp;#8217;ve been experiencing working on the project. Adding a stock keeping feature leads to inventory features which leads to keeping track of invoices which leads to keeping track of suppliers and so on and so&amp;nbsp;forth.&lt;/p&gt;
&lt;p&gt;While that might not seems much, from the technical persepective, adding a feature often involve more than just coding up the feature. Coding up a new feature by itself is not much work, but one thing to keep in mind is that these features rarely work in isolation. That means, programming the feature doesn&amp;#8217;t only require us to write the code for the new feature, it also means that we need to test it. Not just the new features either, we need to be sure that the few lines of new code doesn&amp;#8217;t break any existing feature. Those are just code, if the change involve changing the database schema, pulling in new dependencies, or having to coordinate with an additional process that would make things even more&amp;nbsp;complicated.&lt;/p&gt;
&lt;p&gt;Especially changes in database schema. The ideal database schema that can accomodate the new feature often aren&amp;#8217;t backward compatible, it often breaks stuffs in the unexpected places. Also, keeping the backword compatibility while adding hacks on top of hacks to accomodate the new features are even worse, it is basically keeping an active time bomb&amp;nbsp;around.&lt;/p&gt;
&lt;p&gt;All these hidden costs adds up, too. Almost like compound interest, you need to make sure not to break existing features when implementing a new one, and when you have added the new feature, that would be one more thing that you need to make sure not to break when adding another feature. All that makes maintaining the code harder. Maintainance doesn&amp;#8217;t just mean fixing bugs, it also means that while you are fixing a bug, you need to make sure that you don&amp;#8217;t end up breaking stuff in other place, and do a favor for your future self and make sure the code stays easily modifiable so that future you can do the same thing. Also, while doing all these make sure to keep the code clean and isolated so that you don&amp;#8217;t end up with a stack of jenga of a code in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;The recent experience makes me think how great would it be if I invested some time to build an automated test infrastructure early in the development process. Of course an automated test won&amp;#8217;t help you to prevent breaks if the code itself is built like a house of cards, but it does help so that you don&amp;#8217;t have to manually test all the features by yourself, not to mention that it is not unusual at all for us to miss several parts of the project while performing the&amp;nbsp;test.&lt;/p&gt;
&lt;p&gt;So, to summarize up, while working on a software project that doesn&amp;#8217;t have a clear specification and changes all the time, help your future-self and have an automated test infrastructure. Follow the &lt;span class="caps"&gt;SOLID&lt;/span&gt; principles while writing your code, and keep your classes isolated from each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;, all of that will not help if new features keep being added all the time. While working on project, with deadlines and features being added and removed all the time, having things break is almost inevitable. So, as the book says, the best thing is to say No. Keep only the features that are essentials, and make sure these features works really, really well. As mentioned in the book, Steve Jobs once&amp;nbsp;said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Innovation] comes from saying no to 1,000 things to make sure we don&amp;#8217;t get on the wrong track or try to do too much. We&amp;#8217;re always thinking about new markets we could enter, but it&amp;#8217;s only by saying no that you can concentrate on the things that are really&amp;nbsp;important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I believe that is something we should all keep in mind in developing not only a software, but also for any products that actually&amp;nbsp;works.&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Random¬†Updates</title><link href="http://hndr.me/blog/random-updates" rel="alternate"></link><published>2014-06-01T20:44:00+08:00</published><updated>2014-06-01T20:44:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2014-06-01:/blog/random-updates</id><summary type="html">&lt;p&gt;Starting from this month, I have been officially in my current job for 6 months ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Starting from this month, I have been officially in my current job for 6 months, which also means I just got out of the probation period for the company. During the past 6 months, I have been doing a bunch of various things, and also learned a lot of stuffs that I have never really thought&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Anyway, the main reason I am writing this post right now is simple: I am procrastinating. I have several conference videos that I wanted to watch, and also several libraries and frameworks that I want to try out, but for some reason, my mind keeps drifting away. This week, three developers I work with left the company, one of which is the person who mentored me during my internship with them. I have known about the departure a few weeks prior, and I didn&amp;#8217;t actually thought about it much, but it turns out, the departure of these colleagues does affect me quite a bit. I thought I am used to changes, but it seems like I&amp;#8217;m not. It made me think about stuffs. Stuffs that are hard to put in writing, stuffs that are uncomfortable to think&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Anyway, most of my work now revolves around the back end, I had to learn a bunch of stuffs on server administration, distributed architecture, and I also ended up using the Laravel &lt;span class="caps"&gt;PHP&lt;/span&gt; framework a lot. Which is actually very fun and exciting, until something blows up and data are lost, that is. Anyway, all that stuffs that I learned during the period makes for a lot of materials that I wanted to write up, but for various reasons (mainly me being lazy), I never ended up getting to it. While using the static site generator is excellent in terms of simplicity, it also meant that I have to open up my text editor and generate a new site even just to post a short draft. I considered migrating my site to &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt;, but having to manage a server pushed me sticking with Pelican. What I do now is to write my drafts in Evernote, and then paste them here when it is ready, which isn&amp;#8217;t exactly a seamless process considering Evernote&amp;#8217;s lacking support for Markdown. That being said, I do hope it would help me to write&amp;nbsp;more.&lt;/p&gt;</content></entry><entry><title>2014 -¬†Thoughts</title><link href="http://hndr.me/blog/2014-thoughts" rel="alternate"></link><published>2014-01-29T14:33:00+08:00</published><updated>2014-01-29T14:33:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2014-01-29:/blog/2014-thoughts</id><summary type="html">&lt;p&gt;It&amp;#8217;s rather late for a new year posting, considering we are almost entering the ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s rather late for a new year posting, considering we are almost entering the second month 2014 by now, but well, what can I say, I haven&amp;#8217;t got much time to write the past few months, and now I am only writing because I&amp;#8217;m stuck waiting for the next ferry back to my hometown that isn&amp;#8217;t coming for 2&amp;nbsp;hours.&lt;/p&gt;
&lt;p&gt;2014 is pretty special for myself. New years are usually a chance to start something for most people, a fresh start, where any unpleasant things that has happened happened &amp;#8220;last year&amp;#8221;. That said, for most people, these words are simply figurative speech. While the calendar has indeed changed, most people&amp;#8217;s live didn&amp;#8217;t, and life still goes on as usual. I myself have never really celebrated new year as anything other than a chance to get together with friends and do some catching&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;2014 is different. Quite a lot has changed in my life in the past few months. I recently graduated from university, with that, I also started a new job as a software&amp;nbsp;engineer.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s pretty much it. And wow, it&amp;#8217;s sounds pretty trivial now that I think about it. But still, a new year usually calls us to reflect about past events. I have been thinking about what kind of person I&amp;#8217;ve been, what kind of person I want to be, what I want to do in my life, pretty much my life direction in&amp;nbsp;general.&lt;/p&gt;
&lt;p&gt;Thinking back about myself, there are many things that I wish I&amp;#8217;d done differently. Especially during my university years. I was too much of a coward to take more risk in pretty much everything. People who I didn&amp;#8217;t take the chance to know more about, trips to places I didn&amp;#8217;t travel to, skills I didn&amp;#8217;t spend more time learning, and many others. I wasted too much time doing things that I didn&amp;#8217;t really care about just because they are things I&amp;#8217;m comfortable&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;On the risk of sounding like a humblebrag, but I was one of those guys who didn&amp;#8217;t study much, yet still managed to get high scores in class. I honestly didn&amp;#8217;t find the works for my bachelor degree to be too difficult, and I find as long as I pay attention during classes, the only time I would need to study outside of classes would be a day or two before an exam. Because of this I ended up with a lot of free time. But I stupidly spent all these free time doing things like watching movies, surfing the web aimlessly, and other time wasting activities in general. I regretted not using those free times that I had to socialize more, join a student organization or two, learn how to play one or two instruments, and so on. I used to see my friends who seemed to barely have any free time and think what is it about this cozy university life that takes up so much of his time. Well, the answer is simply he made the most of his time in university. I used to think that university life is way too easy and boring. Well, how can it be not easy and boring, I did it&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;Now that I am no longer a student, I am consciously trying to be more active and socialize more. It&amp;#8217;s not easy though, I am your average geek and an through and though introvert, and meeting new people isn&amp;#8217;t my forte, but I am trying, and hopefully this will help me find what I want to do in&amp;nbsp;life.&lt;/p&gt;
&lt;p&gt;Another thing I would like to change is my health. I have been obese as far as I can remember, and now that I have a full time job as a programmer, I can&amp;#8217;t think of any reason that would somehow magically change. I need to start taking responsibility of my health, and not make excuses for me failing to lose weight. I am going to buy a bicycle when I get back from my leave (yes, typical. Always start someday in the future. Seriously though, I&amp;#8217;ll stick to this plan), and I&amp;#8217;ll start commuting to work with my bike. Hopefully this would push me to exercise&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;In work, while I do love what I do, and the work environment is awesome, it&amp;#8217;s not all rainbow and unicorns either. In my first project, I had to work with an existing system that well, let&amp;#8217;s just say it&amp;#8217;s difficult to work with. I myself also committed a big mistake in another project, I chosen a technology stack that no one else seemed to be interested in learning. I personally do love and believe in this stack (and I do think that the way we have been programming needs some serious improvement), which is why I chose it, but I came to learn that in a collaboration project I need to consider more than just the technical merit. I need to consider the people I&amp;#8217;ll be working with, and how comfortable they are in learning these things. The project ended up behind schedule, mostly because other in my team aren&amp;#8217;t comfortable with the new (not that new though) technology yet, and me being too much of an &lt;span class="caps"&gt;OCD&lt;/span&gt;, spent way too much time than I should have cleaning up codes that other people just wrote. Lesson learned. Shipping should comes first before technical aesthetic. Save the beautiful code (not that I am really capable of writing code that good anyway :P) for personal&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;To be honest, when I was applying for jobs several months ago, I had several offers that comes with higher salary than the one that I accepted (my current job). The reason I took on this job is because I felt that I can learn the most about tech with this environment, and since this is my first job anyway, I didn&amp;#8217;t really think of looking for a position with the highest salary so that I can stay for years earning more money. The opportunity to learn. That was what I thought I should be looking for in my first job. But now, I am worried that I maybe forming a bubble around myself to get comfortable and not challenging myself. So that&amp;#8217;s another thing that I should work&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;In life, well, I am still looking for what I want to do in life, but well, for starter, I would love to be able to travel more, get to know more people, hopefully I am able to find people dear to me. While I am an introvert, I do have several close friends that I value very much, but to be honest, the people that really matters to me are my family. For some reason I feel like it&amp;#8217;s not supposed to be this way, and I should have more people that I care about. I don&amp;#8217;t know, I guess this is just one of those things that I would know when the time&amp;nbsp;comes.&lt;/p&gt;
&lt;p&gt;On traveling, well, I have been wanting to travel for several years, but for the past few years, as a poor student living on a scholarship, it&amp;#8217;s not really financially feasible. Not to mention the traveling cost, event the some of visa application fee would&amp;#8217;ve cost me a month&amp;#8217;s living cost. Now that I am working and earning a salary, I hope to be able to save up some money and travel somewhere. Even though visiting the old European cities have been on my mind for quite a while now, I don&amp;#8217;t really have a place that I want to visit yet. It doesn&amp;#8217;t matter where, I am still looking for a place that would pull me&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;As for the life goal, well, I thought about it a lot, but I still can&amp;#8217;t find an answer that I am satisfied with. I guess this is just one those things that you can&amp;#8217;t rush. Well, there is no need to rush it anyway. Some people spend their whole life looking for a destination without finding one, maybe there isn&amp;#8217;t&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;Well, that&amp;#8217;s goes for my 2014 reflection. I don&amp;#8217;t really want to make another new year&amp;#8217;s resolution as my 2012 and 2013 resolution aren&amp;#8217;t completely crossed out yet, so here is my 2014 &amp;#8220;goal&amp;nbsp;guidelines&amp;#8221;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exercise more, start commuting to work with the bike, lose at least&amp;nbsp;15KGs.&lt;/li&gt;
&lt;li&gt;Be more active, socialize more, don&amp;#8217;t get trapped in the comfort&amp;nbsp;zone.&lt;/li&gt;
&lt;li&gt;Start a new project, stick to it, and make it something that&amp;nbsp;counts.&lt;/li&gt;
&lt;li&gt;Stop taking life so seriously. It&amp;#8217;s just&amp;nbsp;life.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s it, I guess. Ah, of course, I didn&amp;#8217;t really include any geek topic so far, so I guess I should mention some. Well, I plan to do another re-design for this site, make new Pelican theme. Let&amp;#8217;s see how that goes. I also plan to rewrite the &lt;a href="https://github.com/hdra/WP_Mog"&gt;Mog WordPress theme&lt;/a&gt;, clean up the codes, and maybe build it on top of one of the popular &lt;span class="caps"&gt;CSS&lt;/span&gt; framework so that it&amp;#8217;s more&amp;nbsp;maintainable.&lt;/p&gt;</content></entry><entry><title>New Stage in¬†Life</title><link href="http://hndr.me/blog/new-stage-in-life" rel="alternate"></link><published>2013-11-16T19:47:00+08:00</published><updated>2013-11-16T19:47:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-11-16:/blog/new-stage-in-life</id><summary type="html">&lt;p&gt;It&amp;#8217;s been a while since I posted anything. The last time I posted something ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s been a while since I posted anything. The last time I posted something was in August, so it has been around two months. Since then, many things have&amp;nbsp;changed.&lt;/p&gt;
&lt;p&gt;I had my last day in college on July. I had my convocation ceremony on October, so yep. I am officially holding a B.Sc. degree. It was pretty exciting. Also, now I am working as a Software Engineer! I am now officially a professional programmer. I write code for a living. I also just moved to a new place today, so things has been very hectic in the past few months. From the job search, tying things up with my scholarship, looking for a place to rent, starting a new job, all these things has been taking up most of my&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The last project I worked on was the WordPress theme that I uploaded on &lt;a href="http://wordpress.org/themes/mog/"&gt;WordPress.org&lt;/a&gt;, and thankfully the support email has slowed down ever since the theme was moved from the featured themes. I haven&amp;#8217;t even been spending my free time coding that much. Lack of proper workspace and my dying laptop are what I would blame, but I guess I was kind of tired with all the changes that are happening as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;I am rather excited this new stage of life, and I hope I can learn more from my job and the people around&amp;nbsp;it.&lt;/p&gt;</content></entry><entry><title>A Tiny Bit on Firefox¬†Extension</title><link href="http://hndr.me/blog/a-tiny-bit-on-firefox-extension" rel="alternate"></link><published>2013-08-20T14:33:00+08:00</published><updated>2013-08-20T14:33:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-08-20:/blog/a-tiny-bit-on-firefox-extension</id><summary type="html">&lt;p&gt;I stumbled on &lt;a href="http://coryg89.github.io/technical/2013/08/13/how-to-create-your-own-chrome-extensions/"&gt;this&lt;/a&gt; article on creating Chrome extension, and really, it seems really simple ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I stumbled on &lt;a href="http://coryg89.github.io/technical/2013/08/13/how-to-create-your-own-chrome-extensions/"&gt;this&lt;/a&gt; article on creating Chrome extension, and really, it seems really simple to do build an extension for the browser. So, I thought what would it take to build the same thing for&amp;nbsp;Firefox?&lt;/p&gt;
&lt;p&gt;It turns out, it is pretty simple as well, but when you are just getting started, find out where to get started aren&amp;#8217;t really straightforward. The getting started documents aren&amp;#8217;t exactly well organized. To start with, there are two different ways to build an add-on for Firefox. The &lt;span class="caps"&gt;XUL&lt;/span&gt; tool set, and also, the new Add-on &lt;span class="caps"&gt;SDK&lt;/span&gt;. The &lt;a href="https://addons.mozilla.org/developers/"&gt;add-ons developer page&lt;/a&gt; highlights the Add-on &lt;span class="caps"&gt;SDK&lt;/span&gt;, but the links below mostly deal with the &lt;span class="caps"&gt;XUL&lt;/span&gt; tools. The difference between the two can be found on &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/guides/sdk-vs-xul.html"&gt;this page&lt;/a&gt;. Basically, the Add-on &lt;span class="caps"&gt;SDK&lt;/span&gt; is the one that is simpler, the documentation can be found &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, once you found the documentation, everything should be pretty easy to follow. Mozilla provides &lt;a href="https://builder.addons.mozilla.org/"&gt;Add-on Builder&lt;/a&gt;, a web-app that allows you to build add-ons for Firefox, but I prefer to download the &lt;span class="caps"&gt;SDK&lt;/span&gt; to my computer and use my preferred text editor. The &lt;span class="caps"&gt;SDK&lt;/span&gt; is basically a python environment setup with everything you need to build an add-on, so you would need to have python installed on your computer. Whichever method you chose, the method are basically the&amp;nbsp;same.&lt;/p&gt;
&lt;h2&gt;Building the&amp;nbsp;Add-on&lt;/h2&gt;
&lt;p&gt;So, moving on to building actual add-on. Like the example in the post linked above, it is a  simple add-ons that adds a context menu that allows you to search &lt;span class="caps"&gt;MDN&lt;/span&gt; for the selected text. To be honest, I am not sure what to write in this post, because it is much more simpler than I&amp;nbsp;thought.&lt;/p&gt;
&lt;p&gt;Like the Chrome extension, a Firefox add-on is built with &lt;span class="caps"&gt;HTML&lt;/span&gt;/&lt;span class="caps"&gt;CSS&lt;/span&gt; and Javascript. There is a &lt;code&gt;package.json&lt;/code&gt; that contains the meta-data of the add-on that is a generated for you anyway. Your code will mainly goes to the &lt;code&gt;main.js&lt;/code&gt; file in the &lt;code&gt;lib&lt;/code&gt; folder of your add-on directory. You can put your extra data, such as to the &lt;span class="caps"&gt;CSS&lt;/span&gt; files, extra javascript libraries, images, etc in the &lt;code&gt;data&lt;/code&gt; folder. All these folders are generated automatically with the initialization of the add-on, along with a &lt;code&gt;doc&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; folder, which pretty much describe&amp;nbsp;themselves.&lt;/p&gt;
&lt;p&gt;Here is the whole code for the&amp;nbsp;add-on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;contextMenu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sdk/context-menu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sdk/tabs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;self.on(&amp;quot;context&amp;quot;, function(){&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;    return &amp;#39;Search &lt;span class="caps"&gt;MDN&lt;/span&gt; for \&amp;quot;&amp;#39;+window.getSelection().toString()+&amp;#39;\&amp;quot;&amp;#39;;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;});&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;self.on(&amp;quot;click&amp;quot;, function(){&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;   self.postMessage(window.getSelection().toString());&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;});&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;menuItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contextMenu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Search on &lt;span class="caps"&gt;MDN&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;contextMenu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SelectionContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;contentScript&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectionText&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://google.com/search?btnI&amp;amp;q=site:developer.mozilla.org &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;selectionText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see there, there isn&amp;#8217;t much to do. The first two lines are the import statement to access some of the browser feature. Skip the &lt;code&gt;script&lt;/code&gt; variable for now. Next, the we create a new context menu, give it a label, and we declare the context so that the item only shows up when there is a something&amp;nbsp;selected.&lt;/p&gt;
&lt;p&gt;Next, we pass the &lt;code&gt;contentScript&lt;/code&gt; argument, which defines the behavior of the menu item even further. Many things can be done through the &lt;code&gt;contentScript&lt;/code&gt;, such as to scope down the context even further, set the click behaviour, etc. The argument takes a string, and we passed the &lt;code&gt;script&lt;/code&gt; variable as the argument. In this case, the &lt;code&gt;context&lt;/code&gt; event is are fired just before the context menu is displayed, and we change the label further to add the selected text. We also handles the &lt;code&gt;click&lt;/code&gt; event, and with it, we call the &lt;code&gt;postMessage&lt;/code&gt; to pass the the selected text, which we handle with the function passed to the &lt;code&gt;onMessage&lt;/code&gt; argument, and in it, we open a new tab with the search&amp;nbsp;&lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;As you might imagine, passing the script that defines the behavior of the add-on as a string literal isn&amp;#8217;t really nice when script is something a little more complicated. You can pass external javascript files to the &lt;code&gt;contentScriptFile&lt;/code&gt; argument to accomplish the same thing. Although there are several differences in the way the script is executed, but I won&amp;#8217;t go into it too much in this post. More on it &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/guides/content-scripts/loading.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is a lot more you can do with the add-on. You can scan through more features available on the documentation. There are more examples on the add-ons &lt;span class="caps"&gt;SDK&lt;/span&gt;&amp;#8217;s &lt;a href="https://github.com/mozilla/addon-sdk"&gt;Github&lt;/a&gt; repository. By the way, the add-on mentioned above is available on &lt;a href="https://github.com/hdra/ff-MDNSearch"&gt;Github&lt;/a&gt; as well. Also, the add-on we built here is just a simple plugin to show the basics of the Firefox plugin &lt;span class="caps"&gt;API&lt;/span&gt;, not really meant for actual use. It doesn&amp;#8217;t handle plenty of use cases, and it also relies on Google&amp;#8217;s Feeling Lucky version to directly open the first search first result. so I don&amp;#8217;t really recommend you actually using it for anything&amp;nbsp;serious.&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>When Noise Gets Too¬†Much</title><link href="http://hndr.me/blog/when-noise-gets-too-much" rel="alternate"></link><published>2013-07-11T23:15:00+08:00</published><updated>2013-07-11T23:15:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-07-11:/blog/when-noise-gets-too-much</id><summary type="html">&lt;p&gt;The World Wide Web is an amazing thing. The amount of resources available on it ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;The World Wide Web is an amazing thing. The amount of resources available on it is enormous. You can learn just about anything you can think of with these resources. Recently though, I noticed that amount of low quality content is getting way a lot&amp;nbsp;higher.&lt;/p&gt;
&lt;p&gt;Until a few months ago, I collected almost everything I can get my hands on. I bookmarked every programming article I found that looked interesting, even though I barely know anything about the topic. When major tech conferences like Microsoft&amp;#8217;s &lt;a href="http://www.buildwindows.com"&gt;Build&lt;/a&gt;, &lt;a href="https://www.google.com/io/‚Äé"&gt;Google I/O&lt;/a&gt;, or &lt;a href="http://www.pycon.org"&gt;Pycon&lt;/a&gt; were held, I scanned the videos for titles that looked interesting and downloaded a bunch of them. I saved a bunch of videos from channels like Marakana or Google Tech Talks. I downloaded every single free programming books that people that people on sites like &lt;span class="caps"&gt;HN&lt;/span&gt; or reddit, even though I don&amp;#8217;t know what the book talk about that much. As you may have guessed, only a very small portion of those bookmarks ever get visited for the second time, I barely watched any of the videos I downloaded, and most of the ebooks I downloaded never even got extracted from the zip&amp;nbsp;archive.&lt;/p&gt;
&lt;p&gt;Up until Google announced the plan to shutdown Google Reader, I subscribed to a bunch of tech blogs, blogs like Techcrunch, or Gizmodo. Every morning, I would have 700+ new items on the reader, and I would scanned through all of them, click on what I find interesting, and mark everything else as read. It lasted for several months, but not only it was tedious, I started to realize many of their article are low-quality link-bait, not fact-based articles that fishes for stupid fan-boy arguments. I don&amp;#8217;t want to link to them for examples, but I am sure they aren&amp;#8217;t hard to&amp;nbsp;find.&lt;/p&gt;
&lt;p&gt;So, when Google Reader was shut down, I moved to &lt;a href="http://feedly.com"&gt;feedly&lt;/a&gt;, and I took the chance to clean up my feeds. I use &lt;span class="caps"&gt;RSS&lt;/span&gt; only to keep updated with some blogs of people whose writing I find interesting. Most of the are only updated occasionally, and I find myself reading almost every single one of them. The only tech blogs I follow are few that I find still publish actual professional news and pieces I enjoy reading, like &lt;a href="http://theverge.com/"&gt;The Verge&lt;/a&gt;. I keep up with their updates selectively through channels like Twitter and/ or Facebook instead of trying to keep up with everything they&amp;nbsp;published.&lt;/p&gt;
&lt;p&gt;Same case with the stuffs I kept on my hard drive. I deleted every videos and books that I find not too relevant because of the technology changes, or those that I found not too interesting after I went through them&amp;nbsp;briefly.&lt;/p&gt;
&lt;p&gt;It felt great. I feel much more relaxed. During the time I was living with these noises, I felt obligated to read or watch them. Now, not so much. Nowadays, I get my fix from channels such as Twitter, some highly-curated mailing-lists, also the top news on sites like &lt;span class="caps"&gt;HN&lt;/span&gt; and Reddit. I also keep my reading list with Pocket, and keep track of my projects with Trello. It feels good not having to manage them myself (Yes, I know that these cloud services could be shut down any time, but I really hope they won&amp;#8217;t for anytime&amp;nbsp;soon).&lt;/p&gt;
&lt;p&gt;It turns out, there is a downside to the abundance of information these&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; Changed on my opinion on the news&amp;nbsp;site.&lt;/p&gt;</content></entry><entry><title>Setting up Development Environment with¬†Tmux</title><link href="http://hndr.me/blog/setting-up-development-environment-with-tmux" rel="alternate"></link><published>2013-07-09T16:02:00+08:00</published><updated>2013-07-09T16:02:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-07-09:/blog/setting-up-development-environment-with-tmux</id><summary type="html">&lt;p&gt;I recently just finished up my bachelor studies, and as I wait for the the ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently just finished up my bachelor studies, and as I wait for the the convocation, I find myself not knowing what to work on. So,  between tying up loose ends with my scholarship sponsor, trying to score a freelance projects, and wasting time watching &lt;span class="caps"&gt;TV&lt;/span&gt; series, I spent my time playing around with various web front-end frameworks and libraries without any particular aims. In doing this I ended up creating a bunch of throw-away projects, and I switch around between them randomly quite often. Often, I would have to run several commands to get everything up and running again, which would be easy if it involves only starting up an editor, but most of the time, I would have to type the same commands many times when I start working on a project. Of course, this doesn&amp;#8217;t only apply to this particular situation of me experimenting around with various tools, even when working on a more &amp;#8220;serious&amp;#8221; project, I can benefit from automating the setup of the development&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;The first idea that came to my thought is simply write a batch script to start the tools that I need, but I realize that this won&amp;#8217;t work well, since most of the tools that I are long running processes, such as a web server, or maybe &lt;span class="caps"&gt;CSS&lt;/span&gt; pre-compiler set to watch for changes in my project. Also, the log messages that these tools produce on the terminal are things that I would prefer to see. So, I would need a something that can help me to manage several terminal processes easily. The first thing that came to mind is &lt;a href="http://www.gnu.org/software/screen/"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Screen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I read about terminal multiplexer and their use before, but this is the first time I thought of a use for them myself. So, I read around trying to look for how to use &lt;code&gt;screen&lt;/code&gt; to do the things I need, and it seems like there is a superior alternative to screen, which is &lt;a href="http://tmux.sourceforge.net/"&gt;tmux&lt;/a&gt;, so I switched my focus to it&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;So, what tmux does is basically it allows me to easily run multiple programs in a single shell session , switch between them, and manage them from the parent terminal. It is almost like a terminal emulator within your terminal. Perfect for what I&amp;nbsp;needed.&lt;/p&gt;
&lt;p&gt;In most of my experiment projects, I usually have at least python web server, compass watch, and livereload server running. Instead of starting the one by one, with tmux, I automate it, and at the same time have them arranged neatly in their own window/ pane. I can start a new tmux session, label it, and detach from it with &lt;code&gt;tmux new-session -s my-dev -d&lt;/code&gt;. I can also pass a new command for it to run. For example, I want it to create a new v-split pane and run &lt;code&gt;top&lt;/code&gt; in it, I can just enter &lt;code&gt;tmux split-window -v -t my-dev "top"&lt;/code&gt;. Awesome. For example, to create a tmux session with the setup consisting of python web server, livereload server, etc I mentioned above, I can just run these&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmux new-session -s my-dev -d &amp;quot;python -m SimpleHTTPServer 8899&amp;quot;
tmux split-window -v -t my-dev &amp;quot;compass watch&amp;quot;
tmux split-window -v -t my-dev &amp;quot;guard&amp;quot;
tmux select-layout -t my-dev tiled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I would have all these 3 process running inside a detached tmux session in the background. If I ever need to see the log messages, I just run &lt;code&gt;tmux attach&lt;/code&gt; and have this shown to&amp;nbsp;me:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/9247967451/" title="Tmux screenshot"&gt;
    &lt;img src="https://farm4.staticflickr.com/3694/9247967451_6169fb7941_c.jpg" width="800" height="433" alt="Tmux"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, If you prefer stay inside tmux, you can just leave out the &lt;code&gt;-d&lt;/code&gt; flag. You can also start a new editor inside it, create an empty tab for you run other commands on, almost anything that you can do on a terminal,&amp;nbsp;automated.&lt;/p&gt;
&lt;p&gt;That is awesome. But, you can automate it even further, and make your life even easier. &lt;a href="https://github.com/aziz/tmuxinator"&gt;Tmuxinator&lt;/a&gt; is a tool that allows you to create and manage tmux session easily. You create project with &lt;code&gt;mux new project-name&lt;/code&gt;, and open the config with &lt;code&gt;mux open project-name&lt;/code&gt; (&lt;code&gt;mux&lt;/code&gt; is an alias for tmuxinator). The config will look something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ~/.tmuxinator/project-name.yml

project_name: project-name
project_root: ~/project/project-name
tabs:
  - editor: vim
  - logs:
        layout: even-vertical
        panes:
            - python -m SimpleHTTPServer
            - compass watch
            - guard
  - shell: #empty, run plain shell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am sure I don&amp;#8217;t need to explain that file. It stores the configuration of the environment in an easy to write (and read) format, and you can start it with &lt;code&gt;mux project-name&lt;/code&gt; and it will create the session you need with the layout you need. You can read more about it in the project&amp;#8217;s &lt;span class="caps"&gt;README&lt;/span&gt; file. Tmuxinator obviously make something that make our job easier, even easier, but there is one caveat though. As you probably have noticed, tmuxinator is written in Ruby, and that means the tmux session it create will be a child process of Ruby, instead of your shell. You can read more what does this means &lt;a href="http://natedickson.com/blog/2013/05/10/from-the-desk-of-captain-obvious-tmuxinator-vs-scripted-configurations/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Obviously, tmux is powerful tools that can be used for more than just automating environment setup, I myself am still in discovering its capabilities. Search around for more information on customizing and using it, and of course, the &lt;code&gt;man&lt;/code&gt; page of the tmux itself is a great source of&amp;nbsp;information.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Setting Up Stuffs on¬†Linux</title><link href="http://hndr.me/blog/setting-up-stuffs-on-linux" rel="alternate"></link><published>2013-06-14T19:41:00+08:00</published><updated>2013-06-14T19:41:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-06-14:/blog/setting-up-stuffs-on-linux</id><summary type="html">&lt;p&gt;My Linux system has been pretty much set up for most things I need, since ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;My Linux system has been pretty much set up for most things I need, since of course, Linux Mint itself comes with a lot of stuffs such as python, and such. I myself am pretty surprised how much I have settled in. Still, there are still a number of stuffs that I need to add. First of, the utilities that includes stuffs such as gcc, cmake, curl, and all the&amp;nbsp;stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential curl
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Python&lt;/h1&gt;
&lt;p&gt;Python 2.7 comes pre-installed on most Linux system, so there isn&amp;#8217;t much to do here. Python 3 has started to gain more traction these days, with a lot of projects has been ported to it, and some new ones that are written in it. The day where I would have to deal with Python versions aren&amp;#8217;t too far, but for now, I don&amp;#8217;t have much use for it yet, so 2.7 is good enough for me. I do need to install the development header for some of the libraries that might need it though,&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pip, virtualenv,&amp;nbsp;virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;The apt-get for Python, tool to manage isolated Python packages, and a wrapper to make using it&amp;nbsp;easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-pip
sudo pip install --upgrade pip
sudo pip install virtualenv
sudo pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those command first install &lt;code&gt;pip&lt;/code&gt; from the software repository, then use &lt;code&gt;pip&lt;/code&gt; to update itself from the PyPI since the one in the software repository can be severely outdated, and then install &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;virtualenvwrapper&lt;/code&gt;. To finish up installing &lt;code&gt;virtualenvwrapper&lt;/code&gt;, put this somewhere in the startup script (&lt;code&gt;~/.zshrc&lt;/code&gt; in my case). Of course change the path according the the&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export WORKON_HOME=$&lt;span class="caps"&gt;HOME&lt;/span&gt;/.venvs
export PROJECT_HOME=$&lt;span class="caps"&gt;HOME&lt;/span&gt;/Projects
source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Ruby&lt;/h1&gt;
&lt;p&gt;I don&amp;#8217;t actually know how to program in Ruby. At All. But, there are a bunch of cools tools written in Ruby that are simply can&amp;#8217;t be replaced easily, things like &lt;a href="https://github.com/nex3/sass"&gt;&lt;span class="caps"&gt;SCSS&lt;/span&gt;&lt;/a&gt; and &lt;a href="https://github.com/guard/guard-livereload"&gt;guard-livereload&lt;/a&gt;. I don&amp;#8217;t want to spend too much time on this, so I just took the first guide I found and follow it. I am supposed to use &lt;a href="https//rvm.io"&gt;rvm&lt;/a&gt; to to manage the ruby versions. So, the stuff I&amp;nbsp;did:&lt;/p&gt;
&lt;p&gt;curl -L https://get.rvm.io |&amp;nbsp;bash&lt;/p&gt;
&lt;p&gt;And wait for it to finish, it might take a while. In my case, I ran into an error about it not being able to install some of the requirements, so what I did was check the log, and take the stuffs that failed to install and install them manually via apt-get. Worked for me. After it is done doing its things, put this somewhere in the startup&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source $&lt;span class="caps"&gt;HOME&lt;/span&gt;/.rvm/scripts/rvm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, install the version of ruby you want to&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rvm install 1.9.3
rvm -default use 1.9.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is done. Maybe install some essential&amp;nbsp;gems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install bundler, sass, guard
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Node.js&lt;/h1&gt;
&lt;p&gt;I am actually not sure what I am going to do with Node.js, but it is an interesting piece of technology with its full-async execution model. So, I just installed it, maybe I&amp;#8217;ll play with it at sometime. There are many ways to install node.js on a linux system. The official way is to download and install it from source, but since I am don&amp;#8217;t want to spend too much time dealing with something that I am not sure I will use anyway, I installed it from an un-official&amp;nbsp;&lt;span class="caps"&gt;PPA&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that will install &lt;code&gt;npm&lt;/code&gt; as well. kind of like &lt;code&gt;pip&lt;/code&gt; of the node.js world I&amp;nbsp;guess.&lt;/p&gt;
&lt;h1&gt;Others&lt;/h1&gt;
&lt;h2&gt;Mono&lt;/h2&gt;
&lt;p&gt;The open source .&lt;span class="caps"&gt;NET&lt;/span&gt; implementation. Ability to use the awesome C# and&amp;nbsp;MonoGame.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mono-complete
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Android-&lt;span class="caps"&gt;SDK&lt;/span&gt;?&lt;/h2&gt;
&lt;p&gt;I know I am going to need this sooner or later, but dealing with Java isn&amp;#8217;t just my favorite thing to do. I think the new Android Studio is supposed to make installing the SDKs and Android system images easier without having to deal with eclipse plugins and stuff, but still, removing OpenJDK, installing Oracle-&lt;span class="caps"&gt;JDK&lt;/span&gt;, and stuff&amp;#8230; later, I&amp;nbsp;guess.&lt;/p&gt;
&lt;h2&gt;Go?&lt;/h2&gt;
&lt;p&gt;I am not sure if I want to install this. The hype around it has been drawing my attention to&amp;nbsp;it.&lt;/p&gt;</content><category term="linux"></category><category term="python"></category><category term="ruby"></category><category term="node"></category></entry><entry><title>More Fun with¬†Linux</title><link href="http://hndr.me/blog/more-fun-with-linux" rel="alternate"></link><published>2013-06-11T13:04:00+08:00</published><updated>2013-06-11T13:04:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-06-11:/blog/more-fun-with-linux</id><summary type="html">&lt;p&gt;Some stuffs that I did to make working with Linux&amp;nbsp;easier.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Terminal&lt;/h1&gt;
&lt;p&gt;The best feature of a Linux system is its &lt;span class="caps"&gt;CLI&lt;/span&gt; tools, so of course, the terminal is an important tool to have. My first choice was &lt;a href="http://software.schmorp.de/pkg/rxvt-unicode.html"&gt;urxvt&lt;/a&gt;, it was lightweight, supports unicode, have quite an active community with various customization with it, and it doesn&amp;#8217;t have a menu bar, which is perfect for the i3wm I am using. Copy and pasting aren&amp;#8217;t as straightforward as I hoped, as I need to setup some script to get the basic function working, but I could live with that. The deal breaker problem is that it for some weird reason produces weird text artifacts when I resizes the window, which is really important to me, since one of the main the reason I am using a tiling window manager is for the flexibility and ability to quickly resize windows using&amp;nbsp;keyboard.&lt;/p&gt;
&lt;p&gt;So, I settled for Terminator. It wasn&amp;#8217;t ideal, it was rather packed with features I don&amp;#8217;t really need, such as tabs and split windows. I have no need for these features, as I am already using a tiling window manager anyway. But at least it works, and it got a bad ass&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;There isn&amp;#8217;t much of a terminal to customize, so I only set the font type, hid the title bar, and changed the color scheme. I wrote a &lt;a href="https://github.com/hdra/itermcolors2terminator"&gt;script&lt;/a&gt; to convert iTerm color schemes to the terminator palettes, since seems like the iTerm users enjoy a great list of color schemes&amp;nbsp;around.&lt;/p&gt;
&lt;h2&gt;Shell&lt;/h2&gt;
&lt;p&gt;To be honest, I don&amp;#8217;t really need to change my shell to anything other than what was provided as the default (that is, bash). Its not like I have overgrown bash and need something more powerful anyway. But, since all the cool people are saying &lt;a href="http://fendrich.se/blog/2012/09/28/no/"&gt;how&lt;/a&gt; &lt;a href="http://mikegrouchy.com/blog/2012/01/zsh-is-your-friend.html"&gt;awesome&lt;/a&gt; it is, so I jumped on the &lt;a href="http://www.zsh.org/"&gt;&lt;span class="caps"&gt;ZSH&lt;/span&gt;&lt;/a&gt; bandwagon anyway. And it turns out, it really is cool, among other things, one that I enjoy the most is its autocompletion. Just awesome. I was about to dive deeper and have fun customizing almost every aspects of it, but somewhere along the way, I&amp;nbsp;realized:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/9014788639/" title="its a trap by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8275/9014788639_93815e99c4_o.jpg" width="197" height="256" alt="its a trap"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am about to spend too much time customizing the system again. So, I simply turned to the awesome &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt; package, the default is more than good enough for me, all I need to do is to just add a couple of extra lines to the &lt;code&gt;.zshrc&lt;/code&gt; file to set some alias and environment&amp;nbsp;variables.&lt;/p&gt;
&lt;h1&gt;Text&amp;nbsp;Editor&lt;/h1&gt;
&lt;p&gt;The last few times I tried to work in Linux, I never really tried to setup a nice text editor to use. Big mistake. &lt;span class="caps"&gt;IMO&lt;/span&gt; the text editor is the most important tool in a programmer&amp;#8217;s pocket. Last time, I settled with something way too simple, such as gedit, or something way too complex to get to work, vim. No need to say, I never even got any real productivity working in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;This time, the I have a wonderful text editor that I have been using from Windows. Yep, &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text 2&lt;/a&gt;. It really is the best text editor I have ever used. The plugins, the themes and color schemes, and the community around it are simply awesome. Even without any plugin, it is still a solid text editor, with its command palette, multi-cursor, and many others. Best thing of all? It is cross-platform, available on all 3 major OSes, not the Mono or Java kind of cross platform, but a native application all way&amp;nbsp;through.&lt;/p&gt;
&lt;p&gt;Installing it in Linux, it is pretty straightforward, downloading it from the website, extracting it, and thats it. For those who are too lazy to go to the website and download the archive, there is this command that you can&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~
wget http://c758482.r82.cf2.rackcdn.com/Sublime Text 2.0.1 x64.tar.bz2
tar vxjf Sublime\ Text\ 2.0.1\ x64.tar.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is also an unofficial repository maintained by the people at&amp;nbsp;webupd8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:webupd8team/sublime-text-2
sudo apt-get update
sudo apt-get install sublime-text-2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next thing, adding the the executable to path so that it can be easily&amp;nbsp;started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -s ~/Sublime\ Text\ 2/sublime_text /usr/bin/subl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is a problem with the script above though. Running the command on the terminal will make the shell to wait for the program to exit, making us unable to do anything else on that terminal. So, to fix that, I made a little script to run it in the background, independent of the&amp;nbsp;terminal.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;subl &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/null &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;All I got to do left is to install the packages that I have been using on Windows. Installing my packages from Windows aren&amp;#8217;t that hard, since I installed my sublime text extras from the &lt;a href="http://wbond.net/sublime_packages/package_control"&gt;Package Control&lt;/a&gt;, all of my installed packages are listed in the &lt;code&gt;Package Control.sublime-settings&lt;/code&gt;, and the only thing left I need to do was to copy all my other configurations over, and just modify a little from the hotkey&amp;nbsp;configuration.&lt;/p&gt;
&lt;h1&gt;&lt;span class="caps"&gt;LAMP&lt;/span&gt;&amp;nbsp;Stack&lt;/h1&gt;
&lt;p&gt;I still do a lot of &lt;span class="caps"&gt;PHP&lt;/span&gt; development, however uncool that may be nowadays. From messing around with WordPress and general web development, I still find &lt;span class="caps"&gt;PHP&lt;/span&gt; irreplaceable. I even intend to pick up &lt;a href="http://laravel.com/"&gt;Laravel&lt;/a&gt; to see what it can&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;So, easiest way to do it is of course, the combination of Apache web server, MySQL, and the &lt;span class="caps"&gt;PHP&lt;/span&gt; stack. On Windows, I have been spoiled with ease of setup that is &lt;a href="http://sourceforge.net/projects/xampp/"&gt;&lt;span class="caps"&gt;XAMPP&lt;/span&gt;&lt;/a&gt;. Good thing is, it is also available on Linux, but this time, I would like to take the opportunity to do it differently. I want to the parts manually so that I know how they work together. Fortunately, it is not that hard to setup on Linux, as most of the packages needed are readily available on the software&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;So, here are the packages needed, first of all, is the Apache web&amp;nbsp;server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install apache2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By now, visiting &lt;code&gt;localhost&lt;/code&gt; on your web browser should give you something to be happy about. Next thing to install is the&amp;nbsp;MySQL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the install is finished, you should get asked to perform the initial setup for the MySQL server, including setting up the user authentication and stuffs. Now the last piece of the stack is to install&amp;nbsp;php.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install php5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, for them to work together, there are a couple more packages to be&amp;nbsp;installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libapache2-mod-php5 libapache2-mod-auth-mysql php5-mysql phpmyadmin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, restart apache with &lt;code&gt;sudo /etc/init.d/apache2 restart&lt;/code&gt;, and try to put some &lt;span class="caps"&gt;PHP&lt;/span&gt; code in &lt;code&gt;/var/www&lt;/code&gt; and navigate to the address to see if it executed properly. Also, add this line to &lt;code&gt;/etc/php5/apache2/php.ini&lt;/code&gt;: &lt;code&gt;extension=mysql.so&lt;/code&gt; to get &lt;span class="caps"&gt;PHP&lt;/span&gt; to work with MySQL. Also, add the line &lt;code&gt;Include /etc/phpmyadmin/apache.conf&lt;/code&gt; to &lt;code&gt;/etc/apache2/apache2.conf&lt;/code&gt; so that the server know where to find phpmyadmin. Restart the server again, and the server is set to&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;Now, the server is ready to use, but there are still a few things to do to make it pleasant to use. One is the document root of the apache web server is located at the not so easy to access location of &lt;code&gt;/var/www&lt;/code&gt;, so its better to move that to somewhere inside the home directory. To do that. the file to edit is &lt;code&gt;/etc/apache2/sites-available/default&lt;/code&gt;. It should be pretty obvious which lines to edit once you open that file. Also, while this might not be necessary, you can create an alias for &lt;code&gt;/etc/init.d/apache2&lt;/code&gt; so that it can be easily&amp;nbsp;accessed.&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>WordPress is¬†Big</title><link href="http://hndr.me/blog/wordpress-is-big" rel="alternate"></link><published>2013-06-07T11:22:00+08:00</published><updated>2013-06-07T11:22:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-06-07:/blog/wordpress-is-big</id><summary type="html">&lt;p&gt;Well, WordPress is big. Yes, that sounds silly, I know how &lt;a href="http://yoast.com/wordpress-stats/"&gt;big&lt;/a&gt; WordPress is, I ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, WordPress is big. Yes, that sounds silly, I know how &lt;a href="http://yoast.com/wordpress-stats/"&gt;big&lt;/a&gt; WordPress is, I just never really cared about the opportunity that it provides. I am currently looking for some freelance work to do, and I was pretty disappointed that most of what I found are WordPress jobs. Not that there is any problem with that, it was a wonderful blogging software, but it is a terrible &lt;span class="caps"&gt;CMS&lt;/span&gt;. As it tries to be more of a &lt;span class="caps"&gt;CMS&lt;/span&gt;, a terrible &lt;span class="caps"&gt;API&lt;/span&gt; that is hard to work with is what we have. That is the reason why I would prefer to write a web app from scratch rather than bending WordPress to do what I want, it is just too much work, and for some reason people seems to prefer using WordPress for everything. The other day, I received a request to write an event management website with WordPress. I am not confident that I can do that, since I honestly had a hard time understanding its&amp;nbsp;&lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;When I uploaded my &lt;a href="http://wordpress.org/extend/themes/mog"&gt;Mog&lt;/a&gt; WordPress theme to the wordpress.org theme directory, I didn&amp;#8217;t have much expectation. It was just a side project that I did for fun, and honestly, it was my first try on building a WordPress theme for myself (I was blogging on WordPress.com at the time). To be honest, it wasn&amp;#8217;t that good of an experience. The &lt;span class="caps"&gt;API&lt;/span&gt; are kind of messy, in no small part are caused by having to accommodate a large variety of use cases by its even larger user base. Somewhere along the way I got fed up and decided to just build the things that I need. So, I left out custom menus support, ability to customize the theme via the WordPress option, and I don&amp;#8217;t even style the drop down menu properly, since I wasn&amp;#8217;t planning to have any nested&amp;nbsp;menu.&lt;/p&gt;
&lt;p&gt;Then, few days ago, I noticed that the theme has reached 10.000 downloads. I know, that given WordPress&amp;#8217; scale, that number is nothing. It is nowhere near the number of some &amp;#8220;popular&amp;#8221;WordPress plugin or theme. Still, it is kind of different knowing that something that I made was interesting enough that it was downloaded by that many&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8975138966/" title="Screenshot (141) by p.hdra, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5345/8975138966_64de8e9581.jpg" width="433" height="500" alt="Screenshot (141)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I came to think that something that I initially considered good enough for me to use, is nowhere near good enough for public consumption, so I decided to start working on the theme again, and make it better. Starting by fixing some of the problems I mentioned above. I still hate how messy the WordPress &lt;span class="caps"&gt;API&lt;/span&gt; is, but it also got me thinking, maybe I should give it a more serious consideration. Even though it is not very likely, I still hope that the WordPress team can consider redesigning the &lt;span class="caps"&gt;API&lt;/span&gt;. There are some &lt;a href="http://john.onolan.org/ghost/"&gt;projects&lt;/a&gt; that seems promising, but while I am sure they are all great projects, I don&amp;#8217;t see it can replace WordPress anytime soon. So, I guess it&amp;#8217;s time to open up the WordPress books&amp;nbsp;again.&lt;/p&gt;</content><category term="wordpress"></category></entry><entry><title>Setting Up My Linux to be Less¬†Ugly</title><link href="http://hndr.me/blog/making-my-new-linux-less-ugly" rel="alternate"></link><published>2013-06-01T14:57:00+08:00</published><updated>2013-06-01T14:57:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-06-01:/blog/making-my-new-linux-less-ugly</id><summary type="html">&lt;p&gt;As I &lt;a href="http://hndr.me/blog/linux-again"&gt;decided&lt;/a&gt; to setup a new Linux installation that is lightweight, customizable to my ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I &lt;a href="http://hndr.me/blog/linux-again"&gt;decided&lt;/a&gt; to setup a new Linux installation that is lightweight, customizable to my taste, can be made look pretty, and of course, usable, I started looking around for the suitable&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;First thing I need to decide on is which Linux distribution to use. I can either look for something bare bone like the Arch, and then build up everything I need, or I can just take something that is ready to use, like Ubuntu, and take out whatever I don&amp;#8217;t need and replace anything I don&amp;#8217;t like. I am tempted to take the former approach, but looking at some youtube videos on the stuffs I would need to do, there seems to be just way too many things to do before I can even do anything. Even for basic things like network access needs to be setup. So, well, no thanks. Maybe next&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I ended up deciding on the distribution I am familiar with, Linux Mint 13 &lt;span class="caps"&gt;XFCE&lt;/span&gt;. Now, even as it is, the &lt;span class="caps"&gt;XFCE&lt;/span&gt; distribution is lightweight enough for me to use smoothly. It doesn&amp;#8217;t look bad, and it is very customizable. I was tempted to settle on it, but for some reason, I had frequent crashes during my use with it. Anyway, it is good enough for me to use as a&amp;nbsp;base.&lt;/p&gt;
&lt;p&gt;I had been read a lot about tiling window manager, and has been wanting to try it out. &lt;a href="http://www.xmonad.org"&gt;XMonad&lt;/a&gt; seems to be the one that is mentioned most frequently, but setting it up seems like a pain. Not to mention the  &lt;span class="caps"&gt;500MB&lt;/span&gt; I am supposed to download with it. I found another option, &lt;a href="http://www.i3wm.org"&gt;i3&lt;/a&gt;. And it seems to be a lot easier to setup and use. The configuration is done with plain text file instead of a scripting language like Haskell as is the case with XMonad. People had good things to say about how easy it is to use as well. Once I saw the video demo, I am&amp;nbsp;sold.&lt;/p&gt;
&lt;iframe width="480" height="360" src="http://www.youtube.com/embed/Wx0eNaGzAZU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Installing&amp;nbsp;i3&lt;/h2&gt;
&lt;p&gt;Installing i3 is easy enough. It is listed in the Ubuntu package repository, so it is also available for Linux Mint that is based on Ubuntu, but I find the version available in the repository to be severely outdated and have some problem with rendering some fonts, so installing the latest stable version from i3&amp;#8217;s repository is recommended. The instruction on their download page is easy enough to&amp;nbsp;follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# echo &amp;quot;deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
# apt-get update
# apt-get --allow-unauthenticated install sur5r-keyring
# apt-get update
# apt-get install i3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One thing to take notice here is the first line, which is used to add the repository to our sources. Only problem is, the &lt;code&gt;lsb_release -c -s&lt;/code&gt; in my system will output &lt;code&gt;maya&lt;/code&gt;, since that is indeed what my system is. That will cause the link to return me an 404, since, of course, the repository was meant for Ubuntu, and there is not Ubuntu version code named &lt;code&gt;maya&lt;/code&gt;. Since I know Linux Mint 13 was build on Ubuntu Precise, I can just replace it with&amp;nbsp;that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# echo &amp;quot;deb http://debian.sur5r.net/i3/ maya universe&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the installation is done, I log out, log in again, this time selecting i3 in the session manager, and I am&amp;nbsp;in.&lt;/p&gt;
&lt;h2&gt;Making it less&amp;nbsp;ugly&lt;/h2&gt;
&lt;p&gt;Out of the box, i3 looks pretty hideous. I didn&amp;#8217;t take any screenshot because at that point I haven&amp;#8217;t even figured out how to take a screenshot yet. But it is just a black screen with a little black bar at the bottom anyway. In any case, it is time to to do some makeover. The documentation for the i3 is really clear and nice to read. So, there wasn&amp;#8217;t much problem to figure out what to do. The configuration file is stored at &lt;code&gt;~/.i3/config&lt;/code&gt;. First thing to change is the color. I don&amp;#8217;t know much about design, but I do know when to avoid using the pure black and pure white color. Thing #1 to change: the window title&amp;nbsp;color.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client.focused          #&lt;span class="caps"&gt;3F8AC2&lt;/span&gt; #&lt;span class="caps"&gt;096BAA&lt;/span&gt; #&lt;span class="caps"&gt;00BAA7&lt;/span&gt; #&lt;span class="caps"&gt;00DA8E&lt;/span&gt;
client.focused_inactive #333333 #&lt;span class="caps"&gt;5F676A&lt;/span&gt; #ffffff #484e50
client.unfocused        #333333 #424242 #888888 #292d2e
client.urgent           #C10004 #900000 #ffffff #900000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, the status bar. I prefer mine on top of the screen. Also, the&amp;nbsp;color.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bar {
    position top
    status_command i3status
    tray_output &lt;span class="caps"&gt;LVDS&lt;/span&gt;
    colors{
        background #232323
        statusline #&lt;span class="caps"&gt;DCDCDC&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next thing, time to change that 80s font&amp;nbsp;face.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;font pango: Ubuntu Mono 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By now, it looks much better. Next is the wallpaper. I use &lt;code&gt;feh&lt;/code&gt; to set my&amp;nbsp;wallpaper.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;exec --no-startup-id feh --bg-fill /home/hdra/Pictures/Wallpapers/city.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is how the &amp;#8216;desktop&amp;#8217; looks like right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8910945270/" title="desktop by p.hdra, on Flickr"&gt;&lt;img src="https://farm4.staticflickr.com/3665/8910945270_db72193fae_c.jpg" width="800" height="447" alt="desktop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Setting up&amp;nbsp;&lt;span class="caps"&gt;GTK&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;By now my desktop doesn&amp;#8217;t look half bad, but if I open any gtk-based application, especially gtk3 application, it looks like complete crap. So, next thing to deal with is the gtk theme and icons. The configuration file for gtk2 is located at &lt;code&gt;~/.gtkrc-2.0&lt;/code&gt;, while for gtk3 is located at &lt;code&gt;~/.config/gtk-3.0/settings.ini&lt;/code&gt;. I want the applications to look consistent, so I had to look for one that can provide similar looks for both. There are some of the built-in theme that can do this, but I want something else. I decided on the MediterraneanLight from &lt;a href="http://www.gnome-look.org"&gt;gnome-look&lt;/a&gt;. I also picked up an icon set from there. Next thing to do is to change the font. I never liked how fonts in Linux &lt;span class="caps"&gt;OS&lt;/span&gt; are always unnecessarily big. So, I switched to a lower font&amp;nbsp;size.&lt;/p&gt;
&lt;p&gt;Here is my gtk2&amp;nbsp;configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gtk-theme-name = &amp;quot;MediterraneanLight&amp;quot;
gtk-font-name = &amp;quot;Open Sans 8&amp;quot;
gtk-icon-theme-name = &amp;quot;Faenza-Dark&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here is the gtk3&amp;nbsp;configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Settings]&lt;/span&gt;
&lt;span class="na"&gt;gtk-theme-name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;MediterraneanLight&lt;/span&gt;
&lt;span class="na"&gt;gtk-font-name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Open Sans 8&lt;/span&gt;
&lt;span class="na"&gt;gtk-fallback-icon-theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Mint-X&lt;/span&gt;
&lt;span class="na"&gt;gtk-icon-theme-name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Faenza-Dark&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now here is how it looks&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8910222885/" title="marlin by p.hdra, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5459/8910222885_22f206f546_c.jpg" width="800" height="450" alt="marlin"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is some more screenshots with the tiling in&amp;nbsp;action:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8901017483/" title="capt-2013-05-30-114812 by p.hdra, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5444/8901017483_1e29ac330a_c.jpg" width="800" height="450" alt="capt-2013-05-30-114812"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8901630850/" title="capt-2013-05-31-193656 by p.hdra, on Flickr"&gt;&lt;img src="https://farm4.staticflickr.com/3724/8901630850_57c45b5fd2_c.jpg" width="800" height="450" alt="capt-2013-05-31-193656"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next is on setting it up to be more&amp;nbsp;usable!&lt;/p&gt;</content></entry><entry><title>Setting Up My Linux on My Laptop, Changing My¬†Approach</title><link href="http://hndr.me/blog/linux-again" rel="alternate"></link><published>2013-05-29T20:57:00+08:00</published><updated>2013-05-29T20:57:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-05-29:/blog/linux-again</id><summary type="html">&lt;p&gt;I tried again and again to setup a Linux &lt;span class="caps"&gt;OS&lt;/span&gt; on my laptop, hoping to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I tried again and again to setup a Linux &lt;span class="caps"&gt;OS&lt;/span&gt; on my laptop, hoping to eventually making it my main operating system, but, again and again, I find it just not practical enough. There was always something that doesn&amp;#8217;t work correctly. Things like programs that kept crashing, windows that suddenly froze, drivers not working, or simply, everything being sluggish. All that time, I always kept thinking that Linux on desktop is good enough to be used the same way I use Windows, or maybe, &lt;span class="caps"&gt;OSX&lt;/span&gt;. I was wrong. So, why am I doing this again this time? Well, for one thing, final exams are coming, and I should be studying instead of messing with my computer, so yeah, that dreadful &amp;#8216;P&amp;#8217; word. But, other than that, I also want to try a different approach this&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The usual pitch with Linux on desktop is that they are no longer hard to use as they used to. They require less resources to run. They can be made whatever you want them to. Truth: the ones that are user friendly are nowhere near lightweight, and many of them aren&amp;#8217;t even that configurable by design, in the name of user friendliness. I do believe that overall, they are all moving to the right direction. Especially the work Linux Mint team done with &lt;a href="http://cinnamon.linuxmint.com"&gt;Cinnamon&lt;/a&gt; has been very exciting. Canonical has also been hard at work with Ubuntu, coming up with all kinds of stuff that makes Linux more and more viable as a desktop &lt;span class="caps"&gt;OS&lt;/span&gt;. They even plan to develop &lt;a href="http://www.omgubuntu.co.uk/2013/03/canonical-announce-custom-display-server-mir-not-wayland-not-x"&gt;their own display server&lt;/a&gt;. The trends are going towards an &lt;span class="caps"&gt;OS&lt;/span&gt; that is tightly integrated, better hardware support, and of course, easier to use. Customizability might be the only thing that are going away. I personally don&amp;#8217;t really care for it, as long as they work well enough for me, I wouldn&amp;#8217;t really need to configure much&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Seems like easy enough for me to just pick a distribution and use it. Too bad, it is not that simple for me. Here are some of my problem with the existing &amp;#8216;mainstream linux&amp;#8217;: * I mentioned that the ability to configure the &lt;span class="caps"&gt;OS&lt;/span&gt; doesn&amp;#8217;t matter that much to me, as long as it works well enough. Problem is, none of them are good enough, so my only option is to use one that I can customize to suit my use.
&lt;em&gt; My laptop is almost 4 years old. It runs Windows 8 smoothly. It can even run some of the recent heavyweight games with no problem. But, surprisingly,  believe it or not, running vanilla Ubuntu with Unity doesn&amp;#8217;t come without noticeable lags. I believe the hardware drivers play quite a part in this. Looking around, seems like most people seems pretty happy with the open source graphic card driver, so I guess its time for me to upgrade, but, I am still saving up.
&lt;/em&gt; Related to my first point, in my attempt trying to bend the &lt;span class="caps"&gt;OS&lt;/span&gt; to suit my taste, many things became a tangled mess. This makes unexpected things to stop working during unexpected times. Since many of the distribution tried to make things easy to use, many things became hidden away. This also makes it hard to reproduce the configuration because I am not even sure what I&amp;nbsp;changed.&lt;/p&gt;
&lt;p&gt;So, with all that in mind, I decided how I want this attempt on using Linux would be:
&lt;em&gt; Lightweight. A must. I don&amp;#8217;t think I can use an &lt;span class="caps"&gt;OS&lt;/span&gt; that aren&amp;#8217;t at least as fast as Windows.
&lt;/em&gt; Customizable. I think I was looking for the wrong thing if I focus on ease of use when trying out Linux out of the box. For now. This time, I would look for something that may requires some configuration overhead, but overall, would make everything easier to use.
&lt;em&gt; Works. Of course, By this I mean I don&amp;#8217;t want having to install codecs to play music, or not audio jack not working, having to dig for drivers for wireless card, multi-monitor configuration, etc.
&lt;/em&gt; Doesn&amp;#8217;t hide things from me. I want to know what is going on in as many places as possible. As little magic as possible. I want to be able to reproduce my configuration easily.
&lt;em&gt; Makes me more productive. The whole point of me thinking to switch to Linux is so that I can do things, especially programming related things, faster, easier, and better. I want to take full advantage of &lt;span class="caps"&gt;UNIX&lt;/span&gt;. I want to use as many keyboard shortcuts as possible. I don&amp;#8217;t expect this to be there out of the box, but I want it to be at least configurable to achieve this.
&lt;/em&gt; Looks good. I don&amp;#8217;t need shiny and fancy, but at the very least, I don&amp;#8217;t want it to be unbearably&amp;nbsp;ugly.&lt;/p&gt;
&lt;p&gt;Of course, I can&amp;#8217;t simply blame everything on the &lt;span class="caps"&gt;OS&lt;/span&gt;. There are also mistakes in the way I approached this in the past. I just expected everything to work without making an effort to know what is happening behind the scene. So, this time, here is how I am going to do it.
&lt;em&gt; No configuration tool such as ubuntu-tweak and such. If there is a file that I need to edit, I want to know what it is, and how to change it.
&lt;/em&gt; Read the &lt;code&gt;man&lt;/code&gt;. I always avoided having to read the help page of most tools, as I preferred to just have the command to enter presented to me via the great wisdom of Google.
&lt;em&gt; Take it slow. No need to rush to make the &lt;span class="caps"&gt;OS&lt;/span&gt; for me to use. Making sure things work properly is the priority.
&lt;/em&gt; Document everything. I want to know the steps I took to achieve something, and I want to make sure it can be easily reproduced. Maybe write a build script for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;All that covered, I have some plan in mind on how to do it. Lightweight, customizable, reasonably low-level, stable, friendly. Next will be on setting it up. By the way, while I was writing this post, Linux Mint 15 &amp;#8220;Olivia&amp;#8221; was announced! and look at &lt;a href="http://www.linuxmint.com/rel_olivia_whatsnew.php"&gt;them&lt;/a&gt;! So pretty! This can be harder than I expected with that kind of&amp;nbsp;temptation.&lt;/p&gt;</content></entry><entry><title>My First GitHub Pull¬†Request!</title><link href="http://hndr.me/blog/my-first-github-pull-request" rel="alternate"></link><published>2013-04-28T11:44:00+08:00</published><updated>2013-04-28T11:44:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-28:/blog/my-first-github-pull-request</id><summary type="html">&lt;p&gt;I just had my first pull request! It was a change to the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican themes ‚Ä¶&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just had my first pull request! It was a change to the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican themes&lt;/a&gt;, where I added this &lt;a href="https://github.com/hdra/pelican-cait"&gt;theme&lt;/a&gt; to the directory there. So, yeah, I didn&amp;#8217;t actually contribute a patch to an existing project, it was simply adding my repo to the list of&amp;nbsp;theme.&lt;/p&gt;
&lt;p&gt;I also learned about the whole pull request process itself. Of course, it is not that complicated in the first place anyway. Basically it involves forking the source repo, create a new branch, make changes on that branch, commit, push to github, and then after the new branch is created on github, there will be an option to initiate a pull request there. It is that&amp;nbsp;simple.&lt;/p&gt;
&lt;p&gt;I actually drafted this post around a week ago when I sent the pull request, and it just got merged to the master branch earlier today, so here I am updating this&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;But, anyway, I got to say, it feels pretty good! and it is also quite a motivation booster for me.&amp;nbsp;:D&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Setting Up My GitHub¬†Pages</title><link href="http://hndr.me/blog/setting-up-my-github-pages" rel="alternate"></link><published>2013-04-26T16:50:00+08:00</published><updated>2013-04-26T16:50:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-26:/blog/setting-up-my-github-pages</id><summary type="html">&lt;p&gt;Previously, I had been hosting this site on Heroku. It was pretty simple to setup ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Previously, I had been hosting this site on Heroku. It was pretty simple to setup, I can just create an &lt;code&gt;index.php&lt;/code&gt; file, then add another &lt;code&gt;.htaccess&lt;/code&gt; file to the root of the site, push, and done. In this case, I maintained two separate repositories, one that contains the Pelican project, including the configuration file, the build script, etc. The other repositories contains the generated &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;Now, I recently wanted to try hosting the site on GitHub Pages. Hosting on GitHub pages requires the content of my site to be in the root of &lt;code&gt;gh-pages&lt;/code&gt; branch. Of course, this would be simple enough if I just keep the project files and the generated &lt;span class="caps"&gt;HTML&lt;/span&gt; files in separate repositories just like I did before, but I would like to keep them in the same repository, and have a build script to do everything for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Turns out, it is not that simple to achieve that. The most straightforward way to do this is to create or checkout the &lt;code&gt;gh-pages&lt;/code&gt; branch, generate the &lt;span class="caps"&gt;HTML&lt;/span&gt; files on the same directory, commit, and push as usual. But this would make the &lt;code&gt;gh-pages&lt;/code&gt; branch contains some of the project files. Not a big problem, but it just doesn&amp;#8217;t feel too clean of a solution. I also tried other methods, but none of them feels satisfactory. Ideally, I wanted to have a solution similar what was done with &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt;, but there are some problems that prevents me from using it. I tried looking at the source of the project, in attempting to understand how it works and try to do the same things manually, but well, it seems like my Git-fu are insufficient to understand it. In the end, ended up doing the things similar as what outlined &lt;a href="https://gist.github.com/chrisjacob/833223"&gt;here&lt;/a&gt;. Basially, I am keeping the branches of the same repository in separate directories, but instead of keeping the as a siblings, I made the &lt;code&gt;gh-pages&lt;/code&gt; branch as a child of the child directory of the project. Here is the fabric file I used to build the&amp;nbsp;post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configurations&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;conf&lt;/span&gt;


&lt;span class="n"&gt;output_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt;
&lt;span class="n"&gt;remote_git&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git@github.com:hdra/hndr.me.git&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;env&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Scripts&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;activate.bat&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkdir {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_dir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git clone -b gh-pages {0} .&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_git&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add -A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git commit -m &amp;quot;{0}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push bitbucket master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Post update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Update master branch&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add -A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git commit -m &amp;quot;{0}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push bitbucket master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate posts&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelican -s configurations.py -v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Update gh-pages branch&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add -A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git commit -m &amp;quot;{0}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push origin gh-pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That seems to work pretty cleanly so far. One problem is when creating a new project and its &lt;code&gt;gh-pages&lt;/code&gt; branch for the first time. In my case, I dealt with it by creating the a new branch as usual, and then deleting the project files in the &lt;code&gt;gh-pages&lt;/code&gt; branch manually, but I think it can be done by creating an orphan page with the &lt;code&gt;git checkout --orphan gh-pages&lt;/code&gt; command as well. Anyway, this needs to be done only once, so it shouldn&amp;#8217;t be too much of a&amp;nbsp;problem.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>New Site¬†Design!</title><link href="http://hndr.me/blog/new-site-design" rel="alternate"></link><published>2013-04-13T19:33:00+08:00</published><updated>2013-04-13T19:33:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-13:/blog/new-site-design</id><summary type="html">&lt;p&gt;I finally got to converting the last site design I made to a Pelican theme ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I finally got to converting the last site design I made to a Pelican theme. The &lt;a href="https://github.com/hdra/pelican-cait"&gt;theme&lt;/a&gt; should be in use by the time this post is published. In its current state, I wouldn&amp;#8217;t say the theme is compeletely finished. I tried to make it responsive to screen size changes, but during my testing, I found some problem viewing it in iOS Safari when there is a long line of continuos text in the page. For some reason &lt;code&gt;overflow-wrap: break-word;&lt;/code&gt; doesn&amp;#8217;t seem to work in it, even though it works fine in Chrome and Firefox for&amp;nbsp;Android.&lt;/p&gt;
&lt;p&gt;That aside, the are also a lot of repetition and duplicate codes in the &lt;span class="caps"&gt;CSS&lt;/span&gt; and Jinja2 template. The templates in particular aren&amp;#8217;t very flexible. There are a number of values that needs to be specified in the configuration file for it to be usable. Pages also can&amp;#8217;t be listed the normal way since I turned one of the page template into the index page for my&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;All that said, I think it is ready to be put out there. If I sit on it any longer, I am pretty sure I would lose interest in it pretty soon. As they say, &lt;a href="http://www.codinghorror.com/blog/2009/12/version-1-sucks-but-ship-it-anyway.html"&gt;ship early, ship often&lt;/a&gt;. Maybe this shouldn&amp;#8217;t even be a version 1, but it is a&amp;nbsp;start.&lt;/p&gt;</content><category term="personal"></category></entry><entry><title>Made Another Design For the¬†Blog</title><link href="http://hndr.me/blog/made-another-design-for-the-blog" rel="alternate"></link><published>2013-04-10T09:02:00+08:00</published><updated>2013-04-10T09:02:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-10:/blog/made-another-design-for-the-blog</id><summary type="html">&lt;p&gt;Recently I have been spending my time messing around with website front-end development. Probably because ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I have been spending my time messing around with website front-end development. Probably because of I have been trying to write a Pelican theme for my own website. For My own use, I wanted the website to have a landing page, and also another design for the blog index. I made another attempt at the design recently. Here is the landing&amp;nbsp;page:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8636534196/" title="Screenshot (69) by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8254/8636534196_ac410cec50_c.jpg" width="800" height="414" alt="Screenshot (69)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and here is the blog&amp;nbsp;index:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8636534164/" title="Screenshot (70) by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8519/8636534164_497989410e_c.jpg" width="800" height="415" alt="Screenshot (70)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also managed to made the design responsive. Kind of. I just made the sidebar go to the top of the page when the window is resized to below 800 pixels of&amp;nbsp;width.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8635873575/" title="Snap 2013-04-10 at 12.49.21 by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8248/8635873575_153dd6e05e_b.jpg" width="317" height="1024" alt="Snap 2013-04-10 at 12.49.21"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The design itself is currently still a static &lt;span class="caps"&gt;HTML&lt;/span&gt; page that I made on top of the pretty cool &lt;a href="http://html5boilerplate.com/"&gt;&lt;span class="caps"&gt;HTML5&lt;/span&gt; Bootstrap&lt;/a&gt;. For some reason I got a feeling that I am not using it to its full potential, as I don&amp;#8217;t really utilizes anything from it beyond the basic page structure and the included &lt;code&gt;normalize.css&lt;/code&gt;. Obviously I am doing something wrong. One thing that I notice in the main &lt;span class="caps"&gt;CSS&lt;/span&gt; file is this&amp;nbsp;line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;media&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;35em&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I knew about the media query and used it before, but I used to use it with the &lt;code&gt;max-width&lt;/code&gt; instead. So, the idea here is to design for the mobile version first, then make the necessary changes for the larger screen. I have heard about this mobile-first approach a lot before, and I am aware of the arguements for and against it, but I never really gave it any thought, mostly because I am not doing any serious front-end stuff anyway, but I am thinking of trying this approach for my next try on web&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;I am also planning to play around more with front-end development. The past few days trying to make the &lt;span class="caps"&gt;HTML&lt;/span&gt; page to look exactly how I want it to look like made me realize that I don&amp;#8217;t really know much about front-end development. Most of the time, web-development for me consists of dealing with generating &lt;span class="caps"&gt;HTML&lt;/span&gt; page from the server and maybe make a Javascript function to make a server call to change the page dynamically, but I never really go deep into &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt; itself. Looking into more than tools and frameworks that I can use to make the job&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;Anyway, as mentioned before, the designs above are still in a static &lt;span class="caps"&gt;HTML&lt;/span&gt; form, and I think it is good enough for me to use. Maybe I&amp;#8217;ll turn it into a proper Pelican theme&amp;nbsp;soon.&lt;/p&gt;</content><category term="programming"></category><category term="design"></category></entry><entry><title>Still¬†Working</title><link href="http://hndr.me/blog/still-working" rel="alternate"></link><published>2013-04-03T17:16:00+08:00</published><updated>2013-04-03T17:16:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-03:/blog/still-working</id><summary type="html">&lt;p&gt;It has been a few weeks since I decided to start blogging again, but well ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;It has been a few weeks since I decided to start blogging again, but well, as usual not much has been done on it. For starter, I initially planned to host it on Heroku, following the tricks outline &lt;a href="http://kennethreitz.org/exposures/static-sites-on-heroku-cedar"&gt;here&lt;/a&gt;, and it is super simple to setup. I had created a new Heroku app, generated the blog, and pushed the generated content to Heroku in just a few minutes. In another minute, and I had setup the custom domain and had everything working&amp;nbsp;nicely.&lt;/p&gt;
&lt;p&gt;Problem is, even though the site itself is just a bunch of static files, the first time I visited the site, it took a few seconds to load the content, but when I visit it again for the second time, it served the site almost immediately. At first, I thought it was because of the site is cached by the browser, so it loads much quicker, but even when I cleared the browser cache, it still loads the same way. After a bit of googling, I &lt;a href="https://devcenter.heroku.com/articles/dynos"&gt;found&lt;/a&gt; out that Heroku will turn off the dyno after an hour of inactivity, so everytime I visit the site after a period of idling, the dyno will need to be started again at that time. Not much of a problem, considering I am not even paying for the amazing service that Heroku provide, and there &lt;a href="http://stackoverflow.com/questions/5480337/easy-way-to-prevent-heroku-idling"&gt;ways&lt;/a&gt; to get around it anyway. I probably won&amp;#8217;t be using it, since I am still playing around with the hosting options around&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Other popular service that people use to host their static site seems to be &lt;a href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt;. After looking around on how to set it up, seems like it is pretty easy to set it up. The Pelican makefile even includes a build option for this setup. The site will be hosted in a repository just like any other git repo, but the site index will need to be on the &lt;code&gt;gh-pages&lt;/code&gt; branch. In other words, the content of the site will be open source. Not a problem though, since any webpage that are publicly accessible are basically open source anyway. Maybe I&amp;#8217;ll move the site here after I am done setting the website&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;On building the site itself, I just converted some of my old wordpress posts to Markdown, which should be published along with this post. The automatic converter doesn&amp;#8217;t work too well, since many of posts contains some really badly formed markups, so I ended up manually converting the most of posts. I also took the chance to just remove many of the rants/silly posts, not saying that there aren&amp;#8217;t any silly posts left&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;I am still playing around with the pelican configurations and options, on how to setup different static pages, building a theme, etc. Speaking about the theme, I drafted a theme of my&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8615163439/" title="Snap 2013-04-01 at 11.50.50 by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8394/8615163439_30ea63f405_c.jpg" width="800" height="788" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Initially I liked it quite a bit, but after leaving it there for a few days, when I came back to work on it again, I found it to be not very attractive anymore. So, no need to say, I scrapped it, and started working from scratch. This time, planning the overall sites, starting from the landing page, static pages, comments, and of course the blog itself. Of course, it won&amp;#8217;t be around anytime soon. For the time being, the default Pelican theme seems more than good enough for&amp;nbsp;me.&lt;/p&gt;</content><category term="personal"></category></entry><entry><title>Hello,¬†Pelican</title><link href="http://hndr.me/blog/hello_pelican" rel="alternate"></link><published>2013-03-15T13:19:00+08:00</published><updated>2013-03-15T13:19:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-03-15:/blog/hello_pelican</id><summary type="html">&lt;p&gt;Well, it has been a while since I posted anything or do anything with my ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, it has been a while since I posted anything or do anything with my website for that matter. I think I haven&amp;#8217;t posted anything since I moved to wordpress.com, but well, its time to start playing&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;So, again, I moved almost everything. Hosting, domain, and also the blogging platform. I have been wanting to try out some of the static site generator for a while now. The most popular one seems to be &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;. It is built on Ruby, and seems like a lot of people are using it. Problem is, it is kind of a pain to setup on Windows, and I wanted to be able to built things for it, or at least my own theme for my blog, and my knowledge of Ruby doesn&amp;#8217;t go too far beyond the Hello World. So I continued my search, this time, specifically looking for a static site generator built on something that I can program in, maybe it is C#, Javascript, &lt;span class="caps"&gt;PHP&lt;/span&gt;, or of course&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;And indeed I found quite a lot of awesome projects for Python. The most famous one seems to be &lt;a href="https://github.com/hyde/hyde"&gt;Hyde&lt;/a&gt;. One problem though, the documentation seems to be severely lacking. I went through the website for almost an hour, and I barely have any idea on how to use and customize it. Maybe I&amp;#8217;ll take another look at it when my Python skills have&amp;nbsp;improved.&lt;/p&gt;
&lt;p&gt;Then, I found &lt;a href="http:///www.github.com/getpelican"&gt;Pelican&lt;/a&gt;. It is also written in Python, and it&amp;#8217;s &lt;a href="http://docs.getpelican.com"&gt;documentation&lt;/a&gt; is just delightful. It shows you how to get started easily, and also how to customized it as needed. Simply awesome. It is also super easy to setup. There is also a Make configuration file that can be used to automate a bunch of stuffs, but the basic commands are easy enough to use. There is a also a script to import data from other blogging platforms, which maybe I&amp;#8217;ll take a look at&amp;nbsp;later.&lt;/p&gt;</content></entry><entry><title>Some XAML Syntax to¬†Remember</title><link href="http://hndr.me/blog/some-xaml-syntax-to-remember" rel="alternate"></link><published>2012-08-14T14:17:00+08:00</published><updated>2012-08-14T14:17:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-08-14:/blog/some-xaml-syntax-to-remember</id><summary type="html">&lt;p&gt;After developing for &lt;span class="caps"&gt;WPF&lt;/span&gt;/ Silverlight for a while, most people will be
familiar with using ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;After developing for &lt;span class="caps"&gt;WPF&lt;/span&gt;/ Silverlight for a while, most people will be
familiar with using &lt;span class="caps"&gt;XAML&lt;/span&gt; to declare &lt;span class="caps"&gt;UI&lt;/span&gt; elements, but even though I have
been comfortable with &lt;span class="caps"&gt;XAML&lt;/span&gt; for quite a while, I don‚Äôt really know what
is going on behind the stage. Reading Programming Windows by Charles
Petzold shed some lights on it for me, so this post is here again so
that I won‚Äôt&amp;nbsp;forget.&lt;/p&gt;
&lt;p&gt;One important thing I didn&amp;#8217;t know before is that &lt;span class="caps"&gt;XAML&lt;/span&gt; file more or less is just
another way to express the C# code, and the &lt;span class="caps"&gt;XAML&lt;/span&gt; elements in it are
actually .&lt;span class="caps"&gt;NET&lt;/span&gt; objects, and anything that can be declared in &lt;span class="caps"&gt;XAML&lt;/span&gt; can be
done in C# as well. Most page consists of two files, a &lt;code&gt;.xaml&lt;/code&gt; file and a
&lt;code&gt;.xaml.cs&lt;/code&gt; file, as the partial keyword in the C# file suggest, the
&lt;code&gt;.xaml.cs&lt;/code&gt; file only consist a part of the class declaration. As we can
guess, the rest are declared in the &lt;span class="caps"&gt;XAML&lt;/span&gt; file. If we look at the
&lt;code&gt;obj/Debug&lt;/code&gt; folder of the Project, we can see there are several files with
the name of &lt;code&gt;PageName.g.cs&lt;/code&gt; and &lt;code&gt;PageName.g.i.cs&lt;/code&gt;. During compile time, the
&lt;span class="caps"&gt;XAML&lt;/span&gt; file is parsed to get the elements and other information declared
in it to generate the intermediate C# file, which will then be compiled
together with our &lt;code&gt;.xaml.cs&lt;/code&gt; file to generate the class declaration for a
particular page. In the &lt;code&gt;PageName.g.i.cs&lt;/code&gt; file, we can actually see the
declaration for the &lt;code&gt;InitializeComponent&lt;/code&gt; method that we always call in
the constructor of our &lt;code&gt;.xaml.cs&lt;/code&gt; file. The method basically initiates all
objects declared in the &lt;span class="caps"&gt;XAML&lt;/span&gt; file, which is why if we try to get to
access an element declared in the &lt;span class="caps"&gt;XAML&lt;/span&gt; before the method is called, we
would get a &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That‚Äôs enough for the backstage stuff, lets move on to the syntax. Most
&lt;span class="caps"&gt;XAML&lt;/span&gt; pages looks similar to&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Page&lt;/span&gt;
    &lt;span class="na"&gt;x:Class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;App2.MainPage&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;IsTabStop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:local=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;using:App2&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:d=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/expression/blend/2008&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:mc=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;mc:Ignorable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class="na"&gt;Background=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{StaticResource ApplicationPageBackgroundThemeBrush}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Page&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As mentioned before, a &lt;span class="caps"&gt;XAML&lt;/span&gt; declaration can be expressed in C#, since
the elements in &lt;span class="caps"&gt;XAML&lt;/span&gt; file are .&lt;span class="caps"&gt;NET&lt;/span&gt; objects. The Page declaration above
basically declare an instance of &lt;code&gt;MainPage&lt;/code&gt; in the &lt;code&gt;App2&lt;/code&gt; namespace which is
a subclass from the &lt;code&gt;Page&lt;/code&gt; class. The &lt;code&gt;xmlns&lt;/code&gt; statements are standard xml
namespace inclusion which would allows us to use various elements.
Similarly, with these&amp;nbsp;declaration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Page&lt;/span&gt;
    &lt;span class="na"&gt;x:Class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;App2.MainPage&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;IsTabStop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:local=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;using:App2&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:d=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/expression/blend/2008&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:mc=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;mc:Ignorable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class="na"&gt;Background=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CadetBlue&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;FontSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;96&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;Foreground=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BlanchedAlmond&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Center&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;VerticalAlignment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Center&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Page&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same result can be produced with these C#&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Grid&lt;/span&gt; &lt;span class="n"&gt;contentGrid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Background&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SolidColorBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CadetBlue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;TextBlock&lt;/span&gt; &lt;span class="n"&gt;txtBlk&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextBlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;FontSize&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Foreground&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SolidColorBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlanchedAlmond&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;HorizontalAlignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;VerticalAlignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;contentGrid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txtBlk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contentGrid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we can see, the &lt;span class="caps"&gt;XAML&lt;/span&gt; element properties are just another way to set
the values of the member variables of the objects. As we can see on the
C# code above, the the Foreground property of a TextBlock is of type
&lt;code&gt;SolidColorBrush&lt;/code&gt; (or any subclass of the &lt;code&gt;Brush&lt;/code&gt; class actually), but in
the &lt;span class="caps"&gt;XAML&lt;/span&gt; syntax, it seems like we are assigning a string to it. This is
because the compiler will parse and assign the appropriate attribute for&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;XAML&lt;/span&gt; code above shows two ways of setting a property of an &lt;span class="caps"&gt;XAML&lt;/span&gt;
element, namely the usual property attributes syntax, and the other one
is one known as the Property Element syntax. The property-element syntax
can be used to define some more complex attributes such as defining a
gradient background that requires defining more than one colours and
points. For example, the &lt;code&gt;TextBlock&lt;/code&gt; above can be defined as such with the
property-element&amp;nbsp;syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;TextBlock&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.Foreground&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;SolidColorBrush&amp;gt;&lt;/span&gt;
            Black
        &lt;span class="nt"&gt;&amp;lt;/SolidColorBrush&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.Foreground&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.Text&amp;gt;&lt;/span&gt;
        Hello
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.Text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.FontSize&amp;gt;&lt;/span&gt;
        96
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.FontSize&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.HorizontalAlignment&amp;gt;&lt;/span&gt;
        Center
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.HorizontalAlignment&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.VerticalAlignment&amp;gt;&lt;/span&gt;
        Center
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.VerticalAlignment&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we see that we defined the properties of the &lt;code&gt;TextBlock&lt;/code&gt; by creating
another elements for each of them, and on for the Foreground property,
we explicitly defined a &lt;code&gt;SolidColorBrush&lt;/code&gt; as the value of the property.
This is entirely optional, we can put the value inside the &lt;code&gt;Foreground&lt;/code&gt;
tag and it would still work, just like we did with the other properties.
We don‚Äôt need to explicitly create a element of type &lt;code&gt;Double&lt;/code&gt; for the
&lt;code&gt;FontSize&lt;/code&gt;, nor we need to create another elements for the enumeration of
the alignment properties. We are still relying on the compiler to
actually recognize that the &lt;code&gt;Black&lt;/code&gt; inside the tag is actually referring
to the colour enumeration, but there are times where would need to
explicitly define the property with the usual property-attributes&amp;nbsp;syntax.&lt;/p&gt;
&lt;p&gt;In the previous example, we explicitly define what are the properties
and its value, but as we see on most &lt;span class="caps"&gt;XAML&lt;/span&gt; we see, there are many cases
where we don‚Äôt do that. For example, we didn‚Äôt explicitly define the
&lt;code&gt;rootGrid&lt;/code&gt; element of our page is the value for the Content property of
the page, nor we need to explicitly define that our &lt;code&gt;TextBlock&lt;/code&gt; is a
member of the &lt;code&gt;Children&lt;/code&gt; property of the &lt;code&gt;Grid&lt;/code&gt;. This is because every
classes referenced in &lt;span class="caps"&gt;XAML&lt;/span&gt; can have one and only one property that is
defined as its &lt;code&gt;ContentProperty&lt;/code&gt;, where for these properties, the property
element tags are not required. So, instead of&amp;nbsp;writing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Page&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Page.Content&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;Grid.Children&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/Grid.Children&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Page.Content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Page&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can simply&amp;nbsp;write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Page&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Page&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it would produce the same result. For the same reason, we can use
the same thing to define the &lt;code&gt;Text&lt;/code&gt; property of a &lt;code&gt;TextBlock&lt;/code&gt; without
creating property element tag for it,&amp;nbsp;So,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Is the same as: --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;TextBlock&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.Text&amp;gt;&lt;/span&gt;
        Hello
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.Text&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- and --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;TextBlock&amp;gt;&lt;/span&gt;
    Hello
&lt;span class="nt"&gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I guess thats enough for now. Learning about all this made me realise
that &lt;span class="caps"&gt;XAML&lt;/span&gt; is a very flexible and powerful language and can
be used for many things that can be done with C#, so knowing it would hopefully
be very useful in developing for the some of the latest Microsoft platforms (Win 8, &lt;span class="caps"&gt;WP&lt;/span&gt; 8, etc).
But of course, it is still a markup language, and it has several limitations,
such as lack of logic processing, and inability to create instances of objects that requires
parameters in its&amp;nbsp;contructor.&lt;/p&gt;</content><category term="programming"></category><category term="xaml"></category><category term="c#"></category></entry><entry><title>I Bought a Xperia¬†Sola</title><link href="http://hndr.me/blog/i-bought-a-xperia-sola" rel="alternate"></link><published>2012-07-12T17:40:00+08:00</published><updated>2012-07-12T17:40:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-07-12:/blog/i-bought-a-xperia-sola</id><summary type="html">&lt;p&gt;I bought a new&amp;nbsp;phone.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Xperia Sola" src="http://api.sonymobile.com/files/xperia-sola-black-464x515.png"&gt;&lt;/p&gt;
&lt;p&gt;Few days ago, I bought a new phone, &lt;a href="http://www.sonymobile.com/global-en/products/phones/xperia-sola/"&gt;Sony Xperia Sola&lt;/a&gt;. Yes, its an
Android phone. The Lumia phones are simply fucked up, no upgrade path to
&lt;span class="caps"&gt;WP8&lt;/span&gt;, and the price that for some reason aren‚Äôt going down, I simply
can‚Äôt objectively spend my money on it. In addition, without even any
news of when the new Windows Phone 8 are coming out and their price, I
don‚Äôt think I can wait. This doesn‚Äôt mean that I will stop developing
for &lt;span class="caps"&gt;WP&lt;/span&gt;, I might buy one for development purpose if they offer a solid
phone at a reasonable price when &lt;span class="caps"&gt;WP8&lt;/span&gt; comes out, but then again, without
any news on the new development platform either, it doesn‚Äôt mean I will
continue developing for &lt;span class="caps"&gt;WP&lt;/span&gt;&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;Well, enough about &lt;span class="caps"&gt;WP&lt;/span&gt;, lets talk about the new phone instead. The reason
for me choosing this phone is of course, the price-value ratio. It has a
dual-core &lt;span class="caps"&gt;CPU&lt;/span&gt;, &lt;span class="caps"&gt;SD&lt;/span&gt; card slot, &lt;span class="caps"&gt;NFC&lt;/span&gt;, and even a promise of &lt;span class="caps"&gt;ICS&lt;/span&gt; upgrade by
Sony. I also considered other options such as &lt;span class="caps"&gt;HTC&lt;/span&gt; One V and Samsung
Galaxy S Advance, but after pondering about all kinds of stuff, I
decided that the Xperia Sola is the best option after all. Now I can
play with Android without dealing with the &lt;span class="caps"&gt;PITA&lt;/span&gt; emulator that is
included with the &lt;span class="caps"&gt;SDK&lt;/span&gt;. The screen is pretty bright and clear, and the
loudspeaker are also pretty loud. It also came with 4 &lt;span class="caps"&gt;NFC&lt;/span&gt; tags that I
can play&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;Using Android is pretty fun. Most of the essential apps out there are
available for Android, and I can almost do most things that I do on a &lt;span class="caps"&gt;PC&lt;/span&gt;
with my phone. I installed several reading apps, such as &lt;a href="https://play.google.com/store/apps/details?id=com.aldiko.android&amp;amp;feature=search_result"&gt;Aldiko&lt;/a&gt;,
&lt;a href="https://play.google.com/store/apps/details?id=flipboard.app&amp;amp;feature=search_result"&gt;Flipboard&lt;/a&gt;, and several others. The email client is also pretty
awesome. Other than that, I still need to get used to the on-screen
keyboard, but I think it will be manageable. Although it seems like the
power of Android is also its weak points, in less than a day of using
the phone, I had several apps crash and freezes for no reason, only
cause I can think of is because the many process it is running at once,
which also causes the battery life to be quite&amp;nbsp;short.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/7554965796/" title="IMG_0007 by p.hdra, on Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7254/7554965796_574e699c83_b.jpg" width="933" height="622" alt="IMG_0007"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well, that‚Äôs all for now, I am looking forward to discovering more of
this&amp;nbsp;phone.&lt;/p&gt;</content><category term="android"></category><category term="phone"></category><category term="xperia sola"></category></entry><entry><title>End of¬†Internship</title><link href="http://hndr.me/blog/end-of-internship" rel="alternate"></link><published>2012-07-07T16:35:00+08:00</published><updated>2012-07-07T16:35:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-07-07:/blog/end-of-internship</id><summary type="html">&lt;p&gt;Yesterday was the last day of my internship at Terato Tech, 20 weeks has
passed ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday was the last day of my internship at Terato Tech, 20 weeks has
passed by so quickly. I had a lot of fun, learned a lot of new stuffs,
and last but not least, met a lot of interesting&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;I had to leave the project I was working on, and that is a little bit
sad, but I hope I can at least tie up some of the loose ends before I
stop working on it to move on the next project. There are many things
that I wished I had done better, I wish that I actually write a proper
framework for¬† the game instead of just writing a bunch of messy codes,
but I hope the code that I wrote won‚Äôt cause too much&amp;nbsp;trouble.&lt;/p&gt;
&lt;p&gt;So, well, all in all, I enjoyed my internship very much, and I am very
grateful for the company for having me. Thank you&amp;nbsp;Terato.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/7559541998/" title="IMG_20120705_230845 by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8294/7559541998_b7f235f911_b.jpg" width="1024" height="768" alt="IMG_20120705_230845"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would have to go back to &lt;span class="caps"&gt;UTM&lt;/span&gt; to wait for my visa to be ready before I
go back, so well, we‚Äôll&amp;nbsp;see.&lt;/p&gt;</content><category term="internship"></category></entry><entry><title>Blocking Time Sucking¬†Sites</title><link href="http://hndr.me/blog/blocking-time-sucking-sites" rel="alternate"></link><published>2012-06-26T23:25:00+08:00</published><updated>2012-06-26T23:25:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-06-26:/blog/blocking-time-sucking-sites</id><summary type="html">&lt;p&gt;This is just one thing that I do, and it involves some editing on a ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is just one thing that I do, and it involves some editing on a
system file, so do it on your own risk. Alright, so one thing that I do to avoid wasting too much time on a
&lt;a href="http://www.9gag.com"&gt;just-for-fun&lt;/a&gt; site, is to completely block it on my &lt;span class="caps"&gt;OS&lt;/span&gt;. Of course, I
can still easily unblock it, but since I am very lazy, most of the time
I simply won‚Äôt bother doing&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Ok, the way I do this is by editing the host file on my &lt;span class="caps"&gt;OS&lt;/span&gt;, and point
the domain name of the website that I wanted to stop visiting to the
localhost, which unless I am running a web server at the time, will
simply point to&amp;nbsp;nothing.&lt;/p&gt;
&lt;p&gt;On Windows, the hosts file is located at
&lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt;. Open up that file, and you should
see some description of the file, and an example of the host entry for
the localhost, which points to 127.0.0.1. The format for the host file
is like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Destination to route to&amp;gt; &amp;lt;Url that you want toroute&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, for example, in my hosts file, I have this&amp;nbsp;line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1 www.9gag.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, whenever I enter &lt;code&gt;www.9gag.com&lt;/code&gt;
to my browser, I would get routed to my localhost. Simple&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;On Linux, the steps are the same, the hosts file is located at
&lt;code&gt;/etc/hosts&lt;/code&gt;. The format are the same as it is on&amp;nbsp;Windows.&lt;/p&gt;
&lt;p&gt;Note that to edit these files, you need to have administrator or root
access on the&amp;nbsp;&lt;span class="caps"&gt;OS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If you don‚Äôt want to edit individual hosts file on every computer you
own, an alternative is to use a service such as &lt;code&gt;OpenDNS&lt;/code&gt;_. You can
register for an account, customize the filtering, and simply configure
the internet access on your computer to use the service. That‚Äôs all for&amp;nbsp;now.&lt;/p&gt;</content><category term="hosts"></category></entry><entry><title>Windows Phone 8, WinRT, and so¬†on.</title><link href="http://hndr.me/blog/windows-phone-8-winrt-and-so-on" rel="alternate"></link><published>2012-06-24T13:01:00+08:00</published><updated>2012-06-24T13:01:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-06-24:/blog/windows-phone-8-winrt-and-so-on</id><summary type="html">&lt;p&gt;Some thoughts on the new announcement regarding Windows&amp;nbsp;Phone.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is basically a rant.&amp;nbsp;&lt;span class="caps"&gt;TLDR&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;AWESOME&lt;/span&gt;: &lt;span class="caps"&gt;WP8&lt;/span&gt; is awesome! Native code support, multicore processors,
simply&amp;nbsp;awesome!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;LAME&lt;/span&gt;: Current &lt;span class="caps"&gt;WP7&lt;/span&gt; devices just got screwed. No clear date on release
data, no clear information on development model for the new&amp;nbsp;&lt;span class="caps"&gt;OS&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, it‚Äôs a bit late for a blog post, but I just got the time to write
about it, so here it goes, the Windows Phone 8 announcement thoughts.
Few days ago, on the 20th (or 21st here where I live), Microsoft finally
unveiled the game plan for Windows Phone with Windows Phone 8. I myself
followed the announcement live in the middle of night here, and well,
overall, I have mixed feelings about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Windows Phone 8 Start Screen" src="http://windowsteamblog.com/cfs-filesystemfile.ashx/__key/CommunityServer-Blogs-Components-WeblogFiles/00-00-00-53-71-metablogapi/4477.StartScreen_5F00_Dave22_5F00_630D4973.png"&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs start with the awesome and exciting stuff. Windows Phone
8 is going to be &lt;span class="caps"&gt;AWESOME&lt;/span&gt;. Really. To be honest I didn‚Äôt think Windows
Phone 7 is a full fledged phone &lt;span class="caps"&gt;OS&lt;/span&gt;. I love it, but to be honest, it has
too many flaws that would make me wouldn‚Äôt even consider it as my main
phone &lt;span class="caps"&gt;OS&lt;/span&gt; if it weren‚Äôt for it being so beautiful. From the lack of basic
phone features such as &lt;span class="caps"&gt;USSD&lt;/span&gt; support to native code support, it even has
some really stupid flaw such as the inability to separate music volume
control from alert volume. &lt;a href="http://windowsteamblog.com/windows_phone/b/windowsphone/archive/2012/06/20/announcing-windows-phone-8.aspx"&gt;Windows Phone 8&lt;/a&gt; is a break that would
allows Windows Phone to actually compete with iOS and Android on an even
level. One thing that excite me the most is that it will allow
developers to run native C and C++ codes on it, this will open up
Windows Phone 8 to some really awesome apps that can‚Äôt exist on WIndows
Phone 7 because of its restrictions, from the many popular game engines
such as Unity and &lt;span class="caps"&gt;UDK&lt;/span&gt;, and it also allows developers to actually develop
its own DirectX based games. This is one &lt;span class="caps"&gt;BIG&lt;/span&gt;&amp;nbsp;plus.&lt;/p&gt;
&lt;p&gt;Other awesome stuffs includes multicore-support, Nokia maps integration,
&lt;span class="caps"&gt;NFC&lt;/span&gt; support, and &lt;span class="caps"&gt;SD&lt;/span&gt;-card support. These are mostly end-user features
that is pretty awesome as well, but it would also allows developers to
take advantage of these capabilities for more variety of&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;Now, lets move on to the bad thing. One really really &lt;span class="caps"&gt;BAD&lt;/span&gt; thing &lt;span class="caps"&gt;IMO&lt;/span&gt;, the
current Windows Phone 7 devices will not be able to receive upgrades to
Windows Phone 8. In other words, the new applications that take
advantage of the new Windows Phone 8 native code support will not be
able to run on the current devices. Needless to say, I immediately
canceled my plan to buy a Lumia, and I believe I am not the only one to
do this, nobody would spend money to actually buy a phone that is
essentially dead. Yes, they just killed Windows Phone 7 and the existing
devices running it. This really bummed me. It makes me feels like being
cheated on, they made people to develop for it, and then they just
killed the platform. Yes, the current Windows Phone 7 applications will
still run on the next Windows Phone 8, but with the next version of
Windows Phone 8 being built on a completely different architecture, I
don‚Äôt think it is possible to just run the application like that.
Actually, this change doesn‚Äôt really matter from a developer‚Äôs
perspective, but developers are developing for the users, and with
Windows Phone 7 itself is a reboot from the Windows Mobile, its hard for
me to feel I am not wasting my time developing for Windows Phone 8 which
is another reboot from Windows Phone 8. To make things worse, there is
not words on the development tools on Windows Phone 8 yet. One of the
things that Microsoft emphasized was that the Windows Phone 8 will share
a lot of code with Windows 8, but it seems like its not that simple. The
&lt;a href="http://wildermuth.com/2012/6/22/Windows_Phone_8_-_What_do_I_think"&gt;blog post here&lt;/a&gt; sums it up pretty nicely. With a lot of things being
so unclear here, I doubt people will feel like developing for Windows
Phone 8 for&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;The consolation that they offer to the current Windows Phone device
owners are the intermediate Windows Phone 7.8 update that says will
bring new features from the Windows Phone 8. But with the lack of native
code support, I don‚Äôt think that will make much change anyway. The only
thing they promise in the Windows Phone 7.8 update is the new
homescreen, which allows for new size and colors for the live tiles,
which I personally think sucks anyway. It makes the homescreen too messy
for my&amp;nbsp;taste.&lt;/p&gt;
&lt;p&gt;Other new features that I am not too sure about it the new screen
resolutions support. Windows Phone 8 will support two new screen
resolutions, 1280x768 and 1280x720, which is cool, except that why do
they have to make it in a different aspect ratio?? &lt;span class="caps"&gt;WHY&lt;/span&gt;??. Another thing
is, in-app purchase support. Cool, except that even the Windows Phone
marketplace is not even available where I live yet. So, its meaningless
to&amp;nbsp;me.&lt;/p&gt;</content><category term="rants"></category><category term="windows phone"></category><category term="wp7"></category><category term="wp8"></category></entry><entry><title>Data Binding in¬†.NET</title><link href="http://hndr.me/blog/data-binding-in-net" rel="alternate"></link><published>2012-06-10T10:37:00+08:00</published><updated>2012-06-10T10:37:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-06-10:/blog/data-binding-in-net</id><summary type="html">&lt;p&gt;I am now trying to use the concept of &lt;span class="caps"&gt;MVVM&lt;/span&gt; in my applications, as I ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am now trying to use the concept of &lt;span class="caps"&gt;MVVM&lt;/span&gt; in my applications, as I
believe a proper separation of concerns is very important in building an
application, as from I personally experienced when developing in &lt;span class="caps"&gt;PHP&lt;/span&gt;
with CodeIgniter, it really makes development much&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;So, I think for an event driven application pattern such as &lt;span class="caps"&gt;WPF&lt;/span&gt;,
Silverlight, and also &lt;span class="caps"&gt;WP7&lt;/span&gt;, (maybe Windows 8 as well), it seems pretty
obvious to take advantage of the existing abstraction of the framework,
so &lt;span class="caps"&gt;MVVM&lt;/span&gt; would go well with these kind of&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;I can understand the concept of the &lt;a href="http://msdn.microsoft.com/en-us/magazine/dd419663.aspx"&gt;&lt;span class="caps"&gt;MVVM&lt;/span&gt; pattern&lt;/a&gt; itself quite well,
but I am not really able to grasp its implementation, I think it is
because I don&amp;#8217;t really understand the basic features of the framework
that the pattern rely on. One of which is the Data Binding. So, here it
is, my attempt to get better understanding on&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding Name}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;while in the code&amp;nbsp;behind,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;PhoneApp1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhoneApplicationPage&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is one problem with this, when the value of the data source
changes, the binding target on the &lt;span class="caps"&gt;UI&lt;/span&gt; won‚Äôt change along with it, so, to
make the value of the binding target change along with the data source,
we need to have our class implement &lt;code&gt;INotifyPropertyChanged&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let‚Äôs add a button that will change the value of the data&amp;nbsp;source.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding name}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="na"&gt;Content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button1_Click&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And change the code behind&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;PhoneApp1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhoneApplicationPage&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Constructor&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;button1_Click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoutedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INotifyPropertyChanged&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventHandler&lt;/span&gt; &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PropertyChanged&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, every time we click on the button, the value of the name property
will change, and the &lt;code&gt;TextBlock&lt;/code&gt; will change its content&amp;nbsp;accordingly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;INotifyPropertyChanged&lt;/code&gt; interface exposes the &lt;code&gt;PropertyChanged&lt;/code&gt; event,
where we would raise when the value of the data is changed, and there
are the event handler present. One might ask, why? It is because when
the class is being used as a data source in a binding, the binding
target will subscribe to the event, and call the necessary method to
update the&amp;nbsp;view.&lt;/p&gt;
&lt;p&gt;There are several modes of binding, the default is &lt;code&gt;OneWay&lt;/code&gt;, which is a
binding from the data source to the target, where any changes on the
data source will be propagated to the target, but not vice versa,
another mode is &lt;code&gt;TwoWay&lt;/code&gt;, which is pretty much self descriptive, and also
&lt;code&gt;OneTime&lt;/code&gt;, which only set the data when the binding is created. So, if we
add this textbox to the previous&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;TextBox&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding name,Mode=TwoWay}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever the value of the textbox is changed, the textblock that is
bound to the same data source will update its value accordingly. Note
that we would still need to implement &lt;code&gt;INotifyPropertyChanged&lt;/code&gt; for the
view to update as the value changes. We can specify what triggers the
update back to the source via the &lt;code&gt;UpdateSourceTrigger&lt;/code&gt; property. Its
values depends on the dependency properties of the target, on the
example textbox above, the default trigger is &lt;code&gt;LostFocus&lt;/code&gt;, so the data
source will be notified of the new value when the textbox has lost its
focus. We can also trigger the update manually by setting the property
to &lt;code&gt;Explicit&lt;/code&gt;, which will only update the value when the application calls
&lt;code&gt;UpdateSource&lt;/code&gt;, e.g. when the user clicks on a&amp;nbsp;button.&lt;/p&gt;
&lt;p&gt;There are several &lt;a href="http://msdn.microsoft.com/en-us/library/ms746695.aspx"&gt;ways&lt;/a&gt; to specify a binding source, the examples
above specified the data source by setting the &lt;code&gt;DataContext&lt;/code&gt; property of
the current page from the code behind. The child elements within the
page inherit the &lt;code&gt;DataContext&lt;/code&gt; from its parent, we can see that this
method is very convenient when we have a single data source that we use
across the page. We can also set the &lt;code&gt;DataContext&lt;/code&gt; property directly on
the element directly, instead of inheriting it from its parent. To
specify the data source for an element individually, one of the is by
setting the Source property of the element, by setting the Source
property, the data will be able to get the data from the source that it
specify without depending on the data source of its parent element.
Other options are &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding.relativesource.aspx"&gt;RelativeSource&lt;/a&gt;, which is used to specify the data
source relative to the target, and &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding.elementname.aspx"&gt;ElementName&lt;/a&gt; which is useful if you
want to bind to another element in your view, e.g. binding the height of
an element to a textbox&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;The examples above shows binding among data source and target of the
same data type, e.g. string to string, but there are times where we may
want to bind a source of a different data type, for example, binding the
background colour of an element to an hexadecimal value, or displaying
the same date in several different format. One way would be to create an
additional property with a getter that gets its value from the source,
but that isn‚Äôt a very good way, for one thing, two-way binding and
property changed notification got more complicated than it should be.
One solution is to use the &lt;code&gt;ValueConverter&lt;/code&gt;, which is creating a custom
class that implements the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter.aspx"&gt;IValueConverter&lt;/a&gt; interface. I won‚Äôt talk
about it too much in this post, maybe in some other post, you can read
more about it on that link. .&lt;span class="caps"&gt;NET&lt;/span&gt; Framework also provide a number of
converter that we can&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;So far, the examples shows only binding to a single data type, but we
often need to bind to a collection, for example, binding a listbox to a
list of person. To implement a collection, we can use one of the generic
collection classes, such as, &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Collection&amp;lt;T&amp;gt;&lt;/code&gt; and others. We can
also implement a custom collection by implementing the &lt;code&gt;IEnumerable&lt;/code&gt;
interface, but to enable automatic &lt;span class="caps"&gt;UI&lt;/span&gt; update on change, we need a way to
provide notification on data changes, just as we did with the single
instance data source. To do that, the collection need to implement the
&lt;a href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.inotifycollectionchanged.aspx"&gt;INotifyPropertyChanged&lt;/a&gt; interface,
but it is recommended to use the class provided by the .&lt;span class="caps"&gt;NET&lt;/span&gt; Framework
which did the job for us, the &lt;code&gt;ObservabeCollection&amp;lt;T&amp;gt;&lt;/code&gt; class. Let‚Äôs change
the previous example to show a little bit of collection binding. Lets
add a listbox to the our&amp;nbsp;application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ListBox&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;listBox1&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;ItemsSource=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding colls}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let‚Äôs change the &lt;code&gt;MyClass&lt;/code&gt; a little bit, and change the previous
button click handler to add more element to the&amp;nbsp;collection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;PhoneApp1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhoneApplicationPage&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Constructor&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colls&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObservableCollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;button1_Click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoutedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INotifyPropertyChanged&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ObservableCollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;colls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventHandler&lt;/span&gt; &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PropertyChanged&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, whenever we click the button, a new string will be added to the
collection, and the listbox content will reflect the changes as well
because of the &lt;code&gt;INotifyCollectionChanged&lt;/code&gt; that is implemented by the
&lt;code&gt;ObservableCollection&lt;/code&gt;. Note that to detect when the value of individual
element change, we still need to implement &lt;code&gt;INotifyPropertyChanged&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, when we are working with a collection of data, often we need to
filter, sort and group the data based on the current context of the
application, to do that without changing the underlying data source, we
can use collections view. I wouldn‚Äôt talk much about it in this post,
but more information about it are available &lt;a href="http://msdn.microsoft.com/en-us/library/ms752347.aspx#how_to_implement_collections\"&gt;here&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.collectionviewsource.aspx"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the examples above, we declared our data bindings mostly with &lt;span class="caps"&gt;XAML&lt;/span&gt;,
and that is indeed the most common usage of data binding, so let‚Äôs talk
more about it. On our examples above, we declared a binding with the
&lt;code&gt;{Binding name}&lt;/code&gt;. This is actually a shortcut to declare the binding, we
know that the child element will get its binding &lt;code&gt;Source&lt;/code&gt; from its parents
&lt;code&gt;DataContext&lt;/code&gt;, and we can actually declare a path to specify which
property of the source that we want to bind to. So, that declaration
just now can be written as &lt;code&gt;{Binding Source={StaticResource dataSource},Path=name}&lt;/code&gt;. We can use StaticResource to refer to an
instance that we declare in the &lt;span class="caps"&gt;XAML&lt;/span&gt;, so to declare our &lt;code&gt;dataSource&lt;/code&gt; in
&lt;span class="caps"&gt;XAML&lt;/span&gt;, we can use something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Page&lt;/span&gt; &lt;span class="na"&gt;xmlns:c=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clr-namespace:PhoneApp1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;phone:PhoneApplicationPage.Resources&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;c:MyClass&lt;/span&gt; &lt;span class="na"&gt;x:Key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/phone:PhoneApplicationPage.Resources&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the the &lt;code&gt;dataContext&lt;/code&gt; itself is the data source that we want to bind
to, we can just declare the binding with simply &lt;code&gt;{Binding}&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codeproject.com/Articles/3665/Data-binding-concepts-in-NET-windows-forms"&gt;http://www.codeproject.com/Articles/3665/Data-binding-concepts-in-&lt;span class="caps"&gt;NET&lt;/span&gt;-windows-forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms752347.aspx"&gt;http://msdn.microsoft.com/en-us/library/ms752347.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codeproject.com/Articles/80555/Databinding-in-Silverlight-applications"&gt;http://www.codeproject.com/Articles/80555/Databinding-in-Silverlight-applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/cc278072(v=vs.95).aspx"&gt;http://msdn.microsoft.com/en-us/library/cc278072(v=vs.95).aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C#"></category><category term="programming"></category></entry><entry><title>Threading in¬†C#</title><link href="http://hndr.me/blog/threading-in-c" rel="alternate"></link><published>2012-05-31T23:05:00+08:00</published><updated>2012-05-31T23:05:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-31:/blog/threading-in-c</id><summary type="html">&lt;p&gt;Well, this time, I am going to talk about thread, the concept of thread
is ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, this time, I am going to talk about thread, the concept of thread
is pretty simple to understand, so I wont explain the here, but you can
read more about it in this &lt;a href="http://en.wikipedia.org/wiki/Thread_(computing)"&gt;wiki page&lt;/a&gt;. Threading are used quite
extensively in most modern computer programs, for example separating
threads to handle button clicks on a &lt;span class="caps"&gt;GUI&lt;/span&gt; button from the one that
handles data processing, or in chatting programs, where it separates
threads to send messages from the one that handles incoming messages and
display it on the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;In .&lt;span class="caps"&gt;NET&lt;/span&gt;, threading is handled by the &lt;code&gt;Thread&lt;/code&gt; class, which lives in
the &lt;code&gt;System&lt;/code&gt; namespace, so to use it, you need to add this&amp;nbsp;first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To create a new thread, we need to create a new Thread instance, which
takes a &lt;a href="http://www.myblog.name/2012/05/delegates-in-c-and-a-tiny-bits-of-events/"&gt;delegate&lt;/a&gt; of type &lt;code&gt;ThreadStart&lt;/code&gt; (remember that delegate is
like a pointer to a method? this would mean that the thread will run the
method that the delegate parameter points to.). ThreadStart itself is a
delegate that does not return any value or accept any parameter. Here is
an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ConsoleApplication1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ThreadStart&lt;/span&gt; &lt;span class="n"&gt;someCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;t3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;someCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will see that the each number will be printed 4 times, but in no
particular order, the operating decides which threads gets run at any
given time, but you can see that the same method is being run in 4
different threads. The three threads that we created with the Thread
class, and the main thread of the program&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;In the example above, the threads are all accessing local variables,
that is, they don‚Äôt share any data between them. This makes things
pretty simple, but there are times where the threads are accessing a
shared data, and this may cause a problem known as &lt;a href="http://en.wikipedia.org/wiki/Race_condition"&gt;race condition&lt;/a&gt;. To
prevent, that, we need a way sync the data by locking the data to a
thread during a section of the program that may cause a race condition.
In .&lt;span class="caps"&gt;NET&lt;/span&gt;, the Threading namespace provides us with a Monitor class that
we can use to lock an object. Here is an&amp;nbsp;example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sharedData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SomeClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// lock the sharedData&lt;/span&gt;
&lt;span class="n"&gt;Monitor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sharedData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Write the critical codes here.&lt;/span&gt;
&lt;span class="c1"&gt;// Codes between the Enter and Exit can only be performed by one thread&lt;/span&gt;
&lt;span class="c1"&gt;// at a time,&lt;/span&gt;

&lt;span class="c1"&gt;// release the sharedData&lt;/span&gt;
&lt;span class="n"&gt;Monitor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sharedData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thread synchronization is pretty complicated topic, I think will cover
them in another post some time later, when I got a better understanding
of it. &lt;a href="http://msdn.microsoft.com/en-us/library/ms173179.aspx"&gt;Here&lt;/a&gt; is an &lt;span class="caps"&gt;MSDN&lt;/span&gt; article on the&amp;nbsp;topic.&lt;/p&gt;
&lt;p&gt;The Thread class provides several methods to control the execution of
the thread, here are some of&amp;nbsp;them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// these examples are called from within the execution of another thread&lt;/span&gt;
&lt;span class="c1"&gt;// e.g. t2&lt;/span&gt;

&lt;span class="c1"&gt;// Pausing the current thread execution for 2 seconds&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wait for t1 thread to finish executing&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// stop the execution of a thread&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// pause the thread&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Suspend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// resume the thread&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resume&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// accessing the thread state&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadState&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C# also provides some methods to control the execution of another
process via the &lt;code&gt;Process&lt;/code&gt; class in the &lt;code&gt;System.Diagnostics&lt;/code&gt; namespace,
but I‚Äôm not too concerned about that for now, so this post ends&amp;nbsp;here.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/aa645740(v=vs.71).aspx"&gt;http://msdn.microsoft.com/en-us/library/aa645740(v=vs.71).aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.albahari.com/threading/"&gt;http://www.albahari.com/threading/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.c-sharpcorner.com/uploadfile/mgold/multithreadingintro10062005000439am/multithreadingintro.aspx"&gt;http://www.c-sharpcorner.com/uploadfile/mgold/multithreadingintro10062005000439am/multithreadingintro.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C#"></category><category term="programming"></category></entry><entry><title>Implicitly Typed Language and Anonymous Types in¬†C#</title><link href="http://hndr.me/blog/implicitly-typed-language-and-anonymous-types-in-c" rel="alternate"></link><published>2012-05-30T23:16:00+08:00</published><updated>2012-05-30T23:16:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-30:/blog/implicitly-typed-language-and-anonymous-types-in-c</id><summary type="html">&lt;p&gt;In C#, there is this &lt;code&gt;var&lt;/code&gt; keyword, which allows you to declare a
variable without ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;In C#, there is this &lt;code&gt;var&lt;/code&gt; keyword, which allows you to declare a
variable without explicitly specifying its data type. It is important to
note, that this doesn‚Äôt mean that it is dynamically typed, it simply
means that the compiler will infer the data type for you, and it is also
important to note, that it is strongly typed. So, this code below, will
simply create a variable called x, with the data type of&amp;nbsp;string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;x&lt;/code&gt; is a strongly typed &lt;code&gt;string&lt;/code&gt;, if you try to assign &lt;code&gt;x&lt;/code&gt; to an
&lt;code&gt;int&lt;/code&gt;, it will throw an error. Even though it may seems inflexible, it
is necessary when we are using anonymous&amp;nbsp;types.&lt;/p&gt;
&lt;p&gt;Anonymous Types allows you to query a set of data, without having to
create a class/struct to hold it. For example, if I wanted to to query a
Car database, if I want to put it in a proper data structure,
I can either put it in a hash table object, or I would have to declare
a class&amp;nbsp;first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With anonymous type, we can do something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myCar = {year=1990,price=100000,model=&amp;quot;unknown&amp;quot;};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Behind the scene, the compiler will actually generate a class for us,
with all of the necessary properties with it. This can be especially
useful if we need to query just a subset of the properties, and creating
the new objects without all of its properties isn‚Äôt very&amp;nbsp;feasible.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb397696"&gt;http://msdn.microsoft.com/en-us/library/bb397696&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C#"></category><category term="programming"></category></entry><entry><title>Lambda Expression with¬†C#</title><link href="http://hndr.me/blog/lambda-expression-with-c" rel="alternate"></link><published>2012-05-30T21:40:00+08:00</published><updated>2012-05-30T21:40:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-30:/blog/lambda-expression-with-c</id><summary type="html">&lt;p&gt;Previous in my post regarding delegate, I talked a little about
anonymous method that can ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Previous in my post regarding delegate, I talked a little about
anonymous method that can be used with delegates, there are other forms
to declare inline functions. Both of them are collectively known as
anonymous functions of C#. Here is one example that shows how different
method assignments are used with&amp;nbsp;delegate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SampleDelegate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SampleMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;SampleDelegate&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;SampleDelegate&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);};&lt;/span&gt;
        &lt;span class="n"&gt;SampleDelegate&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);};&lt;/span&gt;

        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All those methods above do the exact same thing, SampleDelegate d is
method with lambda expression. Lambda expressions are expressed with the
lambda operator, ‚Äú=&amp;gt;‚Äù. The left side of the lambda expression specifies
any input parameter that it may have, and the right side holds the
expression&amp;nbsp;block.&lt;/p&gt;
&lt;p&gt;There are several usage pattern of lambda expression. First up is
expression lambda, which basically is just a lambda expression with an
expression on its right side, it return the result of the expression.
Here is an&amp;nbsp;example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// parentheses can be omitted if it only has one parameter&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// use empty parenthese for expression without any parameter&lt;/span&gt;
&lt;span class="p"&gt;()=&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second one, statement lambda, is just a lambda expression with a
statement on the right&amp;nbsp;side.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;{&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, that‚Äôs it for the most basics of the lambda expression, there are
other uses of lambda expressions, such as for use with &lt;span class="caps"&gt;LINQ&lt;/span&gt;, but I will
talk about that later, as that involves some C# features that I‚Äôm not
familiar with yet. &lt;span class="caps"&gt;BTW&lt;/span&gt;, if you wondered why the lambda expressions above
are missing the return/parameters type, that‚Äôs because it is able the
infer the type from context, but of course, you can still specify the
type explicitly if that‚Äôs what you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;Update: found an interesting example of the usage of the lambda
expressions &lt;a href="http://blogs.msdn.com/b/ericwhite/archive/2006/10/03/lambda-expressions.aspx"&gt;here&lt;/a&gt;, here is a code snippet from&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MyWhereMethod&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filteredList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWhereMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filteredList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, well there is how some of the lambda queries are&amp;nbsp;done.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb397687.aspx"&gt;http://msdn.microsoft.com/en-us/library/bb397687.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codeproject.com/Articles/24255/Exploring-Lambda-Expression-in-C"&gt;http://www.codeproject.com/Articles/24255/Exploring-Lambda-Expression-in-C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C#"></category><category term="programming"></category></entry><entry><title>Events in¬†C#</title><link href="http://hndr.me/blog/events-in-c" rel="alternate"></link><published>2012-05-30T00:27:00+08:00</published><updated>2012-05-30T00:27:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-30:/blog/events-in-c</id><summary type="html">&lt;p&gt;Alright, last time I posted about &lt;code&gt;Delegate&lt;/code&gt;, and together with event,
they are one of ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Alright, last time I posted about &lt;code&gt;Delegate&lt;/code&gt;, and together with event,
they are one of the most important concept to understand in event driven
application framework, such as &lt;span class="caps"&gt;WPF&lt;/span&gt;, Silverlight, and Silverlight for
&lt;span class="caps"&gt;WP7&lt;/span&gt;, and maybe even WinRT as well (I haven‚Äôt tried it), so I believe it
is important to understand how it work, especially when these two are
pretty closely&amp;nbsp;related.&lt;/p&gt;
&lt;p&gt;I find the explanation on &lt;a href="http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx"&gt;&lt;span class="caps"&gt;MSDN&lt;/span&gt;&lt;/a&gt; is pretty easy to understand, Event is
a way for a class to provide notifications to clients when something
interesting happens. Event is declared with a delegate, in fact, there
aren‚Äôt much difference between a regular delegate and an event. Here is
an example of an event&amp;nbsp;declaration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// declare the delegate&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SomethingHappenedEventHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// On the class that has the event&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;SomethingHappenedEventHandler&lt;/span&gt; &lt;span class="n"&gt;SomethingHappened&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It indeed looks like a regular delegate declaration, and indeed, it is
indeed very similar to a regular delegate, and the &amp;#8216;event&amp;#8217; keyword is
something that we can think of like a modifier, which makes the delegate
to behaves a little bit different. The first difference is, a delegate
with an event modifier can be included in an interface, where a regular
delegate can&amp;#8217;t. The second one is, a delegate with an event modifier can
only be called from within the class, but it can be changed/assigned to
other method that handle the event, where a regular delegate can be
called by whoever that can access&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Finally, like what I mentioned on my previous post, event delegate must
conform to a special restriction, where it must return void, and accepts
two arguments, an object that invoke the event, and the information
regarding the event that is derived from the EventArgs class, but this
is a restriction placed by the .&lt;span class="caps"&gt;NET&lt;/span&gt; framework instead of the C# language
itself, so, .&lt;span class="caps"&gt;NET&lt;/span&gt; framework has provided a delegate that can be used for
this, the EventHandler. So, if your event doesn&amp;#8217;t provide any additional
data that what is provided by the EventHandler, it is better to just use
the provided delegate. If you do need to pass additional data, you can
just inherit the EventArgs class and provide additional infomation in
the class. There are some others differences between the two, but I
think those are too advanced and not too relevant in practical&amp;nbsp;usage.&lt;/p&gt;
&lt;p&gt;Since event is basically a delegate, a firing event is actually just an
invocation of the method that the delegate points to, which we usually
refer to as handling the event. So, in &lt;span class="caps"&gt;GUI&lt;/span&gt; programming, we often see&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RoutedEventHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_Click&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That means, somewhere in the Button class declaration, they have an
event of RoutedEventHandler delegate, and will be called when the the
necessary condition is fulfilled. Something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RoutedEventHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;RoutedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;RoutedEventHandler&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;checkCondition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseOnButton&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouseUp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, it is not actually implemented like that, but I hope it can
give you the idea. Maybe the button class will call the &lt;code&gt;checkCondition&lt;/code&gt;
periodically, and check if it fulfill the condition to detect a mouse
click, if it does, it will call the &lt;code&gt;Click&lt;/code&gt; delegate, which will invoke
the method that it points to, where in our example, will call the
&lt;code&gt;x_Click()&lt;/code&gt; method which we assigned previously using the &lt;code&gt;+=&lt;/code&gt; operator. In
this case, we call the &lt;code&gt;Button&lt;/code&gt; class the event provider, and the class
that implemented the event handler, the event&amp;nbsp;listener/subscriber.&lt;/p&gt;
&lt;p&gt;We can also see that the mouse click event uses a subclass of the
&lt;code&gt;EventArgs&lt;/code&gt; class, which may provide additional information of the
event, such as the time it was triggered, etc. For example, the
&lt;code&gt;RoutedEventArgs&lt;/code&gt; class have a property called &lt;code&gt;Handled&lt;/code&gt; that indicate
whether the event is to be marked&amp;nbsp;handled.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx"&gt;http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codeproject.com/Articles/11541/The-Simplest-C-Events-Example-Imaginable"&gt;http://www.codeproject.com/Articles/11541/The-Simplest-C-Events-Example-Imaginable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C#"></category><category term="programming"></category></entry><entry><title>Some Stuff I Didn‚Äôt Know About String in¬†C#</title><link href="http://hndr.me/blog/some-stuff-i-didnt-know-about-string-in-c" rel="alternate"></link><published>2012-05-25T23:08:00+08:00</published><updated>2012-05-25T23:08:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-25:/blog/some-stuff-i-didnt-know-about-string-in-c</id><summary type="html">&lt;p&gt;Well, its a bit strange getting to know something that I‚Äôve used
extensively for ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, its a bit strange getting to know something that I‚Äôve used
extensively for quite a while, but there are indeed some things that
feels&amp;nbsp;revealing.&lt;/p&gt;
&lt;p&gt;First of all, I knew that strings is a little bit special, in a way that
it is a reference type, but it behaves very much like a value type, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SomeClass&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SomeClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;SomeClass&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// a.age will be 40, since they are both referring to the same value&lt;/span&gt;
&lt;span class="c1"&gt;// but,&lt;/span&gt;

&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world;  // x will stay as &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, well, that‚Äôs about it. I also knew that string are immutable, as in,
the value can‚Äôt be changed after they are set, so something like this
would throw an&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But, since something like that didn‚Äôt get used much anyway, I never put
too much thought into it, and I just learned that the two are actually
related. In the first code snippet, since x is immutable, when y try to
change the value, it will create a new string instead, so it will point
to a new location in the memory, leaving x alone, and the two no longer
refer to the same memory&amp;nbsp;location.&lt;/p&gt;
&lt;p&gt;The value of the string itself are stored in the same memory location as
well, so even if two strings are created separately, if they have the
same value, they will still point to the same&amp;nbsp;location.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// x == y is true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I personally have ran into some bugs related to this behaviour, of course,
I just tried do something else that works without understanding why. Until&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;That mentioned, one thing to remember is that new string values are
created each time the value change, so that means there would be a lot
of temporary objects in the memory, and the garbage collection will run
more often, so if there value of the change is something that is done
very extensively in the program, it would be better to use a class
called StringBuilder. It behaves almost the same way as a string, but it
is not immutable, and it is designed to build string, as the name
suggest. I wanted to talk more about it, but I found a &lt;a href="http://www.dotnetperls.com/stringbuilder"&gt;better
explanation&lt;/a&gt; about it, so I‚Äôll just use this post as a book mark to that&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Some other interesting stuffs about strings and the manipulation of
strings as&amp;nbsp;well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html"&gt;http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codinghorror.com/blog/2006/07/i-heart-strings.html"&gt;http://www.codinghorror.com/blog/2006/07/i-heart-strings.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codinghorror.com/blog/2005/03/if-you-like-regular-expressions-so-much-why-dont-you-marry-them.html"&gt;http://www.codinghorror.com/blog/2005/03/if-you-like-regular-expressions-so-much-why-dont-you-marry-them.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stevex.net/string-formatting-in-csharp/"&gt;http://blog.stevex.net/string-formatting-in-csharp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/kathykam/archive/2006/03/29/564426.aspx"&gt;http://blogs.msdn.com/b/kathykam/archive/2006/03/29/564426.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C#"></category><category term="programming"></category></entry><entry><title>Some Standard C# Object Methods That You Might Want to¬†Override</title><link href="http://hndr.me/blog/some-standard-c-object-methods-that-you-might-want-to-override" rel="alternate"></link><published>2012-05-25T22:22:00+08:00</published><updated>2012-05-25T22:22:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-25:/blog/some-standard-c-object-methods-that-you-might-want-to-override</id><summary type="html">&lt;p&gt;Alright, I‚Äôll get it straight to the point, since this is just a note ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Alright, I‚Äôll get it straight to the point, since this is just a note to
myself&amp;nbsp;anyway,&lt;/p&gt;
&lt;p&gt;First one, the ToString()&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;YourClass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,Age: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason to this is, simple, to have an easy way to get a string
representation of your object. Of course, in a way, you can also create
a new method to return the same thing, but it is a good idea to do it
the ‚ÄúC# way‚Äù, and the ToString method is always there, so why create two
methods that serve the same purpose? This is similar to the
&lt;code&gt;__string__&lt;/code&gt; method in&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;The second one,&amp;nbsp;Equals():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;myclass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myclass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myclass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason to do this, is so to have an easy way to compare objects in
C#, as objects are stored as references, a ‚Äò==‚Äô comparison will always
return false, even if they have the same properties values, unless they
actually refer to the same object. The reason to override this method
instead of creating a new one, is the same as the reason to override the
ToString() method I mentioned&amp;nbsp;above.&lt;/p&gt;</content><category term="C#"></category><category term="programming"></category></entry><entry><title>C# ‚Äì Optional Arguments and Constructor¬†Chaining</title><link href="http://hndr.me/blog/c-optional-arguments-and-constructor-chaining" rel="alternate"></link><published>2012-05-22T23:19:00+08:00</published><updated>2012-05-22T23:19:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-22:/blog/c-optional-arguments-and-constructor-chaining</id><summary type="html">&lt;p&gt;Learned something new about C# today, first thing is Constructor
Chaining.¬† Constructor chaining enables constructors ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Learned something new about C# today, first thing is Constructor
Chaining.¬† Constructor chaining enables constructors to call another
overloaded constructor, with it, the amount of duplicate code can be
reduced significantly, here is an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// It can be used to call the base class&amp;#39; constructor as well, with the&lt;/span&gt;
&lt;span class="c1"&gt;// base keyword&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AwesomePerson&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;awesomenessLevel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AwesomePerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;awesomenessLevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AwesomePerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// and so on...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that, I can reduce the amount of code in the constructors, and
still get the options of passing only the argument that I need to the
constructors. There is another way to do this, starting with C# 4.0, it
introduced optional arguments that is common in dynamic languages, and
it is pretty awesome, and it can be combined with the constructors
chaining above for more&amp;nbsp;power!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To create the instances:&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Somewhere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/199761/how-can-you-use-optional-parameters-in-c"&gt;http://stackoverflow.com/questions/199761/how-can-you-use-optional-parameters-in-c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/dd264739.aspx"&gt;http://msdn.microsoft.com/en-us/library/dd264739.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="C#"></category><category term="programming"></category></entry><entry><title>Javascript ‚Äì Setting Events to Unique Anonymous¬†Functions</title><link href="http://hndr.me/blog/javascript-setting-events-to-unique-anonymous-functions" rel="alternate"></link><published>2012-05-22T22:24:00+08:00</published><updated>2012-05-22T22:24:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-22:/blog/javascript-setting-events-to-unique-anonymous-functions</id><summary type="html">&lt;p&gt;Ok, the easiest way to convey my point is with code,&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Ok, the easiest way to convey my point is with code,&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someDiv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Say you are trying to set the onclick event of an array of elements in
your page, and each of these events need to trigger the same function,
but passing different parameter, seems simple enough, but if you try to
run the code above, all of the click events will print the value 5. The
value of i is 5 because the value is incremented with the for loop
before it stopped executing, simple enough, but it seems like the
anonymous functions that we created refer to the same value as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;So, well, the first thing that comes to mind is I kind of need to create
&amp;#8220;instances&amp;#8221; of these anonymous functions individually, with the help of
this &lt;a href="http://stackoverflow.com/questions/4900029/javascript-context-in-anonymous-functions"&gt;stackoverflow thread&lt;/a&gt;, I got to know the answer is self executing
anonymous function and a return statement, so here it&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someDiv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);};}(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="anonymous functions"></category><category term="javascript"></category></entry><entry><title>C# Back to¬†Basics</title><link href="http://hndr.me/blog/c-back-to-basics" rel="alternate"></link><published>2012-05-20T23:12:00+08:00</published><updated>2012-05-20T23:12:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-05-20:/blog/c-back-to-basics</id><summary type="html">&lt;p&gt;I have been programming C# for quite some time, but when I think about
it ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been programming C# for quite some time, but when I think about
it, I have never really tried to learn C# as a language, instead what
I‚Äôve been playing with around are mostly the .&lt;span class="caps"&gt;NET&lt;/span&gt; framework itself, this
result in me having to guess the magic behind many of the operations in
the programs I wrote myself, and that&amp;nbsp;sucks.&lt;/p&gt;
&lt;p&gt;I think this is a problem that plagues many .&lt;span class="caps"&gt;NET&lt;/span&gt; developers, because the
.&lt;span class="caps"&gt;NET&lt;/span&gt; framework is so powerful, many people can get away not knowing how
it works, but that can causes a lot of problems when I try to read on
some more advanced stuff, and not being able to even guess how that
work. Not to mention that relying on magic that I don‚Äôt understand don‚Äôt
really make me feel satisfied in writing&amp;nbsp;programs.&lt;/p&gt;
&lt;p&gt;So, that‚Äôs why I decided to learn C# from the basics, and I will be
posting some of the stuff that I think I should remember here. I will be
using the &lt;a href="http://www.robmiles.com/c-yellow-book/"&gt;C# Yellow Book by Rob Miles&lt;/a&gt; for my reference, so a lot of
the posting that I will be doing may be similar to what‚Äôs in the book,
but I will be writing it in a way that I can easily understand&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;Well, that‚Äôs all for now, hope I can pull it&amp;nbsp;off.&lt;/p&gt;</content><category term="C#"></category><category term="Programming"></category></entry><entry><title>Phonegap in Visual Studio ‚Äì There is no script engine for file extension¬†‚Äò.js‚Äô</title><link href="http://hndr.me/blog/phonegap-in-visual-studio-there-is-no-script-engine-for-file-extension-js" rel="alternate"></link><published>2012-03-28T21:59:00+08:00</published><updated>2012-03-28T21:59:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-03-28:/blog/phonegap-in-visual-studio-there-is-no-script-engine-for-file-extension-js</id><summary type="html">&lt;p&gt;As I recently reinstalled my Windows system, I had to re-install almost
every programs I ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I recently reinstalled my Windows system, I had to re-install almost
every programs I usually use again, one of them is the Visual Studio, and
since I have been messing around with Phonegap these days, I had to set
it up again. I did what I did before, copying the project template zip
file to my templates folder, and I tried to create a new Phonegap
project, but when I try to build it, Visual Studio gives me an error
saying : ‚ÄúThere is no script engine for file extension&amp;nbsp;.js‚Äù.&lt;/p&gt;
&lt;p&gt;This is pretty weird, since I set it up the same way last time, and it
works perfectly, so I did a bit of internet search, some other people
are having the same problem as well, and most of them suggested the fix
&lt;a href="http://www.winhelponline.com/articles/230/1/Error-There-is-no-script-engine-for-file-extension-when-running-js-files.html"&gt;here&lt;/a&gt;. I tried it, but it doesn‚Äôt work for me, further search leads me
to this &lt;a href="https://answers.microsoft.com/en-us/windows/forum/windows_7-system/fix-there-is-no-script-engine-for-file-extension/95d58867-3f31-45e3-aeaf-32ecea4d33c1"&gt;page&lt;/a&gt;, and this is the solution that worked for me. I changed
the file association for .js files back to the Microsoft Window Based
Script host ( it was associated with notepad++ before), and I tried to
compile it again, and everything is good&amp;nbsp;again.&lt;/p&gt;</content><category term="phonegap"></category><category term="programming"></category><category term="visual studio"></category><category term="windows 7"></category><category term="wp7"></category></entry><entry><title>Django Template¬†System</title><link href="http://hndr.me/blog/django-template-system" rel="alternate"></link><published>2012-03-23T20:19:00+08:00</published><updated>2012-03-23T20:19:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-03-23:/blog/django-template-system</id><summary type="html">&lt;p&gt;Okay, last time I talked about the basic web page in Django, and it used ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Okay, last time I talked about the basic web page in Django, and it used
the shortest shortcut with the &lt;code&gt;render_to_reponse&lt;/code&gt;, but there are manual
way to do the same thing using &lt;code&gt;Template&lt;/code&gt; and &lt;code&gt;Context&lt;/code&gt; class, and there are
many scenario where we might want to do it the manual way to have more
control, so to do it manually, here is the&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template.loader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Here is how to do it manually&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# load the raw template string to the variable,&lt;/span&gt;
    &lt;span class="c1"&gt;# you can also manually define the string in the same file,&lt;/span&gt;
    &lt;span class="c1"&gt;# but that wouldn&amp;#39;t be very maintainable, but it is basically&lt;/span&gt;
    &lt;span class="c1"&gt;# an ordinary string&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The Index Page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# return the http request, and pass html as the&lt;/span&gt;
    &lt;span class="c1"&gt;# body of the response&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="django"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Basic Django Web¬†Application</title><link href="http://hndr.me/blog/basic-django-web-application" rel="alternate"></link><published>2012-03-23T15:57:00+08:00</published><updated>2012-03-23T15:57:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-03-23:/blog/basic-django-web-application</id><summary type="html">&lt;p&gt;For the past few weeks, I have been writing quite a lot in &lt;span class="caps"&gt;PHP&lt;/span&gt;, more ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the past few weeks, I have been writing quite a lot in &lt;span class="caps"&gt;PHP&lt;/span&gt;, more
specifically, CodeIgniter, and to be honest, writing web applications in
CodeIgniter is really easy and intuitive, and even though I came across
the &lt;span class="caps"&gt;MVC&lt;/span&gt; pattern (or &lt;span class="caps"&gt;MVT&lt;/span&gt;, for that matter) for the first time in Django,
I quickly forgotten even the basics of Django. So, in to prevent myself
from forgetting something like this again in the future, I am writing
this blogpost, to explain the basic of rendering a web page with Django.
I will only explain the most necessary functionality, so that means I
will use shortcuts whenever possible, and I wont be using any model in
this example, maybe I‚Äôll write that sometime in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;Okay, lets start. First of, after installing the django, run
&lt;code&gt;django-admin.py startproject basicDjango&lt;/code&gt; to start a new project. Next,
move into the project directory, and create a new folder named
&lt;code&gt;templates&lt;/code&gt;. This will be the folder you use to store the template files
for the project. We will come back here again later. Now, open up
&lt;code&gt;settings.py&lt;/code&gt; and find the line for &lt;code&gt;TEMPLATE_DIRS&lt;/code&gt;, and add the path to
the template directory there. Next, on your project‚Äôs root directory
level, create a new file named &lt;code&gt;views.py&lt;/code&gt;. Open up the file, and enter
these code which are the basic¬† functionalities that are in a view&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# import the necessary modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# render the template index.html with the context&lt;/span&gt;
    &lt;span class="c1"&gt;# text equals to hello world&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The way it works is, it loads up the template file(index.html), and will
replace the special tags in the template file with dictionary data you
passed in the second argument. Next, create the template file itself, in
the templates folder that you made before, create a new file index.html,
and put this inside&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{title}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{text}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you got everything setup, and now, you just need to route the
request to the view function to handle, so to do that, open up urls.py,
and add this to the url&amp;nbsp;pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;views&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^hello/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you can run &lt;code&gt;python manage.py runserver&lt;/code&gt;, and navigate to your
browser to &lt;code&gt;http://localhost:8000/hello&lt;/code&gt;, and you should see the word
‚ÄòHello World‚Äô printed&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Note: If you are on windows, make sure the template paths are written
with forward slashes ‚Äò/‚Äô. That‚Äôs all for now, but I think I will make
another post about how the Template system works in django without
shortcuts, and also about the model. Well, maybe next&amp;nbsp;time.&lt;/p&gt;</content><category term="django"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Setting Up Python on¬†Windows</title><link href="http://hndr.me/blog/setting-up-python-on-windows" rel="alternate"></link><published>2012-03-22T11:47:00+08:00</published><updated>2012-03-22T11:47:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-03-22:/blog/setting-up-python-on-windows</id><summary type="html">&lt;p&gt;Well, it‚Äôs a bit late for posting this, considering I have been playing
with ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, it‚Äôs a bit late for posting this, considering I have been playing
with Python for few months as I posted before, but, I recently
reinstalled my Windows, so I need to setup everything once again. This
time, I am trying to do it the right way, and my previous Python setup
isn‚Äôt really completely setup anyway, since I did most of my python
related works on my Linux Mint install. But recently, I have been
spending more time on Windows because of various things, so, well, here
goes. The distribution system in Python is a little but complicated, but
you can read more about it &lt;a href="http://www.b-list.org/weblog/2008/dec/14/packaging/"&gt;here&lt;/a&gt;¬†and &lt;a href="http://blog.ianbicking.org/2008/12/14/a-few-corrections-to-on-packaging/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, the standard Python distribution utilities is the distutils,
with it, you can install from the package source with &lt;strong&gt;python setup.py
install&lt;/strong&gt;. But there some problems with it, one of them is that it has
no way to track dependencies between packages, so there are other tools
that try to solve that problem, one of which is the &lt;strong&gt;setuptools&lt;/strong&gt;. When
you install the setuptools, it allows you to package your scripts and
specify any dependencies with it, which can be installed via its
distribution system, &lt;code&gt;easy_install&lt;/code&gt; which allows you to install
packages with &lt;code&gt;easy_install package_name&lt;/code&gt;. But, the setuptools
introduces another set of problem, where it causes weird behaviour and
some packages unusable unless it is installed via setuptools. So, the
recommended way to package and distribute python package is to use plain
vanilla distutils to package the scripts, and use &lt;strong&gt;pip&lt;/strong&gt; for
distribution. Instead of specifying dependencies in the setup.py file,
it allows you to create a separate file to specify the dependencies, and
process that instead. There are also &lt;strong&gt;distribute&lt;/strong&gt; which is a fork of
setuptools that tries to solve some of its&amp;nbsp;shortcomings.&lt;/p&gt;
&lt;p&gt;Ok, now that we got clear, lets actually start setting up python, the
first one is installing Python itself, simple enough, download the &lt;span class="caps"&gt;MSI&lt;/span&gt;
installer, run it, and Python is now installed. The next step is adding
the python directory to the &lt;span class="caps"&gt;PATH&lt;/span&gt; environment variables. This is so that
you can run the various python commands without typing the full path.
The first one to add is the Python root directory (C:\Python27 in my
case), and also the Scripts directory (C:\Python27\Scripts in my case). I
didn‚Äôt add the second one to the &lt;span class="caps"&gt;PATH&lt;/span&gt; before, I wondered why can‚Äôt I run
commands such as pip and virtualenv directly before. and another thing,
I recently watched a video from pycon 2012 talking about the state of
Python on Windows, and I think the speaker mentioned something about the
new releases of Python installers for Windows includes the option to add
the environment variables and also have some of the directory structure
changed, but as I only watched the video briefly, I am not sure whether
it only applies to the new Python 3.x release or to the 2.x release as
well. I think I will just update it&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;By now, you can say that Python is already completely setup on Windows,
but there are several other packages that should be&amp;nbsp;installed.&lt;/p&gt;
&lt;p&gt;The first one is to get a python package manager, which can be used to
install and manage the installed packages on your system. There are
several options you can choose, I am using distribute together with pip.
To install distribute, the easiest way is download the
&lt;a href="http://python-distribute.org/distribute_setup.py"&gt;distribute_setup.py&lt;/a&gt;, and run it. To install pip, you can download
the zip files from http://pypi.python.org/pypi/pip, extract it, navigate
to the folder, and run python setup.py&amp;nbsp;install.&lt;/p&gt;
&lt;p&gt;The next thing you should do is to install virtualenv. virtualenv is
basically a little python utility to setup a virtual isolated python
installation apart from your main python installation. With it, you can
install different version of the same libraries at the same time without
having them conflicts with each other. To install it, the easiest would
be to use pip that you installed before, so, run pip install&amp;nbsp;virtualenv.&lt;/p&gt;
&lt;p&gt;After you install it, you can run the command virtualenv &lt;span class="caps"&gt;ENV&lt;/span&gt; to create a
new virtualenv named &lt;span class="caps"&gt;ENV&lt;/span&gt;. Activate it by going into &lt;code&gt;ENV\scripts\activate&lt;/code&gt;
which should change your shell prompt accordingly. Now any new packages
changes will be made locally to the active virtualenv without affecting
the global installation. After you are done, you can deactivate it and
switch back to the main python installation by running
&lt;code&gt;ENV\scripts\deactivate.bat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next thing to do is to install django itself. Make sure your virtualenv
is active, unless you want django to be installed to the main django
installation. The easiest way to install django is to use pip: &lt;code&gt;pip install django&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And, you‚Äôre done! easy, isn‚Äôt it? You can test it by running the python
shell, and type import django. If there is no error, then you‚Äôre good to
go. Now, if you installed your django into your virtualenv, trying to
run &lt;code&gt;django-admin.py&lt;/code&gt; might gives you an &lt;code&gt;ImportError&lt;/code&gt; saying the it can‚Äôt
find the django.core module. This is because the .py file extensions are
associated with the main Python installation in your computer, and
running &lt;code&gt;django-admin.py&lt;/code&gt; directly from the command line will cause it to
run the script with that Python installation which doesn‚Äôt have django
installed, so, what you can do is either run the script with python
manually by specify the path of the &lt;code&gt;django-admin.py&lt;/code&gt;, or you can modify
your virtualenv activate script to change the file association, either
way, its up to&amp;nbsp;you.&lt;/p&gt;</content><category term="programming"></category><category term="python"></category><category term="windows"></category></entry><entry><title>Python Generator¬†Expression</title><link href="http://hndr.me/blog/python-generator-expression" rel="alternate"></link><published>2012-02-25T23:06:00+08:00</published><updated>2012-02-25T23:06:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-02-25:/blog/python-generator-expression</id><summary type="html">&lt;p&gt;Continuing the last post, another thing i would like to note is the
generator expression ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Continuing the last post, another thing i would like to note is the
generator expression in python. The function is almost the same as the
list comprehension, but instead of processing the whole data structures
at once, it performs the works one at a time. This would mean less
memory usage and performance when dealing with a massive amount of data.
To use it, just replace the square brackets on list comprehension with&amp;nbsp;parentheses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;evens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;evens&lt;/span&gt;

&lt;span class="c1"&gt;# more example, this can apply to list comprehension as well&lt;/span&gt;
&lt;span class="c1"&gt;# generate a tuple of possible combinations of odd and even number in the range&lt;/span&gt;
&lt;span class="n"&gt;permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="programming"></category></entry><entry><title>Python List¬†Comprehension</title><link href="http://hndr.me/blog/python-list-comprehension" rel="alternate"></link><published>2012-02-25T22:51:00+08:00</published><updated>2012-02-25T22:51:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-02-25:/blog/python-list-comprehension</id><summary type="html">&lt;p&gt;Ok, been wanting to write about this for a while, in case i forgot, but ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, been wanting to write about this for a while, in case i forgot, but
seems like I almost forgot about it. It&amp;#8217;s about a a feature of Python
that I don&amp;#8217;t really see in other languages i use such as C#, so I wanted
to write about this in case i&amp;nbsp;forgot.&lt;/p&gt;
&lt;p&gt;Ok, so the list comprehension is a python feature that, as the name
suggest, create a new list based on an existing list. Well, I think it&amp;#8217;s
much easier for me to just write an example, this post is meant for
myself&amp;nbsp;anyway.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#basically, to use list comprehension, surround the expression in square brackets&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# create a new list of even numbers, the conditional operation is optional though.&lt;/span&gt;
&lt;span class="n"&gt;evens&lt;/span&gt; ¬†&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="python"></category></entry><entry><title>Windows Phone ‚Äì Context Menu on a¬†ListBox</title><link href="http://hndr.me/blog/windows-phone-context-menu-on-a-listbox" rel="alternate"></link><published>2012-02-23T22:04:00+08:00</published><updated>2012-02-23T22:04:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-02-23:/blog/windows-phone-context-menu-on-a-listbox</id><summary type="html">&lt;p&gt;Ok, I have been working on updating one of my windows phone app,
&lt;a href="http://www.windowsphone.com/en-US/apps/dca01efc-aaf9-4785-a165-642d8b8def34"&gt;Swatch 7 ‚Ä¶&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, I have been working on updating one of my windows phone app,
&lt;a href="http://www.windowsphone.com/en-US/apps/dca01efc-aaf9-4785-a165-642d8b8def34"&gt;Swatch 7&lt;/a&gt;. I added a feature that allows user to save the color they
picked. I have write more on that on another post, maybe after the app
on the marketplace is updated. So, to remove one finished doing that,
but I‚Äôllof the saved color, I used the context menu provided with the
windows phone toolkit. It‚Äôs a bit different in the way that I can‚Äôt
access the selected item of the &lt;code&gt;ListBox&lt;/code&gt; the ordinary way ( the
selectedIndex returns ‚Äì1, so that means holding down a listbox item
doesn‚Äôt count as selecting it). So, I need a way to get information
about which item to remove, and after a bit of internet search, here is
how I do&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ListBox&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;paletteList&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ListBox.ItemTemplate&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;DataTemplate&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class="na"&gt;Margin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;toolkit:ContextMenuService.ContextMenu&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;toolkit:ContextMenu&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;toolkit:MenuItem&lt;/span&gt; &lt;span class="na"&gt;Header=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Delete&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;removeFromPalette&amp;quot;&lt;/span&gt;
                                        &lt;span class="na"&gt;Click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;removeFromPalette_Click&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/toolkit:ContextMenu&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/toolkit:ContextMenuService.ContextMenu&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/DataTemplate&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ListBox.ItemTemplate&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ListBox&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those are the code to set the context menu for the listbox, and here is
how the C# code on the click&amp;nbsp;event:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;removeFromPalette_Click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoutedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;selectedItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Do whatever with the selectedItem&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="windows-phone"></category><category term="programming"></category></entry><entry><title>Python ‚Äì Custom List Sorting¬†Function</title><link href="http://hndr.me/blog/python-custom-list-sorting-function" rel="alternate"></link><published>2012-01-30T19:26:00+08:00</published><updated>2012-01-30T19:26:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-01-30:/blog/python-custom-list-sorting-function</id><summary type="html">&lt;p&gt;There are several ways to sort a list, where the basic ones is to use ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are several ways to sort a list, where the basic ones is to use
the list.sort()¬† method to sort the list without returning anything, or
use the sorted() function that returns a new sorted list, but this
mostly works only on list that contains basic data types, if we want to
sort a list that contains something else (another list, tuple,
dictionary, custom classes, etc), we need to define a custom sorting&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;Sorting in Python is pretty simple, the list class provides a &lt;code&gt;sort()&lt;/code&gt;
function that we can use by&amp;nbsp;default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="c1"&gt;#[1,2,3,4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the example of scenario where we need a custom sorting function
is where we have custom data structure and we want to define which of
the class attribute that is used as they sorting key, in this case, we
will specify the key argument of the sorting function. In the examples,
the list.sort() method is used, but it can be used with the sorted()
function as&amp;nbsp;well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# consider we want to sort a list of string by its length&lt;/span&gt;

&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;television&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;laptop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# specify key=len , for the len() function that will&lt;/span&gt;
&lt;span class="c1"&gt;# return its length given a string&lt;/span&gt;

&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="c1"&gt;# [&amp;#39;ok&amp;#39;,&amp;#39;car&amp;#39;,&amp;#39;laptop&amp;#39;,&amp;#39;television&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key arguments takes a function name that takes an
argument and returns an object that will be used as the key, for
example, to define a custom key&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#for example, we want to sort a list of tuples based on its&lt;/span&gt;
&lt;span class="c1"&gt;# last element:&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lastElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lastElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="c1"&gt;#[(8,1),(1,2),(5,3),(3,4)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition, you can specify the reverse argument to true if you want it
to sort the list in descending&amp;nbsp;order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="c1"&gt;#[4,3,2,1]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="python"></category></entry><entry><title>Python Learning Progress ‚Äì Part¬†4</title><link href="http://hndr.me/blog/python-learning-progress-part-4" rel="alternate"></link><published>2012-01-26T11:21:00+08:00</published><updated>2012-01-26T11:21:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-01-26:/blog/python-learning-progress-part-4</id><summary type="html">&lt;p&gt;Last time I talked about getting input and a little about conditional
statement and looping ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last time I talked about getting input and a little about conditional
statement and looping that should‚Äôve enabled you to start creating the
basic application and implement some basic algorithm in Python. This
time, I am going to do a review on some of the basic data structures in&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;The basic data structures in Python are: list, tuples, and&amp;nbsp;dictionaries.&lt;/p&gt;
&lt;p&gt;Let me start with dictionaries. Dictionaries basically defines a
one-to-one relationship between a key and a value, just like an ordinary
dictionary, where a word is associated with its definition. To define a
dictionary in Python, the code&amp;nbsp;are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# to define a dictionary, declare a&lt;/span&gt;
&lt;span class="c1"&gt;# variable with its value enclosed&lt;/span&gt;
&lt;span class="c1"&gt;# between two curly braces &amp;#39;{}&amp;#39;, and declare the &amp;#39;entries&amp;#39; with&lt;/span&gt;
&lt;span class="c1"&gt;# the syntax, {key:value}, and separate each entry with a comma,&lt;/span&gt;
&lt;span class="c1"&gt;# as you can see, the key and value can be mixed of any data type&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;male&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# to access it, call the variable name with the key in a bracket &amp;#39;[]&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#will print John&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#will print 20&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#will print number&lt;/span&gt;

&lt;span class="c1"&gt;# to change or delete the value, use the same method&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some things to note about dictionary are, dictionary keys are
case-sensitive, and it is&amp;nbsp;unordered.&lt;/p&gt;
&lt;p&gt;Next is the list. Lists are, well, lists, like dictionary, a list
contains an array of items. It is like the array list of other
programming languages. To define a list, declare the contents of the
list within a square brackets and separate it with&amp;nbsp;commas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# declare a list of fruits&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# to access it, use the index, starting from 0&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#apple&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#banana&lt;/span&gt;

&lt;span class="c1"&gt;# enter a negative index to access the list from the last element&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#pear&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#banana&lt;/span&gt;

&lt;span class="c1"&gt;# accessing a subset of the list (known as slicing)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#access the list from index 0-2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#access the list from index 1-3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#access the list from the beginning until index 3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="c1"&gt;#access the list from index 1 until the last element&lt;/span&gt;

&lt;span class="c1"&gt;# to change it, use the same syntax&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mango&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# or to delete it&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# to add an element to the end of the list, use append() method&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tomato&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# to extend the list with another list, use the extend() method&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;strawberry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grapes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# to insert an element into the list, use the insert() method, which&lt;/span&gt;
&lt;span class="c1"&gt;# takes the index of the list to insert, and the item to insert&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lemon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#insert lemon into index #1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition to these basic operation, a list provides a lot of other
functions as well, one of them is the function to search for an element
inside a&amp;nbsp;list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mango&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# to search for an index of an element&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#will return 1&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#will throws an exception, because orange isnt in the list&lt;/span&gt;

&lt;span class="c1"&gt;# to check if an element is inside a list&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="c1"&gt;#return true&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="c1"&gt;#return false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are several variations in removing an item from a&amp;nbsp;list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# the basic del operation, which will remove an element at a specified index&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#will remove apple&lt;/span&gt;

&lt;span class="c1"&gt;# the remove() method, which will remove the first occurance of an element&lt;/span&gt;
&lt;span class="c1"&gt;# this statement will remove the first occurance of banana&lt;/span&gt;
&lt;span class="c1"&gt;# if there are more than one occurance of banana, only the first one will be removed&lt;/span&gt;
&lt;span class="c1"&gt;# if there isnt any banana inside the list, it will raise an exception&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# the pop() method, which will remove the last value from the list,&lt;/span&gt;
&lt;span class="c1"&gt;# and at the same time return that value&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# will return grape, and remove it from the list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are other operations on a list as&amp;nbsp;well,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# this will return the list[1,2,3,4,5,6,7,8]&lt;/span&gt;
&lt;span class="c1"&gt;# similar to the extend() method, but it returns a new list&lt;/span&gt;
&lt;span class="c1"&gt;# instead of directly performing the operation on the list&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;

&lt;span class="c1"&gt;# this will repeat the list 3 times, so the content of li&lt;/span&gt;
&lt;span class="c1"&gt;# will be [1,2,1,2,1,2]&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next is the tuple, a tuple is basically a list that cant be changed. It
has almost the same function the same functions as a list, but the
content can‚Äôt be changed, so a tuple doesn‚Äôt have the &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;pop()&lt;/code&gt;,
&lt;code&gt;append()&lt;/code&gt; or any other method that make changes to a list. Tuples are
usually used to create a constant list, whose values wont change. In
general, tuples are faster than lists, and there are also other specific
uses of a tuples that will be explored later. To create a tuple, the
syntax is similar to a list, but instead of a square bracket, a tuple is
declared with ordinary&amp;nbsp;brackets.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# it can be accessed the same way&lt;/span&gt;
&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#a&lt;/span&gt;
&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#c&lt;/span&gt;
&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#will throw an error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those are the basic data structures in Python, each of those are kind of
similar to each other, but they have specific purposes that are unique
to each of them. For example, a tuple can contain a list of another
list, and a list can also nest several level of&amp;nbsp;lists.&lt;/p&gt;</content></entry><entry><title>WP7 Apps ‚Äì Swatch¬†7</title><link href="http://hndr.me/blog/wp7-apps-swatch-7" rel="alternate"></link><published>2012-01-17T00:14:00+08:00</published><updated>2012-01-17T00:14:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-01-17:/blog/wp7-apps-swatch-7</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another &lt;span class="caps"&gt;WP&lt;/span&gt; app on the marketplace,
&lt;a href="http://www.windowsphone.com/en-US/apps/dca01efc-aaf9-4785-a165-642d8b8def34"&gt;http://www.windowsphone.com/en-&lt;span class="caps"&gt;US&lt;/span&gt;/apps/dca01efc-aaf9-4785-a165-642d8b8def34&lt;/a&gt;.
It‚Äôs a pretty simple color picker that lets you pick a color, and provide you with the &lt;span class="caps"&gt;RGB&lt;/span&gt; value and &lt;span class="caps"&gt;HEX&lt;/span&gt; code. There are two kind of picker available, the usual color slider and a honeycomb&amp;nbsp;picker.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6720680373/" title="4 by p.hdra, on Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7164/6720680373_4ddbfcb8ef_b.jpg" width="480" height="800" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6720679391/" title="3 by p.hdra, on Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7155/6720679391_a66aaf368d_b.jpg" width="480" height="800" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6720678217/" title="2 by p.hdra, on Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7031/6720678217_b76d9c449a_b.jpg" width="480" height="800" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="apps"></category><category term="windows-phone"></category></entry><entry><title>Python Learning ‚Äì Part¬†3</title><link href="http://hndr.me/blog/python-learning-part-3" rel="alternate"></link><published>2012-01-12T20:10:00+08:00</published><updated>2012-01-12T20:10:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-01-12:/blog/python-learning-part-3</id><summary type="html">&lt;p&gt;Well, I was pretty busy this week, and I haven‚Äôt touch too much of ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, I was pretty busy this week, and I haven‚Äôt touch too much of
Python these days, and even if if I done some exercise on Python, I was
too lazy to write up a blog post for it, but I promised I will blog more
to keep track of my progress, so here I am writing&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;Ok, so this time, I want to talk about the getting input from the user,
and¬† flow control in Python, in other words, I am going to talk about
conditional statement and&amp;nbsp;loop.&lt;/p&gt;
&lt;p&gt;Let‚Äôs start with the user input. The basic input function in python is
&lt;code&gt;raw_input()&lt;/code&gt;, which gets whatever the user entered, and process it as a
string. You can pass an optional string argument that will be used as
the prompt, here is an example&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="c1"&gt;#or you can pass the prompt as an argument&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another option is to use the &lt;code&gt;input()&lt;/code&gt;, which is is similar to the
&lt;code&gt;raw_input&lt;/code&gt;, except that the user input isn‚Äôt processed as a string, but
as an expression. So, if you entered a number, it will process the input
as a number, or if you entered an variable name, it will be processed as
an variable, and so&amp;nbsp;on&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# x is 5&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter a number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#enter &amp;#39;5&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# x is 12&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter another number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#enter &amp;#39;4*3&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# this will produce an error, because John is not defined as a variable&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter a name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#enter &amp;#39;John&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# y will be equal to x, because the input will be processed as avariable&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter a letter: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#enter &amp;#39;x&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, the next part is where things start to get fun, the basic flow
control in python using if, elif, and else. Before I begin, let me talk
a little bit about code blocks and boolean values. Code blocks are
basically a group of code, which can consist of one or more statements
and declarations. In addition, the variables inside a code block are
isolated from the code outside of the block, so a variable declared
inside a code block cant be used outside of the block. Code blocks are
used in many places in programming, one of them is the conditional and
looping statements. Code blocks are expressed in various ways in
different programming languages, some of them uses the curly braces { }
(C++, C#, Java), some of them uses the &lt;span class="caps"&gt;BEGIN&lt;/span&gt; and &lt;span class="caps"&gt;END&lt;/span&gt; (&lt;span class="caps"&gt;VB&lt;/span&gt;) keyword, and
in Python, we uses indentation (4 spaces), so the codes that are
indented¬† are considered as a block of code, and to nest several levels
of code blocks, just add more indentation to the lines of&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Boolean values are basically logical true or false values. Comparison
operators will always return a boolean value of either true or false,
even though comparison operators are not the only thing that can return
a boolean value, it is the basics of it. Comparison operations in Python
are pretty much self-explanatory, and it is similar to other programming&amp;nbsp;language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Equal&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#False&lt;/span&gt;

&lt;span class="c1"&gt;#Greater than/Equal&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#False&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#True&lt;/span&gt;

&lt;span class="c1"&gt;#Less than/Equal&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#False&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;#True&lt;/span&gt;

&lt;span class="c1"&gt;# there are also the &amp;#39;and&amp;#39;, &amp;#39;or&amp;#39;, and &amp;#39;not&amp;#39; keyword&lt;/span&gt;
&lt;span class="c1"&gt;# and will evaluate to true if both are true&lt;/span&gt;
&lt;span class="c1"&gt;# or will evaluate to true if one of the is true&lt;/span&gt;
&lt;span class="c1"&gt;# and not will produce the reverse value&lt;/span&gt;

&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;#False&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#True&lt;/span&gt;
&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;#False&lt;/span&gt;

&lt;span class="c1"&gt;#and so on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am not sure how to explain code indentation in plain english, so let
me just write some example if statement&amp;nbsp;code,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please enter a number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You entered a number greater than 10&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You entered a number that is less than 5&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You entered a number between 5 and 10&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the if statement will test if the statement
is true or not, followed by a colon and an indented lines to specify
which code to execute if the statement evaluates to true, the next elif
statement will be executed only if the first if statement is false, and
it will test it the statement again. You can put as many elif statement
as you want, and finally, an else statement is put there to specify
which code to execute if all of the tests before it evaluate to false.
The elif and the else statement are optional, which means you can write
a code to only run when a certain condition is met, or do nothing if
that certain condition is not&amp;nbsp;met.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter your name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Only print these statements if the name is John&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, John! Good to see you again.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;What can I do for you today, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next thing I am going to talk about is looping. Similar
to the conditional statement, looping uses code blocks to specify
several statements of code to run as well. There are two ways to create
a loop, the first one is the while loop, which will continue to run as
long as the boolean statement remains&amp;nbsp;true.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This one will run the loop endlessly, because the boolean statement&lt;/span&gt;
&lt;span class="c1"&gt;# is hardcoded as True&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Never ending loop&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Press ctrl-c or ctrl-z to terminate&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# You should add a statement to eventually cause the boolean statement&lt;/span&gt;
&lt;span class="c1"&gt;# turns False&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#initialize x to 1&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#continue to run the loop as long as the value of x &amp;lt; 10&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Count no.&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#increase the value of x by one on each iterations&lt;/span&gt;
           &lt;span class="c1"&gt;#so that eventually the x &amp;lt; 10 statement will be false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second type of loop is the for loop, which will loop through the
content of a list one by one. (I will talk about list in another post,
but basically, a list is just a sequence of values that is identified by
a single&amp;nbsp;variable).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# the basic syntax of a for loop is:&lt;/span&gt;
&lt;span class="c1"&gt;# for [variable name] in [list]:&lt;/span&gt;
&lt;span class="c1"&gt;# #codes for the loop&lt;/span&gt;
&lt;span class="c1"&gt;# for example:&lt;/span&gt;

&lt;span class="c1"&gt;#Defining a list, more on this later&lt;/span&gt;
&lt;span class="n"&gt;nameList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# running the loop, printing the content of the list&lt;/span&gt;
&lt;span class="c1"&gt;# one by one&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nameList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello,&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="c1"&gt;# The code above will print John,Jack and Adam on the console&lt;/span&gt;
&lt;span class="c1"&gt;# You can also generate a list of numbers by using the range function&lt;/span&gt;
&lt;span class="c1"&gt;# the range function takes two arguments, the beginning and the end of&lt;/span&gt;
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;

&lt;span class="c1"&gt;# Will print the numbers 2-10&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="python"></category></entry><entry><title>My First WP7 Apps on the Marketplace ‚Äì Demotivator¬†7</title><link href="http://hndr.me/blog/my-first-wp7-apps-on-the-marketplace-demotivator-7" rel="alternate"></link><published>2012-01-10T20:35:00+08:00</published><updated>2012-01-10T20:35:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-01-10:/blog/my-first-wp7-apps-on-the-marketplace-demotivator-7</id><summary type="html">&lt;p&gt;Ok, so I mentioned that I am developing several Windows Phone 7 Apps,
and I ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, so I mentioned that I am developing several Windows Phone 7 Apps,
and I actually got one of them published on the marketplace! Most of the
others are still unpublished yet though, either its going on review, or
well, I just didn‚Äôt finish&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;So, here is the one that got it to the marketplace. Demotivator 7, it‚Äôs
a application to create demotivator posters from the pictures stored in
the phone. The download link is &lt;a href="http://www.windowsphone.com/en-US/apps/f7f72a6f-15b6-408c-9b25-80b5651ef501"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6672744873/" title="2 by p.hdra, on Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7158/6672744873_a06b651ce4_b.jpg" width="480" height="800" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6672743421/" title="1 by p.hdra, on Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7149/6672743421_d035f82905_b.jpg" width="480" height="800" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are some bugs when creating a portrait poster, I already fixed
that, but I just don‚Äôt feel like updating it yet because of the
troublesome upload process, so, maybe&amp;nbsp;later.&lt;/p&gt;</content><category term="apps"></category><category term="windows-phone"></category></entry><entry><title>Python Learning Progress Part¬†1</title><link href="http://hndr.me/blog/python-learning-progress-part-1" rel="alternate"></link><published>2012-01-09T19:55:00+08:00</published><updated>2012-01-09T19:55:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2012-01-09:/blog/python-learning-progress-part-1</id><summary type="html">&lt;p&gt;Ok, so last time I mentioned that I began learning Python. with the Zed
Shaw ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, so last time I mentioned that I began learning Python. with the Zed
Shaw‚Äôs Learn Python The Hard Way as a guide, so far, it has been a
pretty good experience. So, in this blog, I will try to summarize what I
learned by trying to explain it in a way that I think easy to
understand, in doing that I hope I can get more understanding about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Before I begin, let me say my impression with it so far. With C++ as the
first programming language I learned, and the majority of my codes
written in fully object oriented language such as Java and C#, I find a
scripting language such as Python to be ‚Äúdifferent‚Äù. To begin with, the
dynamic typed variables, where a variable can be of any type, an
integer, a floating point number, a string, or even a function. Most
people says this is one of Python‚Äôs strength, but so far, I haven‚Äôt been
able to figure out how this will help me in creating programs other than
creating some confusion. Maybe its just me that hasn‚Äôt reached the point
where I can actually take advantage of a dynamically type language such
as&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;Anyway, lets go back to the main topic where I will try to explain
Python in a way where I find easy to understand. I wont be talking about
the installation of the Python, since its pretty straight forward both
on Windows and Linux. So I will start with the coding&amp;nbsp;part.&lt;/p&gt;
&lt;p&gt;Like most programming language guide, I will begin with a simple hello
world application. The hello world in Python is very&amp;nbsp;simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, World&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That‚Äôs all, save it as with a .py extension, and run the command &lt;code&gt;python filename.py&lt;/code&gt;
 in the cmd/terminal to run it. Another alternative is to run
command python in the cmd/terminal to enter the python shell, where the
python commands can be entered and run like a command prompt&amp;nbsp;instruction.&lt;/p&gt;
&lt;p&gt;The print statement is pretty straight forward, it will produce the
output to the screen. Each of the print statement will print the output
in a new line,&amp;nbsp;so,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#These will print these two things on a different line&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello,&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Its a wonderful world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Will print ‚ÄòHello, World‚Äô and ‚ÄôIt‚Äôs a wonderful world.‚Äô in a separate
line, and by the way, the ‚Äò#‚Äô characters comments out the line, so that
it will be ignored by the Python interpreter. Math are also very simple,
as usual, combinations of operators and number will do the&amp;nbsp;job.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variables in python are dynamically typed, so a variable can be an
integer, a string, or any other type depending on the&amp;nbsp;value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="c1"&gt;#will print 15&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="c1"&gt;#and we can change it to a value of a different type&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Now this is a string&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;#we can still print it in the same way&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="python"></category></entry><entry><title>Kinect Project Status Update I - Tools For Building a Kinect¬†Applications</title><link href="http://hndr.me/blog/kinect-project-status-update-i-tools-for-building-a-kinect-applications" rel="alternate"></link><published>2011-10-14T12:24:00+08:00</published><updated>2011-10-14T12:24:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2011-10-14:/blog/kinect-project-status-update-i-tools-for-building-a-kinect-applications</id><summary type="html">&lt;p&gt;Update on my attempts on working with&amp;nbsp;Kinect.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6266069590/" title="Kinect by p.hdra, on Flickr"&gt;&lt;img src="http://farm7.staticflickr.com/6177/6266069590_5f69b81c46_b.jpg" width="1024" height="681" alt="Kinect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Previously, I wrote about testing the water with Kinect, and well, it
seems like I am drowning now. The development process is much more
complicated that I&amp;nbsp;thought.&lt;/p&gt;
&lt;p&gt;To begin with, there are several drivers available for the Kinect, the
most commonly used are the official &lt;a href="http://research.microsoft.com/en-us/um/redmond/projects/kinectsdk/"&gt;Kinect for Windows &lt;span class="caps"&gt;SDK&lt;/span&gt; from
Microsoft&lt;/a&gt;, the &lt;a href="http://www.openni.org"&gt;OpenNI&lt;/a&gt; from PrimeSense, and the community maintained
&lt;a href="http://www.openkinect.org"&gt;OpenKinect&lt;/a&gt; (libfreenect). So, the first problem is choosing which one
to install on your system, sounds easy enough, but it is not. All of
them have their own pro and cons, and they can&amp;#8217;t be installed on the
same system side by side, so let&amp;#8217;s talk about them one by&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;First, the Kinect for Windows &lt;span class="caps"&gt;SDK&lt;/span&gt; from Microsoft, as expected, this &lt;span class="caps"&gt;SDK&lt;/span&gt;
only support Windows systems, so its pretty straight forward to use it.
The installation is pretty simple as well, download the installer, and
run it on your computer, then you are ready to develop your own Kinect
applications. The development process is also straight forward, open up
Visual Studio, add the reference to the Kinect libraries, and start
using it. Microsoft also provided us with a series of &lt;a href="http://channel9.msdn.com/coding4fun/kinect/Getting-started-with-the-Kinect-for-Windows-SDK-quickly-with-the-Kinect-Quickstarts"&gt;quick start
videos&lt;/a&gt;, making it even easier for us get started. Developers also have
the choice to program in either C# or C++. For the time being this is
the one installed in my Windows&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;But, there are several downsides to this, the &lt;span class="caps"&gt;SDK&lt;/span&gt; is still relatively
new, so there are limited 3rd party libraries and projects, in addition,
the license agreement that come with the &lt;span class="caps"&gt;SDK&lt;/span&gt; is pretty restricting,
added with the fact the the source are not available, the aren&amp;#8217;t many
hackers out there are experimenting with it compared with the other two
options. Another catch is that it has a minimum range of 850mm from the
sensor for the depth camera to work, this is very important, as I think
there is a possibility that I am going to deal with finger gestures
pretty often, the distance would make it difficult to track the fingers.
I also haven&amp;#8217;t seen any libraries for gesture recognition provided for
this, even the AForge.&lt;span class="caps"&gt;NET&lt;/span&gt; libraries only support the libfreenect. But
then, the &lt;span class="caps"&gt;SDK&lt;/span&gt; is still in its beta stage, so I hope Microsoft can get
the official release out soon, with more features and less restricting
license&amp;nbsp;agreement.&lt;/p&gt;
&lt;p&gt;Next up is the PrimeSense&amp;#8217;s OpenNI. PrimeSense is the company who
developed the Kinect hardware for Microsoft. The are three primary
components of the driver they provide. They are the OpenNI library
itself, the &lt;span class="caps"&gt;NITE&lt;/span&gt; libraries, and the Sensor Driver. The Sensor Driver are
used so that the computer can recognize the sensor hardware (the OpenNI
doesn&amp;#8217;t only support the Microsoft Kinect, but it also support other
PrimeSense compliant hardware, such as Asus&amp;#8217;s Xtion), an alternative to
this is the &lt;a href="https://github.com/avin2/SensorKinect"&gt;avin&amp;#8217;s Sensor Kinect&lt;/a&gt;¬†which is a fork of the OpenNI&amp;#8217;s
Sensor driver. Next is the &lt;span class="caps"&gt;NITE&lt;/span&gt; libraries, the &lt;span class="caps"&gt;NITE&lt;/span&gt; libraries is an
optional component, it provides the algorithms for skeletal tracking and
other functionalities, and this library is not open source. Last, is the
OpenNI library itself, this component provides the functionality so that
the computer can consume the audio, color video, and depth video data
from the&amp;nbsp;sensor.&lt;/p&gt;
&lt;p&gt;OpenNI has been around for quite a while, and there are a lot of
projects developed using it, it is also cross-platform. There are many
software components that are built for it, such as the Point Cloud
Library, and OpenCV and many others. Of course, those libraries can also
be used for other drivers, but it would take quite a lot of work to do
it. The main language used in this &lt;span class="caps"&gt;SDK&lt;/span&gt; is C, but there are wrappers for
other languages provided. The driver is open source, and the license
provide quite a lot of freedom for the developers, so there are a lot of
projects built on&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;There is a installer wizard for Windows provided, but since I already
installed the Kinect for Windows &lt;span class="caps"&gt;SDK&lt;/span&gt;, I can&amp;#8217;t install it on my Windows
system. Since I also have Ubuntu installed on my laptop, I tried to
install it on it, but it is not as easy as I thought, after several
build errors and other stuff, I downloaded the binaries of all three
components, and installed it, but when i try to run any of the samples,
bit it gives me this&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;InitFromXml failed: Failed to set &lt;span class="caps"&gt;USB&lt;/span&gt; interface!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I tried to build manually from the source, same error. Tried to built
with the RedistMaker provided with the source, same error. So, I haven&amp;#8217;t
been able to try it&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Last but not least, is the OpenKinect. This one is open source as well,
and since it was one of the first Kinect hack available, there aren&amp;#8217;t
any shortage of project samples and 3rd party software components, the
AForge.&lt;span class="caps"&gt;NET&lt;/span&gt; framework also support this driver. Like the OpenNI,
OpenKinect is also a cross platform sofware, so we can install it on
Windows, Linux, or Mac &lt;span class="caps"&gt;OSX&lt;/span&gt;. The installation is much more
straightforward compared to OpenNI, there are only one component to
install, which is the libfreenect. The other dependencies can be easily
found as well. The one of the optional component is the
libfreenect-demos, which provides you with several sample project. Just
like the OpenNI, i tried to install it on my Ubuntu system. Tried to run
the sample, an&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Could not claim interface on camera: -6
Could not open device
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, I haven&amp;#8217;t been able to run this one&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;So for now, I only have access to the Kinect for Windows &lt;span class="caps"&gt;SDK&lt;/span&gt;, I guess I
should just meddle with the Kinect &lt;span class="caps"&gt;SDK&lt;/span&gt; for now, and keep looking for
solutions on the other two&amp;nbsp;alternatives.&lt;/p&gt;</content><category term="kinect"></category><category term="programming"></category></entry><entry><title>Testing the Water on Kinect¬†Applications</title><link href="http://hndr.me/blog/testing-the-water-on-kinect-applications" rel="alternate"></link><published>2011-10-02T16:01:00+08:00</published><updated>2011-10-02T16:01:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2011-10-02:/blog/testing-the-water-on-kinect-applications</id><summary type="html">&lt;p&gt;Okay, so I am started planning my final year project this semester, and
for this ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Okay, so I am started planning my final year project this semester, and
for this first phase, I am only required to do the planning, the
documentation and well, the report stuffs, but, since I don&amp;#8217;t have any
pictures of the Microsoft Kinect application development, I decided to
do some coding on it as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Since there are so many possibilities on what the Kinect can do, there
are several choices on what kind of application I am going to do, I need
to narrow it down. My project is trying to use the Kinect to recognize
sign language, and translate them. In other words, besides doing the
skeleton tracking, I also need to do some form of gesture recognition,
and also, I need to at least know a little bit of the sign language
itself. Of course, I still know very little of those&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;First thing to do, of course I need to look up for some samples of the
Kinect hack itself, even though it is not doing the same thing, at least
it can help me get an idea what the Kinect is capable of. It is not a
difficult thing, a little bit of search on any search engine would get
me a lot of&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;Here is the one that impressed me the most: &lt;a href="http://www.youtube.com/watch?v=quGhaggn3cQ"&gt;http://www.youtube.com/watch?v=quGhaggn3cQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The program can scan the room with the Kinect, and the program will
process the input from the Kinect, and create a 3d scene with it.
Imagine what it can do if the Kinect&amp;#8217;s image sensor have higher
resolution. I wonder how they did that. Of course, that is much more
sophisticated than what I am trying to do, just by looking at the people
involved in the project, you can see how serious that project&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Here are some of the impressive works: &lt;a href="http://www.youtube.com/watch?v=ho8KVOe_y08"&gt;http://www.youtube.com/watch?v=ho8KVOe_y08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and this video shows how it can be integrated with other devices from
Microsoft: &lt;a href="http://www.youtube.com/watch?v=2mktWd0-WGs"&gt;http://www.youtube.com/watch?v=2mktWd0-WGs&lt;/a&gt;&lt;/p&gt;</content><category term="kinect"></category><category term="programming"></category></entry><entry><title>My First Android¬†Application</title><link href="http://hndr.me/blog/my-first-android-application" rel="alternate"></link><published>2011-07-02T22:35:00+08:00</published><updated>2011-07-02T22:35:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2011-07-02:/blog/my-first-android-application</id><summary type="html">&lt;p&gt;Ok, I think I mentioned that I (with a partner in my group) am
developing ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, I think I mentioned that I (with a partner in my group) am
developing an Android application for a class assignment, and here it
is, its finished, but not a really usable apps&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;It‚Äôs a app to encrypt &lt;span class="caps"&gt;SMS&lt;/span&gt; before sending it. It uses an asymmetric
encryption algorithm, &lt;span class="caps"&gt;RSA&lt;/span&gt;, meaning that the key exchange needs to be
done before sending any encrypted message. The encryption and decryption
can only be done within the apps&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6678908805/" title="Untitled by p.hdra, on Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7015/6678908805_b0da41bdb0_z.jpg" width="517" height="282" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The development process aren‚Äôt very intuitive &lt;span class="caps"&gt;IMO&lt;/span&gt;, the emulator are just
plain unusable, and eclipse integration just didn‚Äôt feel ‚Äònative‚Äô.
Switching between code view and design view takes several seconds to
load, but then, maybe that‚Äôs just my laptop. The main programming
language used is Java, so there isn‚Äôt too much problem there, but I am
not really used to the &lt;span class="caps"&gt;UI&lt;/span&gt; markup system, maybe I need more experience to
get into it. Still, the biggest problem is the emulator, honestly,
during the development process, whenever I did some change, I always
feel reluctant to test it, because everything is just so slow. I don‚Äôt
have any plan yet, but maybe I will look more into this sometime in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;Well, as mentioned before, its not a really usable app, I don‚Äôt really
understand the &lt;span class="caps"&gt;RSA&lt;/span&gt; algorithm, and I don‚Äôt put any effort in making the
interface good looking either. But then,&amp;nbsp;whatever,&lt;/p&gt;</content><category term="android"></category><category term="programming"></category><category term="school"></category></entry></feed>