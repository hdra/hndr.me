<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>HNDR.ME - 2011</title><link href="https://hndr.me/" rel="alternate"></link><link href="https://hndr.me/feeds/2011.atom.xml" rel="self"></link><id>https://hndr.me/</id><updated>2011-10-14T12:24:00+08:00</updated><entry><title>Kinect Project Status Update I - Tools For Building a Kinect Applications</title><link href="https://hndr.me/blog/kinect-project-status-update-i-tools-for-building-a-kinect-applications" rel="alternate"></link><published>2011-10-14T12:24:00+08:00</published><updated>2011-10-14T12:24:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2011-10-14:/blog/kinect-project-status-update-i-tools-for-building-a-kinect-applications</id><summary type="html">&lt;p&gt;Update on my attempts on working with&amp;nbsp;Kinect.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6266069590/" title="Kinect by p.hdra, on Flickr"&gt;&lt;img src="http://farm7.staticflickr.com/6177/6266069590_5f69b81c46_b.jpg" width="1024" height="681" alt="Kinect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Previously, I wrote about testing the water with Kinect, and well, it
seems like I am drowning now. The development process is much more
complicated that I&amp;nbsp;thought.&lt;/p&gt;
&lt;p&gt;To begin with, there are several drivers available for the Kinect, the
most commonly used are the official &lt;a href="http://research.microsoft.com/en-us/um/redmond/projects/kinectsdk/"&gt;Kinect for Windows &lt;span class="caps"&gt;SDK&lt;/span&gt; from
Microsoft&lt;/a&gt;, the &lt;a href="http://www.openni.org"&gt;OpenNI&lt;/a&gt; from PrimeSense, and the community maintained
&lt;a href="http://www.openkinect.org"&gt;OpenKinect&lt;/a&gt; (libfreenect). So, the first problem is choosing which one
to install on your system, sounds easy enough, but it is not. All of
them have their own pro and cons, and they can&amp;#8217;t be installed on the
same system side by side, so let&amp;#8217;s talk about them one by&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;First, the Kinect for Windows &lt;span class="caps"&gt;SDK&lt;/span&gt; from Microsoft, as expected, this &lt;span class="caps"&gt;SDK&lt;/span&gt;
only support Windows systems, so its pretty straight forward to use it.
The installation is pretty simple as well, download the installer, and
run it on your computer, then you are ready to develop your own Kinect
applications. The development process is also straight forward, open up
Visual Studio, add the reference to the Kinect libraries, and start
using it. Microsoft also provided us with a series of &lt;a href="http://channel9.msdn.com/coding4fun/kinect/Getting-started-with-the-Kinect-for-Windows-SDK-quickly-with-the-Kinect-Quickstarts"&gt;quick start
videos&lt;/a&gt;, making it even easier for us get started. Developers also have
the choice to program in either C# or C++. For the time being this is
the one installed in my Windows&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;But, there are several downsides to this, the &lt;span class="caps"&gt;SDK&lt;/span&gt; is still relatively
new, so there are limited 3rd party libraries and projects, in addition,
the license agreement that come with the &lt;span class="caps"&gt;SDK&lt;/span&gt; is pretty restricting,
added with the fact the the source are not available, the aren&amp;#8217;t many
hackers out there are experimenting with it compared with the other two
options. Another catch is that it has a minimum range of 850mm from the
sensor for the depth camera to work, this is very important, as I think
there is a possibility that I am going to deal with finger gestures
pretty often, the distance would make it difficult to track the fingers.
I also haven&amp;#8217;t seen any libraries for gesture recognition provided for
this, even the AForge.&lt;span class="caps"&gt;NET&lt;/span&gt; libraries only support the libfreenect. But
then, the &lt;span class="caps"&gt;SDK&lt;/span&gt; is still in its beta stage, so I hope Microsoft can get
the official release out soon, with more features and less restricting
license&amp;nbsp;agreement.&lt;/p&gt;
&lt;p&gt;Next up is the PrimeSense&amp;#8217;s OpenNI. PrimeSense is the company who
developed the Kinect hardware for Microsoft. The are three primary
components of the driver they provide. They are the OpenNI library
itself, the &lt;span class="caps"&gt;NITE&lt;/span&gt; libraries, and the Sensor Driver. The Sensor Driver are
used so that the computer can recognize the sensor hardware (the OpenNI
doesn&amp;#8217;t only support the Microsoft Kinect, but it also support other
PrimeSense compliant hardware, such as Asus&amp;#8217;s Xtion), an alternative to
this is the &lt;a href="https://github.com/avin2/SensorKinect"&gt;avin&amp;#8217;s Sensor Kinect&lt;/a&gt; which is a fork of the OpenNI&amp;#8217;s
Sensor driver. Next is the &lt;span class="caps"&gt;NITE&lt;/span&gt; libraries, the &lt;span class="caps"&gt;NITE&lt;/span&gt; libraries is an
optional component, it provides the algorithms for skeletal tracking and
other functionalities, and this library is not open source. Last, is the
OpenNI library itself, this component provides the functionality so that
the computer can consume the audio, color video, and depth video data
from the&amp;nbsp;sensor.&lt;/p&gt;
&lt;p&gt;OpenNI has been around for quite a while, and there are a lot of
projects developed using it, it is also cross-platform. There are many
software components that are built for it, such as the Point Cloud
Library, and OpenCV and many others. Of course, those libraries can also
be used for other drivers, but it would take quite a lot of work to do
it. The main language used in this &lt;span class="caps"&gt;SDK&lt;/span&gt; is C, but there are wrappers for
other languages provided. The driver is open source, and the license
provide quite a lot of freedom for the developers, so there are a lot of
projects built on&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;There is a installer wizard for Windows provided, but since I already
installed the Kinect for Windows &lt;span class="caps"&gt;SDK&lt;/span&gt;, I can&amp;#8217;t install it on my Windows
system. Since I also have Ubuntu installed on my laptop, I tried to
install it on it, but it is not as easy as I thought, after several
build errors and other stuff, I downloaded the binaries of all three
components, and installed it, but when i try to run any of the samples,
bit it gives me this&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;InitFromXml failed: Failed to set &lt;span class="caps"&gt;USB&lt;/span&gt; interface!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I tried to build manually from the source, same error. Tried to built
with the RedistMaker provided with the source, same error. So, I haven&amp;#8217;t
been able to try it&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Last but not least, is the OpenKinect. This one is open source as well,
and since it was one of the first Kinect hack available, there aren&amp;#8217;t
any shortage of project samples and 3rd party software components, the
AForge.&lt;span class="caps"&gt;NET&lt;/span&gt; framework also support this driver. Like the OpenNI,
OpenKinect is also a cross platform sofware, so we can install it on
Windows, Linux, or Mac &lt;span class="caps"&gt;OSX&lt;/span&gt;. The installation is much more
straightforward compared to OpenNI, there are only one component to
install, which is the libfreenect. The other dependencies can be easily
found as well. The one of the optional component is the
libfreenect-demos, which provides you with several sample project. Just
like the OpenNI, i tried to install it on my Ubuntu system. Tried to run
the sample, an&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Could not claim interface on camera: -6
Could not open device
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, I haven&amp;#8217;t been able to run this one&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;So for now, I only have access to the Kinect for Windows &lt;span class="caps"&gt;SDK&lt;/span&gt;, I guess I
should just meddle with the Kinect &lt;span class="caps"&gt;SDK&lt;/span&gt; for now, and keep looking for
solutions on the other two&amp;nbsp;alternatives.&lt;/p&gt;</content><category term="kinect"></category><category term="programming"></category></entry><entry><title>Testing the Water on Kinect Applications</title><link href="https://hndr.me/blog/testing-the-water-on-kinect-applications" rel="alternate"></link><published>2011-10-02T16:01:00+08:00</published><updated>2011-10-02T16:01:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2011-10-02:/blog/testing-the-water-on-kinect-applications</id><summary type="html">&lt;p&gt;Okay, so I am started planning my final year project this semester, and
for this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Okay, so I am started planning my final year project this semester, and
for this first phase, I am only required to do the planning, the
documentation and well, the report stuffs, but, since I don&amp;#8217;t have any
pictures of the Microsoft Kinect application development, I decided to
do some coding on it as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Since there are so many possibilities on what the Kinect can do, there
are several choices on what kind of application I am going to do, I need
to narrow it down. My project is trying to use the Kinect to recognize
sign language, and translate them. In other words, besides doing the
skeleton tracking, I also need to do some form of gesture recognition,
and also, I need to at least know a little bit of the sign language
itself. Of course, I still know very little of those&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;First thing to do, of course I need to look up for some samples of the
Kinect hack itself, even though it is not doing the same thing, at least
it can help me get an idea what the Kinect is capable of. It is not a
difficult thing, a little bit of search on any search engine would get
me a lot of&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;Here is the one that impressed me the most: &lt;a href="http://www.youtube.com/watch?v=quGhaggn3cQ"&gt;http://www.youtube.com/watch?v=quGhaggn3cQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The program can scan the room with the Kinect, and the program will
process the input from the Kinect, and create a 3d scene with it.
Imagine what it can do if the Kinect&amp;#8217;s image sensor have higher
resolution. I wonder how they did that. Of course, that is much more
sophisticated than what I am trying to do, just by looking at the people
involved in the project, you can see how serious that project&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Here are some of the impressive works: &lt;a href="http://www.youtube.com/watch?v=ho8KVOe_y08"&gt;http://www.youtube.com/watch?v=ho8KVOe_y08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and this video shows how it can be integrated with other devices from
Microsoft: &lt;a href="http://www.youtube.com/watch?v=2mktWd0-WGs"&gt;http://www.youtube.com/watch?v=2mktWd0-WGs&lt;/a&gt;&lt;/p&gt;</content><category term="kinect"></category><category term="programming"></category></entry><entry><title>My First Android Application</title><link href="https://hndr.me/blog/my-first-android-application" rel="alternate"></link><published>2011-07-02T22:35:00+08:00</published><updated>2011-07-02T22:35:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2011-07-02:/blog/my-first-android-application</id><summary type="html">&lt;p&gt;Ok, I think I mentioned that I (with a partner in my group) am
developing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, I think I mentioned that I (with a partner in my group) am
developing an Android application for a class assignment, and here it
is, its finished, but not a really usable apps&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;It’s a app to encrypt &lt;span class="caps"&gt;SMS&lt;/span&gt; before sending it. It uses an asymmetric
encryption algorithm, &lt;span class="caps"&gt;RSA&lt;/span&gt;, meaning that the key exchange needs to be
done before sending any encrypted message. The encryption and decryption
can only be done within the apps&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/6678908805/" title="Untitled by p.hdra, on Flickr"&gt;&lt;img src="http://farm8.staticflickr.com/7015/6678908805_b0da41bdb0_z.jpg" width="517" height="282" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The development process aren’t very intuitive &lt;span class="caps"&gt;IMO&lt;/span&gt;, the emulator are just
plain unusable, and eclipse integration just didn’t feel ‘native’.
Switching between code view and design view takes several seconds to
load, but then, maybe that’s just my laptop. The main programming
language used is Java, so there isn’t too much problem there, but I am
not really used to the &lt;span class="caps"&gt;UI&lt;/span&gt; markup system, maybe I need more experience to
get into it. Still, the biggest problem is the emulator, honestly,
during the development process, whenever I did some change, I always
feel reluctant to test it, because everything is just so slow. I don’t
have any plan yet, but maybe I will look more into this sometime in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;Well, as mentioned before, its not a really usable app, I don’t really
understand the &lt;span class="caps"&gt;RSA&lt;/span&gt; algorithm, and I don’t put any effort in making the
interface good looking either. But then,&amp;nbsp;whatever,&lt;/p&gt;</content><category term="android"></category><category term="programming"></category><category term="school"></category></entry></feed>